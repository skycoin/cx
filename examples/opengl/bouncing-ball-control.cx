package main

import "gl"
import "glfw"

var width i32 = 800
var height i32 = 600
var velocity f32 = 1.0

type Ball struct {
	x f32
	y f32
	vx f32
	vy f32
	gravity f32
	radius f32
}

var ball Ball

var prevTime f32
var currTime f32
var timeDelta f32
func updateTiming() () {
	// prevent 1st delta from being large, which would make moving objects teleport unpredictably 
	if prevTime == 0.0 {
		prevTime = f64.f32(glfw.GetTime())
	}

	currTime = f64.f32(glfw.GetTime())
	timeDelta = currTime - prevTime
	prevTime = currTime
}

func drawBall (ball Ball) () {
	var full_angle f32
	full_angle = f32.mul(2.0, 3.141592654)
	var x f32
	var y f32

	gl.Begin(gl.POLYGON)
	gl.Color3f(1.0, 1.0, 1.0)

	var i f32
	for i = 0.0; f32.lt(i, 20.0); i = f32.add(i, 1.0) {
		x = f32.add(ball.x, f32.mul(ball.radius, f32.cos(f32.div(f32.mul(i, full_angle), 20.0))))
		y = f32.add(ball.y, f32.mul(ball.radius, f32.sin(f32.div(f32.mul(i, full_angle), 20.0))))

		gl.Vertex2f(x, y)
	}

	gl.End()
}

func ballDirection (window str, key i32, scancode i32, action i32, mods i32) () {
	if bool.and(i32.eq(key, 263), i32.eq(action, 1)) {
		ball.vx = ball.vx - f32.mul(2.0, velocity)
	}
	if bool.and(i32.eq(key, 262), i32.eq(action, 1)) {
		ball.vx = ball.vx + f32.mul(2.0, velocity)
	}
}

func main () {
	glfw.Init()

	glfw.CreateWindow("window", width, height, "Bouncing Ball (Keyboard Controlled)")
	glfw.MakeContextCurrent("window")
	
	gl.Init()
	var program i32
	program = gl.CreateProgram()
	gl.LinkProgram(program)

	glfw.SetKeyCallback("window", "ballDirection")

	ball = Ball{
		radius: 0.05,
		x: 0.0,
		y: 0.0,
		vx: velocity,
		vy: velocity,
		gravity: 8.0}

	var ratio f32

	str.print("\nMove the ball to the right or the left using the arrow keys.")

	for bool.not(glfw.ShouldClose("window")) {
		updateTiming()

		var bufferWidth i32
		var bufferHeight i32
		bufferWidth, bufferHeight = glfw.GetFramebufferSize("window")
		ratio = f32.div(i32.f32(bufferWidth), i32.f32(bufferHeight))

		gl.Clear(gl.COLOR_BUFFER_BIT)

		gl.UseProgram(program)
		
		gl.MatrixMode(gl.PROJECTION)
		gl.LoadIdentity()
		gl.Ortho(f32.f64(f32.mul(ratio, -1.0)), f32.f64(ratio), -1.0D, 1.0D, 1.0D, -1.0D)
		gl.Viewport(0, 0, bufferWidth, bufferHeight)
		gl.MatrixMode(gl.MODELVIEW)

		//Bounce on window bottom
		if f32.lteq(f32.sub(ball.y, ball.radius), -1.0) {
			ball.vy = f32.abs(ball.vy)
		} else {
			ball.vy = ball.vy - ball.gravity * timeDelta
		}

		//Bounce off top edge 
		if f32.gteq(f32.add(ball.y, ball.radius), 1.0) {
			ball.vy = 0.0 - f32.abs(ball.vy)
		}

		//Bounce off left edge
		if lteq(f32.sub(ball.x, ball.radius), f32.sub(0.0, ratio)) {
			ball.vx = velocity
		}

		//Bounce off right edge
		if gteq(f32.add(ball.x, ball.radius), ratio) {
			ball.vx = 0.0 - velocity
		}

		ball.x = f32.add(ball.x, ball.vx * timeDelta)
		ball.y = f32.add(ball.y, ball.vy * timeDelta)


		
		drawBall(ball)


		
		glfw.PollEvents()
		glfw.SwapBuffers("window")
	}
}
