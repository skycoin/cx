package main

import "gl"
import "glfw"

var width i32 = 400
var height i32 = 300

func mouseButton (window str, key i32, action i32, mods i32) () {
	x, y := glfw.GetCursorPos("window")
	if key == glfw.MouseButtonLeft {
		if action == glfw.Press {
			str.print("mouse button left pressed at:")
			str.print(str.concat("x: ", f64.str(x)))
			str.print(str.concat("y: ", f64.str(y)))
		}
		if action == glfw.Release {
			str.print("mouse button left released at:")
			str.print(str.concat("x: ", f64.str(x)))
			str.print(str.concat("y: ", f64.str(y)))
		}
	}

	if key == glfw.MouseButtonRight {
		if action == glfw.Press {
			str.print("mouse button right pressed at:")
			str.print(str.concat("x: ", f64.str(x)))
			str.print(str.concat("y: ", f64.str(y)))
		}
		if action == glfw.Release {
			str.print("mouse button right released at:")
			str.print(str.concat("x: ", f64.str(x)))
			str.print(str.concat("y: ", f64.str(y)))
		}
	}

	if key == glfw.MouseButtonMiddle {
		if action == glfw.Press {
			str.print("mouse button middle pressed at:")
			str.print(str.concat("x: ", f64.str(x)))
			str.print(str.concat("y: ", f64.str(y)))
		}
		if action == glfw.Release {
			str.print("mouse button middle released at:")
			str.print(str.concat("x: ", f64.str(x)))
			str.print(str.concat("y: ", f64.str(y)))
		}
	}
}

func mouseCursor (window str, xpos f64, ypos f64) () {
	x, y := glfw.GetCursorPos("window")
	str.print("mouse cursor at:")
	str.print(str.concat("x: ", f64.str(x)))
	str.print(str.concat("y: ", f64.str(y)))
}

func main () () {
	glfw.Init()

	glfw.CreateWindow("window", width, height, "Mouse Interaction")
	glfw.MakeContextCurrent("window")
	
	gl.Init()
	program := gl.CreateProgram()
	gl.LinkProgram(program)

	glfw.SetMouseButtonCallback("window", "mouseButton")
	
	// Uncomment this like to print where is the cursor at any moment
	//glfw.SetCursorPosCallback("window", "mouseCursor")

	
	//glfw.SetInputMode("window", glfw.Cursor, glfw.CursorDisabled)
	//glfw.SetInputMode("window", glfw.Cursor, glfw.CursorHidden)
	//glfw.SetInputMode("window", glfw.Cursor, glfw.CursorNormal)

	for not(glfw.ShouldClose("window")) {
		bufferWidth, bufferHeight := glfw.GetFramebufferSize("window")
		ratio = f32.div(i32.f32(bufferWidth), i32.f32(bufferHeight))

		gl.Clear(gl.COLOR_BUFFER_BIT)

		gl.UseProgram(program)
		
		glfw.PollEvents()
		glfw.SwapBuffers("window")
	}
}
