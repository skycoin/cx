package main

import "gl"
import "glfw"

var width i32 = 600
var height i32 = 600

var square []f32 = []f32{
	-0.5, 0.5, 0.0,
	-0.5, -0.5, 0.0,
	0.5, -0.5, 0.0,

	-0.5, 0.5, 0.0,
	0.5, 0.5, 0.0,
	0.5, -0.5, 0.0
}

var triBL []f32 = []f32{
	-0.5, 0.5, 0.0,
	-0.5, -0.5, 0.0,
	0.5, -0.5, 0.0
}

var triTR []f32 = []f32{
	-0.5, 0.5, 0.0,
	0.5, 0.5, 0.0,
	0.5, -0.5, 0.0
}

var triTL []f32 = []f32{
	-0.5, 0.5, 0.0,
	0.5, 0.5, 0.0,
	-0.5, -0.5, 0.0
}

var triBR []f32 = []f32{
	-0.5, -0.5, 0.0,
	0.5, -0.5, 0.0,
	0.5, 0.5, 0.0
}

var testing []f32 = []f32{
	// f 17 	19 	20
	0, 0.5, 0.5,
	-0.25, 0.432999992370605, 0.5,
	-0.432999992370605, 0.25, 0.5,
	// f 17 	20 	21
	0, 0.5, 0.5,
	-0.432999992370605, 0.25, 0.5,
	-0.5, 0, 0.5,
	// f 17 	21 	22
	0, 0.5, 0.5,
	-0.5, 0, 0.5,
	-0.432999992370605, -0.25, 0.5,
	// f 17 	22 	23
	0, 0.5, 0.5,
	-0.432999992370605, -0.25, 0.5,
	-0.25, -0.432999992370605, 0.5,
	// f 17 	23 	24
	0, 0.5, 0.5,
	-0.25, -0.432999992370605, 0.5,
	0, -0.5, 0.5,
	// f 17 	24 	4
	0, 0.5, 0.5,
	0, -0.5, 0.5,
	0.25, -0.432999992370605, 0.5,
	// f 17 	4 	3
	0, 0.5, 0.5,
	0.25, -0.432999992370605, 0.5,
	0.432999992370605, -0.25, 0.5,
	// f 17 	3 	16
	0, 0.5, 0.5,
	0.432999992370605, -0.25, 0.5,
	0.5, 0, 0.5,
	// f 17 	16 	15
	0, 0.5, 0.5,
	0.5, 0, 0.5,
	0.432999992370605, 0.25, 0.5,
	// f 17 	15 	18
	0, 0.5, 0.5,
	0.432999992370605, 0.25, 0.5,
	0.25, 0.432999992370605, 0.5
}

var rows i32 = 20
var columns i32 = 20

var size i32 = 14

var vertexShaderSource str = "
          #version 120
          void main() {
            gl_Position = gl_ProjectionMatrix * gl_ModelViewMatrix * gl_Vertex;
          }
"

var fragmentShaderSource str = "
          #version 120
          void main() {
            gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
          }
"

func compileShader(source str, shaderType i32) (shader i32) {
	shader := gl.CreateShader(shaderType)

	gl.Strs(source, "csources")
	gl.ShaderSource(shader, 1, "csources")
	gl.Free("csources")
	gl.CompileShader(shader)
}

func makeVao (points []f32) (vao i32) {
	var vbo i32
	gl.GenBuffers(1, vbo) // should be &vbo. to be fixed, but should work as it is
	gl.BindBuffer(gl.ARRAY_BUFFER, vbo)
	gl.BufferData(gl.ARRAY_BUFFER, i32.mul(4, []f32.len(points)), points, gl.DYNAMIC_DRAW)

	var vao i32
	gl.GenVertexArrays(1, vao)
	
	gl.BindVertexArray(vao)
	gl.EnableVertexAttribArray(0)
	gl.BindBuffer(gl.ARRAY_BUFFER, vbo)
	gl.VertexAttribPointer(0, 3, gl.FLOAT, false, 0)
}

func draw (vao i32, len i32) () {
	gl.BindVertexArray(vao)
	gl.DrawArrays(gl.TRIANGLES, 0, i32.div(len, 3))
}

func addNull (source str) (s str) {
	bSource := str.[]byte(source)
	bSource := []byte.append(bSource, i32.byte(0))
	s = []byte.str(bSource)
}

func initOpenGL () (program i32) {
	gl.Init()

	vertexShader := compileShader(addNull(vertexShaderSource), gl.VERTEX_SHADER)
	fragmentShader := compileShader(addNull(fragmentShaderSource), gl.FRAGMENT_SHADER)

	program := gl.CreateProgram()
	
	gl.AttachShader(program, vertexShader)
	gl.AttachShader(program, fragmentShader)
	gl.LinkProgram(program)
}

func initGlfw (window str) () {
	glfw.Init()
	glfw.WindowHint(glfw.Resizable, glfw.False)
	glfw.WindowHint(glfw.ContextVersionMajor, 2)
	glfw.WindowHint(glfw.ContextVersionMinor, 1)
	// glfw.WindowHint(glfw.OpenGLProfile, glfw.OpenGLCoreProfile)
	//glfw.WindowHint(glfw.OpenGLForwardCompatible, glfw.True)

	glfw.CreateWindow("window", width, height, "Testing")
	glfw.MakeContextCurrent("window")
}

func newObject (obj []f32, x i32, y i32, z i32) (points []f32) {
	lenObject := []f32.len(obj)
	points := []f32.make(lenObject)

	[]f32.copy(points, obj)
	
	for c := 0; i32.lt(c, lenObject); c = i32.add(c, 1) {
		var position f32
		var size f32

		point := []f32.read(points, c)
		
		if i32.eq(i32.mod(c, 3), 0) {
			size = f32.div(1.0, i32.f32(columns))
			position = f32.mul(i32.f32(x), size)
		}
		if i32.eq(i32.mod(c, 3), 1) {
			size = f32.div(1.0, i32.f32(rows))
			position = f32.mul(i32.f32(y), size)
		}
		if i32.eq(i32.mod(c, 3), 2) {
			size = f32.div(1.0, i32.f32(rows))
			position = f32.mul(i32.f32(z), size)
		}

		[]f32.write(points, c, f32.sub(f32.mul(f32.add(position, f32.mul(point, size)), i32.f32(2)), i32.f32(1)))
	}
}

func newBox (x i32, y i32) (box []f32) {
	box := newObject(square, x, y, 0)

	box = []f32.concat(box, newObject(triBL, i32.sub(x, 1), i32.sub(y, 1), 0))
	box = []f32.concat(box, newObject(triTL, i32.sub(x, 1), i32.add(y, 1), 0))
	box = []f32.concat(box, newObject(triBR, i32.add(x, 1), i32.sub(y, 1), 0))
	box = []f32.concat(box, newObject(triTR, i32.add(x, 1), i32.add(y, 1), 0))
}

func newChar (x i32, y i32) (char []f32) {
	char := newObject(triTR, i32.sub(x, 1), i32.add(y, 1), 0)
	char = []f32.concat(char, newObject(triTL, i32.add(x, 1), i32.add(y, 1), 0))
	char = []f32.concat(char, newObject(square, x, y, 0))
	char = []f32.concat(char, newObject(square, i32.sub(x, 1), y, 0))
	char = []f32.concat(char, newObject(square, i32.add(x, 1), y, 0))
	char = []f32.concat(char, newObject(square, x, i32.sub(y, 1), 0))
}

func drawVaos (vaos []i32) () {
	vaosLen := []i32.len(vaos)
	for c := 0; i32.lt(c, vaosLen); c = i32.add(c, 1) {
		draw([]i32.read(vaos, c))
	}
}

var forestTex i32
var grassTex i32
var desertTex i32
var rotationX f32
var rotationY f32

// func scale (x i32, max i32) (out f32) {
// 	out = f32.add(f32.div(f32.mul(i32.f32(x), 2.0), i32.f32(max)), -1.0)
// }

func scale (x i32, max i32) (out f32) {
	out = f32.div(i32.f32(x), i32.f32(max))
}

func getTextureCoords (x i32, y i32, w i32, h i32, W i32) (x1 f32, x2 f32, y1 f32, y2 f32) {
	x1 = scale(x, W)
	x2 = scale(i32.add(x, w), W)
	y1 = scale(y, W)
	y2 = scale(i32.add(y, h), W)
}

func drawSpace (x i32, y i32, texture i32) () {
	gl.MatrixMode(gl.MODELVIEW)

	gl.LoadIdentity()
	
	x = i32.sub(i32.add(i32.mul(i32.mod(x, size), 2), 1), size)
	y = i32.sub(i32.add(i32.mul(i32.mod(y, size), 2), 1), size)
	gl.Translatef(f32.add(i32.f32(x), 0.0), f32.add(i32.f32(y), 0.0), f32.mul(i32.f32(size), -1.0))
	
	gl.Translatef(0.0, 0.0, 2.5)

	gl.Enable(gl.BLEND)
	gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)
	gl.DepthMask(true)

	gl.BindTexture(gl.TEXTURE_2D, texture)
	
	gl.Color4f(1.0, 1.0, 1.0, 1.0)

 	texX1, texX2, texY1, texY2 := getTextureCoords(1861, 1113, 84, 84, 2262)

	gl.Begin(gl.QUADS)
	gl.Normal3f(0.0, 0.0, 0.0)
	gl.TexCoord2f(texX1, texY2)
	gl.Vertex3f(-0.5, -0.5, 0.5)
	gl.TexCoord2f(texX1, texY1)
	gl.Vertex3f(-0.5, 0.5, 0.5)
	gl.TexCoord2f(texX2, texY1)
	gl.Vertex3f(0.5, 0.5, 0.5)
	gl.TexCoord2f(texX2, texY2)
	gl.Vertex3f(0.5, -0.5, 0.5)
	gl.End()
}

func drawChar (x i32, y i32, texture i32, sprite Sprite) () {
	gl.MatrixMode(gl.MODELVIEW)

	gl.LoadIdentity()
	
	x = i32.sub(i32.add(i32.mul(i32.mod(x, size), 2), 1), size)
	y = i32.sub(i32.add(i32.mul(i32.mod(y, size), 2), 1), size)
	gl.Translatef(f32.add(i32.f32(x), 0.0), f32.add(i32.f32(y), 0.0), f32.mul(i32.f32(size), -1.0))

	// gl.Enable(gl.BLEND)
	// gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)
	// gl.DepthMask(true)

	gl.BindTexture(gl.TEXTURE_2D, texture)

	gl.Color4f(1.0, 1.0, 1.0, 1.0)

	gl.Begin(gl.QUADS)

	gl.Normal3f(0.0, 0.0, 0.0)
	gl.TexCoord2f(sprite.x1, sprite.y2)
	gl.Vertex3f(-0.5, -0.5, 0.0)
	gl.TexCoord2f(sprite.x1, sprite.y1)
	gl.Vertex3f(-0.5, 0.5, 0.0)
	gl.TexCoord2f(sprite.x2, sprite.y1)
	gl.Vertex3f(0.5, 0.5, 0.0)
	gl.TexCoord2f(sprite.x2, sprite.y2)
	gl.Vertex3f(0.5, -0.5, 0.0)

	gl.End()
}

func drawTile (x i32, y i32, texture i32, sprite Sprite) () {
	gl.MatrixMode(gl.MODELVIEW)
	gl.LoadIdentity()

	x = i32.sub(i32.add(i32.mul(i32.mod(x, size), 2), 1), size)
	y = i32.sub(i32.add(i32.mul(i32.mod(y, size), 2), 1), size)

	gl.Translatef(i32.f32(x), i32.f32(y), f32.mul(i32.f32(size), -1.0))
	
	gl.BindTexture(gl.TEXTURE_2D, texture)
	gl.Color4f(1.0, 1.0, 1.0, 1.0)
	gl.Begin(gl.QUADS)
	gl.Normal3f(0.0, 0.0, 0.0)
	gl.TexCoord2f(sprite.x1, sprite.y2)
	gl.Vertex3f(-1.0, -1.0, 0.0)
	gl.TexCoord2f(sprite.x2, sprite.y2)
	gl.Vertex3f(1.0, -1.0, 0.0)
	gl.TexCoord2f(sprite.x2, sprite.y1)
	gl.Vertex3f(1.0, 1.0, 0.0)
	gl.TexCoord2f(sprite.x1, sprite.y1)
	gl.Vertex3f(-1.0, 1.0, 0.0)
	gl.End()
}

func setupScene () () {
	gl.Disable(gl.DITHER)
	gl.Disable(gl.POINT_SMOOTH)
	gl.Disable(gl.LINE_SMOOTH)
	gl.Disable(gl.POLYGON_SMOOTH)
	gl.Hint(gl.POINT_SMOOTH, gl.DONT_CARE)
	gl.Hint(gl.LINE_SMOOTH, gl.DONT_CARE)
	gl.Hint(gl.POLYGON_SMOOTH_HINT, gl.DONT_CARE)
	gl.Disable(gl.MULTISAMPLE_ARB)
	
	gl.TexEnvi(gl.TEXTURE_ENV, gl.TEXTURE_ENV_MODE, gl.MODULATE)
	gl.Disable(gl.DEPTH_TEST)

	gl.ClearColor(1.0, 1.0, 1.0, 1.0)
	gl.ClearDepth(f32.f64(1.0))
	gl.DepthFunc(gl.LEQUAL)
	
	gl.Enable(gl.BLEND)
	gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)
	gl.DepthMask(true)

	gl.MatrixMode(gl.PROJECTION)
	gl.LoadIdentity()
	
	// gl.Frustum(
	// 	f32.f64(-1.0), f32.f64(1.0), f32.f64(-1.0),
	// 	f32.f64(1.0), f32.f64(1.0), i32.f64(i32.add(size, 10)))

	//gl.Rotatef(90.0, 0.0, 0.0, 1.0)

	gl.Frustum(
		f32.f64(-1.0), f32.f64(1.0), f32.f64(-1.0),
		f32.f64(1.0), f32.f64(1.0), i32.f64(i32.add(size, 2)))

	// gl.Frustum(
	// 	f32.f64(1.0), f32.f64(1.0), f32.f64(1.0),
	// 	f32.f64(1.0), f32.f64(1.0), i32.f64(i32.add(size, 10)))

	gl.MatrixMode(gl.MODELVIEW)
	gl.LoadIdentity()
}

func map2Dto1D (r i32, c i32, w i32) (i i32) {
	i = i32.add(i32.mul(w, r), c)
}

func map1Dto2D (i i32, w i32) (c i32, r i32) {
	r = i32.sub(i32.sub(w, 1), i32.div(i, w))
	c = i32.mod(i, w)
}

func myCallback (window str, key i32, scancode i32, action i32, mods i32) () {
	if and(i32.eq(key, 265), i32.eq(action, 1)) {
		if i32.gteq(p1y, i32.sub(size, 1)) {
			p1y = i32.sub(size, 1)
			return
		} else {
			p1y = i32.add(p1y, 1)
			return
		}
	}
	if and(i32.eq(key, 264), i32.eq(action, 1)) {
		if i32.lteq(p1y, 0) {
			p1y = 0
			return
		} else {
			p1y = i32.add(p1y, -1)
			return
		}
		
	}
	if and(i32.eq(key, 263), i32.eq(action, 1)) {
		if i32.lteq(p1x, 0) {
			p1x = 0
			return
		} else {
			p1x = i32.add(p1x, -1)
			return
		}
	}
	if and(i32.eq(key, 262), i32.eq(action, 1)) {
		if i32.gteq(p1x, i32.sub(size, 1)) {
			p1x = i32.sub(size, 1)
			return
		} else {
			p1x = i32.add(p1x, 1)
			return
		}
	}
	// str.print(window)
	// i32.print(key)
	// i32.print(scancode)
	// i32.print(action)
	// i32.print(mods)
	// str.print("")
}

var p1x i32 = 1
var p1y i32 = 1

type Sprite struct {
	x1 f32
	x2 f32
	y1 f32
	y2 f32
	isObstacle bool
}

func setSprite (s Sprite, x1 i32, x2 i32, y1 i32, y2 i32, W i32, H i32) () {
	s.x1 = scale(i32.add(x1, 1), W)
	s.x2 = scale(i32.sub(x2, 1), W)
	s.y1 = scale(i32.add(y1, 1), H)
	s.y2 = scale(i32.sub(y2, 1), H)
}

func main () () {
	initGlfw("window")
	program := initOpenGL()

	glfw.SetKeyCallback("window", "myCallback")

	stop := not(glfw.ShouldClose("window"))

	wd := os.GetWorkingDirectory()
	
	tex_characters := gl.NewTexture(str.concat(wd, "textures/roguelike_characters.png"))
	tex_city := gl.NewTexture(str.concat(wd, "textures/roguelike_city.png"))
	tex_dungeon := gl.NewTexture(str.concat(wd, "textures/roguelike_dungeon.png"))
	tex_indoor := gl.NewTexture(str.concat(wd, "textures/roguelike_indoor.png"))
	tex_pack := gl.NewTexture(str.concat(wd, "textures/roguelike_pack.png"))
	
	w_characters := 918
	h_characters := 203
	w_city := 628
	h_city := 475
	w_dungeon := 492
	h_dungeon := 305
	w_indoor := 457
	h_indoor := 305
	w_pack := 968
	h_pack := 526

	var sp_blue_carpet Sprite
	var sp_knight1 Sprite
	
	var sp_brown_wall_ls Sprite
	var sp_brown_wall_t Sprite
	var sp_brown_wall_rs Sprite
	var sp_brown_wall_tl Sprite
	var sp_brown_wall_tr Sprite
	var sp_brown_wall_bl Sprite
	var sp_brown_wall_br Sprite
	var sp_brown_wall_lr Sprite
	var sp_brown_wall_cross Sprite
	var sp_brown_wall_ts Sprite
	var sp_brown_wall_bs Sprite
	
	setSprite(sp_blue_carpet, 187, 203, 136, 152, w_pack, h_pack)
	//setSprite(sp_blue_carpet, 187, 203, 136, 152, w_pack, h_pack)
	setSprite(sp_knight1, 0, 16, 187, 203, w_characters, h_characters)
	
	setSprite(sp_brown_wall_ls, 221, 237, 204, 220, w_pack, h_pack)
	setSprite(sp_brown_wall_t, 238, 254, 204, 220, w_pack, h_pack)
	setSprite(sp_brown_wall_rs, 255, 271, 204, 220, w_pack, h_pack)
	setSprite(sp_brown_wall_tl, 272, 288, 204, 220, w_pack, h_pack)
	setSprite(sp_brown_wall_tr, 289, 305, 204, 220, w_pack, h_pack)
	setSprite(sp_brown_wall_bl, 272, 288, 221, 237, w_pack, h_pack)
	setSprite(sp_brown_wall_br, 289, 305, 221, 237, w_pack, h_pack)
	setSprite(sp_brown_wall_lr, 255, 271, 221, 237, w_pack, h_pack)
	setSprite(sp_brown_wall_cross, 238, 254, 221, 237, w_pack, h_pack)
	setSprite(sp_brown_wall_ts, 221, 237, 221, 237, w_pack, h_pack)
	setSprite(sp_brown_wall_bs, 221, 237, 238, 254, w_pack, h_pack)

	lSize := i32.mul(size, size)

	map := []i32{
		2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 1,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5
	}

	setupScene()

	//i32.print(map2Dto1D(1, 1, 10))
	// foox, fooy := map1Dto2D(11, 10)
	// i32.print(foox)
	// i32.print(fooy)

	for stop {
		gl.Clear(i32.bitor(gl.COLOR_BUFFER_BIT, gl.DEPTH_BUFFER_BIT))

		for c := 0; i32.lt(c, lSize); c = i32.add(c, 1) {
			x, y := map1Dto2D(c, size)
			idx := []i32.read(map, c)
			if i32.eq(idx, 0) {
				drawTile(x, y, tex_pack, sp_blue_carpet)
			}
			if i32.eq(idx, 1) {
				drawTile(x, y, tex_pack, sp_brown_wall_lr)
			}
			if i32.eq(idx, 2) {
				drawTile(x, y, tex_pack, sp_brown_wall_tl)
			}
			if i32.eq(idx, 3) {
				drawTile(x, y, tex_pack, sp_brown_wall_tr)
			}
			if i32.eq(idx, 4) {
				drawTile(x, y, tex_pack, sp_brown_wall_bl)
			}
			if i32.eq(idx, 5) {
				drawTile(x, y, tex_pack, sp_brown_wall_br)
			}
			if i32.eq(idx, 6) {
				drawTile(x, y, tex_pack, sp_brown_wall_t)
			}
			if i32.eq(idx, 7) {
				drawTile(x, y, tex_pack, sp_brown_wall_cross)
			}
		}

		//drawTile(3, 0, tex_pack, sp_brown_wall_lr)
		drawChar(p1x, p1y, tex_characters, sp_knight1)

		//drawSpace(4, 4, spriteSheet)
		
		glfw.SwapBuffers("window")
		glfw.PollEvents()






		
		// gl.Clear(i32.bitor(gl.COLOR_BUFFER_BIT, gl.DEPTH_BUFFER_BIT))
		// gl.UseProgram(program)

		// gl.MatrixMode(gl.MODELVIEW)
		// //gl.MatrixMode(gl.PROJECTION)
		// gl.LoadIdentity()
		// gl.PushMatrix()

		
		
		// gl.Rotatef(angle, 1.0, 0.0, 0.0)
		// gl.Rotatef(angle, 0.0, 1.0, 0.0)
		// gl.Rotatef(angle, 0.0, 0.0, 1.0)

		// //gl.MatrixMode(gl.PROJECTION)

		// gl.BindTexture(gl.TEXTURE_2D, texture)
		// draw(makeVao(testing), lenTesting)

		// if f32.gt(angle, 360.0) {
		// 	angle = 0.0
		// } else {
		// 	angle = f32.add(angle, 0.1)
		// }

		// //gl.Rotatef(45.0, 0.0, 0.0, 1.0)
		
		// //draw(makeVao(newObject(testing, 3, 6, 0)), 9)
		// //draw(makeVao(newObject(square, 6, 3)), 18)
		
		// //draw(makeVao(newObject(testing, xBox, yBox, 0)), lenTesting)
		// //draw(makeVao(newObject(testing, 15, 15, 0)), lenTesting)
		// //draw(makeVao(newObject(testing, xChar, yChar, 0)), lenTesting)
		
		// // box := newBox(xBox, yBox)
		// // char1 := newChar(xChar, yChar)
		// // char2 := newChar(10, yChar)
		// // char3 := newChar(xChar, 15)
		// // all := []f32.concat(box, char1)
		// // all := []f32.concat(all, char2)
		// // all := []f32.concat(all, char3)

		// // lenAll := []f32.len(all)

		// //gl.Translatef(-5.0, -5.0, -3131.0)

		// //draw(makeVao(all), lenAll)
		// gl.PopMatrix()

		// // xBox = i32.mod(i32.add(xBox, 1), columns)
		// // yBox = i32.mod(i32.add(yBox, 1), rows)

		// // xChar = i32.mod(i32.add(xChar, 1), columns)
		// // yChar = i32.mod(i32.add(yChar, 1), rows)
		
		// // xBox = i32.mod(i32.add(xBox, i32.rand(-1, 2)), columns)
		// // yBox = i32.mod(i32.add(yBox, i32.rand(-1, 2)), rows)

		// // xChar = i32.mod(i32.add(xChar, i32.rand(-1, 2)), columns)
		// // yChar = i32.mod(i32.add(yChar, i32.rand(-1, 2)), rows)

		// // // i32.print(xBox)
		// // // i32.print(yBox)

		// // //sleep(500)

		// glfw.PollEvents()
		
		// glfw.SwapBuffers("window")

		
		
		stop = not(glfw.ShouldClose("window"))
		//str.read()
	}
}
