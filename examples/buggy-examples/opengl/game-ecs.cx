package main

import "gl"
import "glfw"

// Components
type Displacement struct {
	x i32
	y i32
}
type Velocity struct {
	x i32
	y i32
}
type Appearance struct {
	x1 f32 
	x2 f32
	y1 f32
	y2 f32
	textureSheet i32
	class str
}

type World struct {
	mask []i32
	displacement []Displacement
	velocity []Velocity
	appearance []Appearance
}

type Sprites struct {
	Empty Appearance
	Floors []Appearance
	Walls []Appearance
	Chars []Appearance
	Water []Appearance
	Grass []Appearance
	Rocks []Appearance
	ToolTips []Appearance
}

// ECS
var entityCount i32

// Component masks
var COMPONENT_NONE i32
var COMPONENT_DISPLACEMENT i32
var COMPONENT_VELOCITY i32
var COMPONENT_APPEARANCE i32
var COMPONENT_COLLIDABLE i32
var COMPONENT_PLAYER i32

// Compound component masks
var MOVEMENT_MASK i32
var RENDER_MASK i32

var sprites Sprites

var background []i32 = []i32{
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30
}

var foreground []i32 = []i32{
	10, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  7,
	2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,
	2,  0,  0,  0,  0,  41,  0,  0,  0,  0,  0,  0,  0,  2,
	2,  0,  0,  0,  0,  0,  0,  0,  0,  27, 20, 21, 0,  2,
	2,  0,  0,  0,  0,  0,  0,  0,  0,  26, 28, 22, 0,  2,
	12, 1,  1,  1,  1,  7,  0, 40,  0,  25, 24, 23, 0,  2,
	2,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  2,
	2,  0,  3,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  2,
	2,  0,  2,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  2,
	2,  0,  2,  0,  0,  9,  1,  1,  1,  1,  1,  4,  0,  2,
	2,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,
	2,  0,  9,  7,  0,  0,  0,  0,  0,  42,  0,  0,  0,  2,
	2,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,
	9,  1,  1, 11,  1,  1,  1,  1,  1,  1,  1,  1,  1,  8
}

var width i32 = 600
var height i32 = 600

var rows i32 = 20
var columns i32 = 20

var size i32 = 10

var tex_characters i32
var tex_city i32
var tex_dungeon i32
var tex_indoor i32
var tex_pack i32

var w_characters i32 = 918
var h_characters i32 = 203
var w_city i32 = 628
var h_city i32 = 475
var w_dungeon i32 = 492
var h_dungeon i32 = 305
var w_indoor i32 = 457
var h_indoor i32 = 305
var w_pack i32 = 968
var h_pack i32 = 526

var world World

func initOpenGL () (program i32) {
	gl.Init()
	program := gl.CreateProgram()
	gl.LinkProgram(program)
}

func initGlfw (window str) () {
	glfw.Init()
	glfw.WindowHint(glfw.Resizable, glfw.False)
	glfw.WindowHint(glfw.ContextVersionMajor, 2)
	glfw.WindowHint(glfw.ContextVersionMinor, 1)
	glfw.CreateWindow("window", width, height, "Testing")
	glfw.MakeContextCurrent("window")
}

func scale (x i32, max i32) (out f32) {
	out = f32.div(i32.f32(x), i32.f32(max))
}

func draw (disp Displacement, app Appearance) () {
	gl.MatrixMode(gl.MODELVIEW)
	gl.LoadIdentity()

	x = i32.sub(i32.add(i32.mul(i32.mod(disp.x, size), 2), 1), size)
	y = i32.sub(i32.add(i32.mul(i32.mod(disp.y, size), 2), 1), size)

	gl.Translatef(f32.add(i32.f32(x), 0.0), f32.add(i32.f32(y), 0.0), f32.mul(i32.f32(size), -1.0))
	//gl.Translatef(i32.f32(x), i32.f32(y), f32.mul(i32.f32(size), -1.0))

	gl.BindTexture(gl.TEXTURE_2D, app.textureSheet)

	gl.Color4f(1.0, 1.0, 1.0, 1.0)

	gl.Begin(gl.QUADS)

	gl.Normal3f(0.0, 0.0, 0.0)
	gl.TexCoord2f(app.x1, app.y2)
	gl.Vertex3f(-1.0, -1.0, 0.0)
	gl.TexCoord2f(app.x1, app.y1)
	gl.Vertex3f(-1.0, 1.0, 0.0)
	gl.TexCoord2f(app.x2, app.y1)
	gl.Vertex3f(1.0, 1.0, 0.0)
	gl.TexCoord2f(app.x2, app.y2)
	gl.Vertex3f(1.0, -1.0, 0.0)

	gl.End()
}

func setAppearance (class str, x1 i32, x2 i32, y1 i32, y2 i32, W i32, H i32, textureSheet i32) (app Appearance) {
	var app Appearance
	app.class = class
	app.x1 = scale(x1, W)
	app.x2 = scale(x2, W)
	app.y1 = scale(y1, H)
	app.y2 = scale(y2, H)
	app.textureSheet = textureSheet
}

func setupScene () () {
	gl.Disable(gl.DITHER)
	gl.Disable(gl.POINT_SMOOTH)
	gl.Disable(gl.LINE_SMOOTH)
	gl.Disable(gl.POLYGON_SMOOTH)
	gl.Hint(gl.POINT_SMOOTH, gl.DONT_CARE)
	gl.Hint(gl.LINE_SMOOTH, gl.DONT_CARE)
	gl.Hint(gl.POLYGON_SMOOTH_HINT, gl.DONT_CARE)
	gl.Disable(gl.MULTISAMPLE_ARB)
	
	gl.TexEnvi(gl.TEXTURE_ENV, gl.TEXTURE_ENV_MODE, gl.MODULATE)
	gl.Disable(gl.DEPTH_TEST)

	gl.ClearColor(1.0, 1.0, 1.0, 1.0)
	gl.ClearDepth(f32.f64(1.0))
	gl.DepthFunc(gl.LEQUAL)
	
	gl.Enable(gl.BLEND)
	gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)
	gl.DepthMask(true)

	gl.MatrixMode(gl.PROJECTION)
	gl.LoadIdentity()
	
	gl.Frustum(
		f32.f64(-1.0), f32.f64(1.0), f32.f64(-1.0),
		f32.f64(1.0), f32.f64(1.0), i32.f64(i32.add(size, 1)))

	gl.MatrixMode(gl.MODELVIEW)
	gl.LoadIdentity()

	wd := os.GetWorkingDirectory()

        tex_characters = gl.NewTexture(str.concat(wd, "textures/roguelike_characters.png"))
	tex_city = gl.NewTexture(str.concat(wd, "textures/roguelike_city.png"))
	tex_dungeon = gl.NewTexture(str.concat(wd, "textures/roguelike_dungeon.png"))
	tex_indoor = gl.NewTexture(str.concat(wd, "textures/roguelike_indoor.png"))
	tex_pack = gl.NewTexture(str.concat(wd, "textures/roguelike_pack.png"))
	// tooltips symbols
	tex_act_up = gl.NewTexture(str.concat(wd, "textures/up.png"))
	tex_act_down = gl.NewTexture(str.concat(wd, "textures/down.png"))
	tex_act_right = gl.NewTexture(str.concat(wd, "textures/right.png"))
	tex_act_left = gl.NewTexture(str.concat(wd, "textures/left.png"))
	tex_act_water = gl.NewTexture(str.concat(wd, "textures/water.png"))
	
	
	var floors []Appearance
	floors = []Appearance.append(floors, setAppearance("floor", 187, 203, 136, 152, w_pack, h_pack, tex_pack))
	floors = []Appearance.append(floors, setAppearance("floor", 102, 118, 34, 50, w_pack, h_pack, tex_pack))
	
	var chars []Appearance
	chars = []Appearance.append(chars, setAppearance("char", 0, 16, 187, 203, w_characters, h_characters, tex_characters))

	var walls []Appearance
	walls = []Appearance.append(walls, setAppearance("wall_t", 238, 254, 204, 220, w_pack, h_pack, tex_pack)) //t
	walls = []Appearance.append(walls, setAppearance("wall_s", 255, 271, 221, 237, w_pack, h_pack, tex_pack)) //s
	walls = []Appearance.append(walls, setAppearance("wall_ts", 221, 237, 221, 237, w_pack, h_pack, tex_pack)) //ts
	walls = []Appearance.append(walls, setAppearance("wall_rs", 255, 271, 204, 220, w_pack, h_pack, tex_pack)) //rs
	walls = []Appearance.append(walls, setAppearance("wall_bs", 221, 237, 238, 254, w_pack, h_pack, tex_pack)) //bs
	walls = []Appearance.append(walls, setAppearance("wall_ls", 221, 237, 204, 220, w_pack, h_pack, tex_pack)) //ls
	walls = []Appearance.append(walls, setAppearance("wall_tr", 289, 305, 204, 220, w_pack, h_pack, tex_pack)) //tr
	walls = []Appearance.append(walls, setAppearance("wall_br", 289, 305, 221, 237, w_pack, h_pack, tex_pack)) //br
	walls = []Appearance.append(walls, setAppearance("wall_bl", 272, 288, 221, 237, w_pack, h_pack, tex_pack)) //bl
	walls = []Appearance.append(walls, setAppearance("wall_tl", 272, 288, 204, 220, w_pack, h_pack, tex_pack)) //tl
	walls = []Appearance.append(walls, setAppearance("wall_to", 323, 339, 204, 220, w_pack, h_pack, tex_pack)) //to
	walls = []Appearance.append(walls, setAppearance("wall_ro", 306, 322, 204, 220, w_pack, h_pack, tex_pack)) //ro
	walls = []Appearance.append(walls, setAppearance("wall_bo", 323, 339, 221, 237, w_pack, h_pack, tex_pack)) //bo
	walls = []Appearance.append(walls, setAppearance("wall_lo", 306, 322, 221, 237, w_pack, h_pack, tex_pack)) //lo
	walls = []Appearance.append(walls, setAppearance("wall_xx", 238, 254, 221, 237, w_pack, h_pack, tex_pack)) //xx
	
	var water []Appearance
	water = []Appearance.append(water, setAppearance("water_t", 51, 67, 0, 16, w_pack, h_pack, tex_pack)) //t
	water = []Appearance.append(water, setAppearance("water_tr", 68, 84, 0, 16, w_pack, h_pack, tex_pack)) //tr
	water = []Appearance.append(water, setAppearance("water_r", 68, 84, 17, 33, w_pack, h_pack, tex_pack)) //r
	water = []Appearance.append(water, setAppearance("water_br", 68, 84, 34, 50, w_pack, h_pack, tex_pack)) //br
	water = []Appearance.append(water, setAppearance("water_b", 51, 67, 34, 50, w_pack, h_pack, tex_pack)) //b
	water = []Appearance.append(water, setAppearance("water_bl", 34, 50, 34, 50, w_pack, h_pack, tex_pack)) //bl
	water = []Appearance.append(water, setAppearance("water_l", 34, 50, 17, 33, w_pack, h_pack, tex_pack)) //l
	water = []Appearance.append(water, setAppearance("water_tl", 34, 50, 0, 16, w_pack, h_pack, tex_pack)) //tl
	water = []Appearance.append(water, setAppearance("water_xx", 51, 67, 17, 33, w_pack, h_pack, tex_pack)) //xx
	
	var grass []Appearance
	grass = []Appearance.append(grass, setAppearance("grass", 85, 101, 0, 16, w_pack, h_pack, tex_pack))
	grass = []Appearance.append(grass, setAppearance("grass", 85, 101, 17, 33, w_pack, h_pack, tex_pack))

	var rocks []Appearance
	rocks = []Appearance.append(rocks, setAppearance("rock", 918, 934, 322, 338, w_pack, h_pack, tex_pack))
	rocks = []Appearance.append(rocks, setAppearance("rock", 936, 951, 326, 342, w_pack, h_pack, tex_pack))
	rocks = []Appearance.append(rocks, setAppearance("rock", 952, 968, 325, 341, w_pack, h_pack, tex_pack))
	
	var toolTips []Appearance
	toolTips = []Appearance.append(toolTips, setAppearance("tt_up_arrow", 0, 32, 0, 32, 32, 32, tex_act_up))
	toolTips = []Appearance.append(toolTips, setAppearance("tt_down_arrow", 0, 32, 0, 32, 32, 32, tex_act_down))
	toolTips = []Appearance.append(toolTips, setAppearance("tt_left_arrow", 0, 32, 0, 32, 32, 32, tex_act_left))
	toolTips = []Appearance.append(toolTips, setAppearance("tt_right_arrow", 0, 32, 0, 32, 32, 32, tex_act_right))
	toolTips = []Appearance.append(toolTips, setAppearance("tt_water", 0, 32, 0, 32, 32, 32, tex_act_water))

	var sprites Sprites
 	sprites.Empty = setAppearance("empty", 918, 934, 306, 322, w_pack, h_pack, tex_pack)
	sprites.Floors = floors
	sprites.Walls = walls
	sprites.Chars = chars
	sprites.Water = water
	sprites.Grass = grass

	sprites.Rocks = rocks
	sprites.ToolTips = toolTips
}

func map2Dto1D (c i32, r i32, w i32) (i i32) {
	r = i32.sub(i32.sub(w, 1), r)
	i = i32.add(i32.mul(w, r), c)
}

func map1Dto2D (i i32, w i32) (c i32, r i32) {
	r = i32.sub(i32.sub(w, 1), i32.div(i, w))
	c = i32.mod(i, w)
}

func charActions (window str, key i32, scancode i32, action i32, mods i32) () {
	if and(i32.eq(key, 265), i32.or(i32.eq(action, 2), i32.eq(action, 1))) {
		for entity = 0; i32.lt(entity, entityCount); entity = i32.add(entity, 1) {
			mask := []i32.read(world.mask, entity)
			if i32.eq(COMPONENT_PLAYER, i32.bitand(mask, COMPONENT_PLAYER)) {
				world.mask = []i32.write(world.mask, entity, i32.bitor(mask, COMPONENT_VELOCITY))
				world.velocity = []Velocity.write(world.velocity, entity, new Velocity{y: 1})
			}
		}
	}
	if and(i32.eq(key, 264), i32.or(i32.eq(action, 2), i32.eq(action, 1))) {
		for entity = 0; i32.lt(entity, entityCount); entity = i32.add(entity, 1) {
			mask := []i32.read(world.mask, entity)
			if i32.eq(COMPONENT_PLAYER, i32.bitand(mask, COMPONENT_PLAYER)) {
				world.mask = []i32.write(world.mask, entity, i32.bitor(mask, COMPONENT_VELOCITY))
				world.velocity = []Velocity.write(world.velocity, entity, new Velocity{y: -1})
			}
		}
	}
	if and(i32.eq(key, 263), i32.or(i32.eq(action, 2), i32.eq(action, 1))) {
		for entity = 0; i32.lt(entity, entityCount); entity = i32.add(entity, 1) {
			mask := []i32.read(world.mask, entity)
			if i32.eq(COMPONENT_PLAYER, i32.bitand(mask, COMPONENT_PLAYER)) {
				world.mask = []i32.write(world.mask, entity, i32.bitor(mask, COMPONENT_VELOCITY))
				world.velocity = []Velocity.write(world.velocity, entity, new Velocity{x: -1})
			}
		}
	}
	if and(i32.eq(key, 262), i32.or(i32.eq(action, 2), i32.eq(action, 1))) {
		for entity = 0; i32.lt(entity, entityCount); entity = i32.add(entity, 1) {
			mask := []i32.read(world.mask, entity)
			if i32.eq(COMPONENT_PLAYER, i32.bitand(mask, COMPONENT_PLAYER)) {
				world.mask = []i32.write(world.mask, entity, i32.bitor(mask, COMPONENT_VELOCITY))
				world.velocity = []Velocity.write(world.velocity, entity, new Velocity{x: 1})
			}
		}
	}
}

func createEntity () (entity i32) {
	for entity = 0; i32.lt(entity, entityCount); entity = i32.add(entity, 1) {
		mask := []i32.read(world.mask, entity)
		if i32.eq(mask, COMPONENT_NONE) {
			return
		}
	}
	halt("No more entities left")
}

func destroyEntity (entity i32) () {
	world = []i32.write(world.mask, entity, COMPONENT_NONE)
}

// Entities

func createPlayer (app Appearance, disp Displacement) (entity i32) {
	entity := createEntity()

	world.mask = []i32.write(world.mask, entity,
		i32.bitor(i32.bitor(COMPONENT_DISPLACEMENT, COMPONENT_APPEARANCE),
			COMPONENT_PLAYER))
	world.displacement = []Displacement.write(world.displacement, entity, disp)
	world.velocity = []Velocity.write(world.velocity, entity,
		new Velocity{
			x: 1
		})

	d := []Displacement.read(world.displacement, entity)
	
	world.appearance = []Appearance.write(world.appearance, entity, app)
}

func createGrass (app Appearance, disp Displacement) (entity i32) {
	entity := createEntity()

	world.mask = []i32.write(world.mask, entity, i32.bitor(COMPONENT_DISPLACEMENT, COMPONENT_APPEARANCE))
	world.displacement = []Displacement.write(world.displacement, entity, disp)
	world.appearance = []Appearance.write(world.appearance, entity, app)
}

func createRock (app Appearance, disp Displacement) (entity i32) {
	entity := createEntity()

	world.mask = []i32.write(world.mask, entity, i32.bitor(i32.bitor(COMPONENT_DISPLACEMENT, COMPONENT_APPEARANCE), COMPONENT_COLLIDABLE))
	world.displacement = []Displacement.write(world.displacement, entity, disp)
	world.appearance = []Appearance.write(world.appearance, entity, app)
}

// Systems

func movementFunction () () {
	for entity := 0; i32.lt(entity, entityCount); entity = i32.add(entity, 1) {
		mask := []i32.read(world.mask, entity)
		if i32.eq(i32.bitand(mask, MOVEMENT_MASK), MOVEMENT_MASK) {
			displacement := []Displacement.read(world.displacement, entity)
			
			velocity := []Velocity.read(world.velocity, entity)

			displacement.x = i32.add(displacement.x, velocity.x)
			displacement.y = i32.add(displacement.y, velocity.y)

			// we completely stop the character
			velocity.x = 0
			velocity.y = 0

			world.velocity = []Velocity.write(world.velocity, entity, velocity)
			world.displacement = []Displacement.write(world.displacement, entity, displacement)
			world.mask = []i32.write(world.mask, entity, i32.bitclear(mask, COMPONENT_VELOCITY))
		}
	}
}

func collisionFunction () () {
	for obstacle := 0; i32.lt(obstacle, entityCount); obstacle = i32.add(obstacle, 1) {
		obstacleMask := []i32.read(world.mask, obstacle)
		if i32.eq(i32.bitand(obstacleMask, COMPONENT_COLLIDABLE), COMPONENT_COLLIDABLE) {
			for player := 0; i32.lt(player, entityCount); player = i32.add(player, 1) {
				playerMask := []i32.read(world.mask, player)
				if i32.eq(i32.bitand(playerMask, COMPONENT_PLAYER), COMPONENT_PLAYER) {
					playerDisp = []Displacement.read(world.displacement, player)
					obstacleDisp = []Displacement.read(world.displacement, obstacle)
					
					playerVel = []Velocity.read(world.velocity, player)

					xToBe = i32.add(playerDisp.x, playerVel.x)
					yToBe = i32.add(playerDisp.y, playerVel.y)

					if and(i32.eq(obstacleDisp.x, xToBe), i32.eq(obstacleDisp.y, yToBe)) {
						world.mask = []i32.write(world.mask, player, i32.bitclear(playerMask, COMPONENT_VELOCITY))
					}
				}
			}
		}
	}
}

// func gatheringFunction () () {
// 	// for minable := 0; i32.lt(minable, entityCount); minable = i32.add(minable, 1) {
// 	// 	minableMask := []i32.read(world.mask, minable)
// 	// 	if i32.eq(i32.bitand(minableMask, COMPONENT_COLLIDABLE), COMPONENT_COLLIDABLE) {
// 	// 		for player := 0; i32.lt(player, entityCount); player = i32.add(player, 1) {
// 	// 			playerMask := []i32.read(world.mask, player)
// 	// 			if i32.eq(i32.bitand(playerMask, COMPONENT_PLAYER), COMPONENT_PLAYER) {
// 	// 				playerDisp = []Displacement.read(world.displacement, player)
// 	// 				minableDisp = []Displacement.read(world.displacement, minable)
					
// 	// 				playerVel = []Velocity.read(world.velocity, player)

// 	// 				xToBe = i32.add(playerDisp.x, playerVel.x)
// 	// 				yToBe = i32.add(playerDisp.y, playerVel.y)

// 	// 				if and(i32.eq(minableDisp.x, xToBe), i32.eq(minableDisp.y, yToBe)) {
// 	// 					world.mask = []i32.write(world.mask, player, i32.bitclear(playerMask, COMPONENT_VELOCITY))
// 	// 				}
// 	// 			}
// 	// 		}
// 	// 	}
// 	// }
// }

func renderFunction () () {
	for entity := 0; i32.lt(entity, entityCount); entity = i32.add(entity, 1) {
		if i32.eq(i32.bitand([]i32.read(world.mask, entity), RENDER_MASK), RENDER_MASK) {
			draw(
				[]Displacement.read(world.displacement, entity),
				[]Appearance.read(world.appearance, entity))
		}
	}
}

func initWorld () () {
	entityCount = 150

	// components
	COMPONENT_NONE := 0
	COMPONENT_DISPLACEMENT := i32.bitshl(1, 0)
	COMPONENT_VELOCITY := i32.bitshl(1, 1)
	COMPONENT_APPEARANCE := i32.bitshl(1, 2)
	COMPONENT_COLLIDABLE := i32.bitshl(1, 3)
	COMPONENT_PLAYER := i32.bitshl(1, 4)

	// compound masks
	MOVEMENT_MASK = i32.bitor(COMPONENT_DISPLACEMENT, COMPONENT_VELOCITY)
	RENDER_MASK = i32.bitor(COMPONENT_DISPLACEMENT, COMPONENT_APPEARANCE)

	//var world World
	world.mask = []i32.make(entityCount)
	world.displacement = []Displacement.make(entityCount)
	world.velocity = []Velocity.make(entityCount)
	world.appearance = []Appearance.make(entityCount)
	world.appearance = []Appearance.make(entityCount)
}

func main () () {
	initGlfw("window")
	program := initOpenGL()

	glfw.SetKeyCallback("window", "charActions")

	stop := not(glfw.ShouldClose("window"))

	setupScene()

	initWorld()

	grass := []Appearance.read(sprites.Grass, 0)
	for c := 0; i32.lt(c, i32.mul(size, size)); c = i32.add(c, 1) {
		x, y = map1Dto2D(c, size)
		createGrass(grass, new Displacement{x: x, y: y})
	}


	// target := ->{pkg(main) fn(main) exp(test)}
	// objs := ->{}
	// rules := ->{
	// 	if true {
	// 		allow(x == x)
	// 	}
	// }
	
	// affs := aff.query(target, objs, rules)
	//aff.print(affs)


// 	default := new Appearance{class: "empty"}
// test:
// 	//apptest(new Appearance{class: "empty"})
// 	apptest(default)




	createPlayer([]Appearance.read(sprites.Chars, 0), new Displacement{x: 1, y: 1})
	createRock([]Appearance.read(sprites.Rocks, 0), new Displacement{x: 3, y: 1})

	for stop {
		gl.Clear(i32.bitor(gl.COLOR_BUFFER_BIT, gl.DEPTH_BUFFER_BIT))

		collisionFunction()
		movementFunction()
		renderFunction()
		collisionFunction()

		glfw.PollEvents()
		glfw.SwapBuffers("window")
		
		stop = not(glfw.ShouldClose("window"))
	}
}
