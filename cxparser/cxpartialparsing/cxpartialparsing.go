// Code generated by goyacc - DO NOT EDIT.

package partialparsing

import __yyfmt__ "fmt"

import (
	"bytes"
	"github.com/skycoin/cx/cx/ast"
	"github.com/skycoin/cx/cx/constants"
	"github.com/skycoin/cx/cx/types"
	"github.com/skycoin/cx/cxparser/actions"
)

/*
   This is a computer generated file
   - partialparsing.go is generated from partialparsing.y via
   - ./bin/goyacc -o cxparser/cxpartialparsing/partialparsing.go cxparser/cxpartialparsing/partialparsing.y
*/

var Program *ast.CXProgram

var lineNo int = -1
var replMode bool = false
var inREPL bool = false
var inFn bool = false
var fileName string

// Parse() is the function that is called from main().
// It is needed because yyParse is not exported.
func Parse(code string) int {
	codeBuf := bytes.NewBufferString(code)
	return yyParse(NewLexer(codeBuf))
}

func PreFunctionDeclaration(fn *ast.CXFunction, inputs []*ast.CXArgument, outputs []*ast.CXArgument) {
	// adding inputs, outputs
	for _, inp := range inputs {
		fn.AddInput(inp)
	}
	for _, out := range outputs {
		fn.AddOutput(out)
	}
}

type yySymType struct {
	yys     int
	i       int
	i8      int8
	i16     int16
	i32     int32
	i64     int64
	ui8     uint8
	ui16    uint16
	ui32    uint32
	ui64    uint64
	f32     float32
	f64     float64
	tok     string
	bool    bool
	string  string
	stringA []string
	ints    []int

	line int

	argument  *ast.CXArgument
	arguments []*ast.CXArgument

	expression  *ast.CXExpression
	expressions []*ast.CXExpression

	function *ast.CXFunction
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault              = 57487
	yyEofCode              = 57344
	ADDR                   = 57486
	ADD_ASSIGN             = 57439
	ADD_OP                 = 57399
	AFF                    = 57481
	AFFVAR                 = 57406
	AND                    = 57397
	AND_ASSIGN             = 57440
	AND_OP                 = 57437
	ASSIGN                 = 57379
	BASICTYPE              = 57470
	BITANDEQ               = 57425
	BITCLEAR_OP            = 57416
	BITOREQ                = 57427
	BITOR_OP               = 57415
	BITXOREQ               = 57426
	BITXOR_OP              = 57414
	BOOL                   = 57449
	BOOLEAN_LITERAL        = 57346
	BREAK                  = 57467
	BYTE_LITERAL           = 57347
	CAFF                   = 57482
	CASE                   = 57464
	CASSIGN                = 57380
	CLAUSES                = 57475
	COLON                  = 57389
	COMMA                  = 57367
	COMMENT                = 57369
	CONST                  = 57463
	CONTINUE               = 57468
	DEC_OP                 = 57428
	DEF                    = 57472
	DEFAULT                = 57465
	DIVEQ                  = 57420
	DIV_ASSIGN             = 57444
	DIV_OP                 = 57402
	DOUBLE_LITERAL         = 57356
	DPROGRAM               = 57479
	DSTACK                 = 57478
	DSTATE                 = 57480
	ELSE                   = 57373
	ENUM                   = 57462
	EQUAL                  = 57388
	EQUALWORD              = 57391
	EQ_OP                  = 57435
	EXP                    = 57412
	EXPEQ                  = 57422
	EXPR                   = 57473
	F32                    = 57450
	F64                    = 57451
	FIELD                  = 57474
	FLOAT_LITERAL          = 57355
	FOR                    = 57374
	FUNC                   = 57357
	GE_OP                  = 57433
	GOTO                   = 57383
	GTEQ_OP                = 57386
	GTHANEQ                = 57394
	GTHANWORD              = 57392
	GT_OP                  = 57384
	I16                    = 57453
	I32                    = 57454
	I64                    = 57455
	I8                     = 57452
	IDENTIFIER             = 57365
	IF                     = 57372
	IMPORT                 = 57381
	INC_OP                 = 57429
	INFER                  = 57484
	INT_LITERAL            = 57349
	LBRACE                 = 57361
	LBRACK                 = 57363
	LEFTSHIFT              = 57410
	LEFTSHIFTEQ            = 57423
	LEFT_ASSIGN            = 57441
	LEFT_OP                = 57431
	LE_OP                  = 57434
	LONG_LITERAL           = 57350
	LPAREN                 = 57359
	LTEQ_OP                = 57387
	LTHANEQ                = 57395
	LTHANWORD              = 57393
	LT_OP                  = 57385
	MINUSEQ                = 57418
	MINUSMINUS             = 57408
	MOD_ASSIGN             = 57442
	MOD_OP                 = 57403
	MULTEQ                 = 57419
	MUL_ASSIGN             = 57443
	MUL_OP                 = 57401
	NEG_OP                 = 57405
	NEW                    = 57390
	NEWLINE                = 57378
	NE_OP                  = 57436
	NOT                    = 57413
	OBJECT                 = 57476
	OBJECTS                = 57477
	OP                     = 57358
	OR                     = 57398
	OR_ASSIGN              = 57445
	OR_OP                  = 57438
	PACKAGE                = 57371
	PERIOD                 = 57368
	PLUSEQ                 = 57417
	PLUSPLUS               = 57407
	PTR_OP                 = 57430
	RBRACE                 = 57362
	RBRACK                 = 57364
	REF_OP                 = 57404
	REM                    = 57471
	REMAINDER              = 57409
	REMAINDEREQ            = 57421
	RETURN                 = 57382
	RIGHTSHIFT             = 57411
	RIGHTSHIFTEQ           = 57424
	RIGHT_ASSIGN           = 57446
	RIGHT_OP               = 57432
	RPAREN                 = 57360
	SEMICOLON              = 57377
	SHORT_LITERAL          = 57348
	STR                    = 57456
	STRING_LITERAL         = 57370
	STRUCT                 = 57376
	SUB_ASSIGN             = 57447
	SUB_OP                 = 57400
	SWITCH                 = 57466
	TAG                    = 57483
	TYPE                   = 57469
	TYPSTRUCT              = 57375
	UI16                   = 57458
	UI32                   = 57459
	UI64                   = 57460
	UI8                    = 57457
	UNEQUAL                = 57396
	UNION                  = 57461
	UNSIGNED_BYTE_LITERAL  = 57351
	UNSIGNED_INT_LITERAL   = 57353
	UNSIGNED_LONG_LITERAL  = 57354
	UNSIGNED_SHORT_LITERAL = 57352
	VALUE                  = 57485
	VAR                    = 57366
	XOR_ASSIGN             = 57448
	yyErrCode              = 57345

	yyMaxDepth = 200
	yyTabOfs   = -225
)

var (
	yyPrec = map[int]int{
		IDENTIFIER: 0,
		LBRACE:     0,
	}

	yyXLAT = map[int]int{
		57377: 0,   // SEMICOLON (201x)
		57404: 1,   // REF_OP (198x)
		57359: 2,   // LPAREN (196x)
		57401: 3,   // MUL_OP (191x)
		57399: 4,   // ADD_OP (187x)
		57400: 5,   // SUB_OP (187x)
		57363: 6,   // LBRACK (185x)
		57428: 7,   // DEC_OP (172x)
		57429: 8,   // INC_OP (172x)
		57362: 9,   // RBRACE (171x)
		57361: 10,  // LBRACE (167x)
		57365: 11,  // IDENTIFIER (164x)
		57367: 12,  // COMMA (154x)
		57360: 13,  // RPAREN (141x)
		57481: 14,  // AFF (134x)
		57449: 15,  // BOOL (134x)
		57450: 16,  // F32 (134x)
		57451: 17,  // F64 (134x)
		57453: 18,  // I16 (134x)
		57454: 19,  // I32 (134x)
		57455: 20,  // I64 (134x)
		57452: 21,  // I8 (134x)
		57456: 22,  // STR (134x)
		57458: 23,  // UI16 (134x)
		57459: 24,  // UI32 (134x)
		57460: 25,  // UI64 (134x)
		57457: 26,  // UI8 (134x)
		57349: 27,  // INT_LITERAL (121x)
		57370: 28,  // STRING_LITERAL (118x)
		57346: 29,  // BOOLEAN_LITERAL (117x)
		57347: 30,  // BYTE_LITERAL (117x)
		57356: 31,  // DOUBLE_LITERAL (117x)
		57355: 32,  // FLOAT_LITERAL (117x)
		57484: 33,  // INFER (117x)
		57350: 34,  // LONG_LITERAL (117x)
		57405: 35,  // NEG_OP (117x)
		57348: 36,  // SHORT_LITERAL (117x)
		57351: 37,  // UNSIGNED_BYTE_LITERAL (117x)
		57353: 38,  // UNSIGNED_INT_LITERAL (117x)
		57354: 39,  // UNSIGNED_LONG_LITERAL (117x)
		57352: 40,  // UNSIGNED_SHORT_LITERAL (117x)
		57389: 41,  // COLON (103x)
		57364: 42,  // RBRACK (102x)
		63:    43,  // '?' (88x)
		57438: 44,  // OR_OP (88x)
		57437: 45,  // AND_OP (87x)
		57415: 46,  // BITOR_OP (85x)
		57414: 47,  // BITXOR_OP (83x)
		57435: 48,  // EQ_OP (79x)
		57384: 49,  // GT_OP (79x)
		57386: 50,  // GTEQ_OP (79x)
		57385: 51,  // LT_OP (79x)
		57387: 52,  // LTEQ_OP (79x)
		57436: 53,  // NE_OP (79x)
		57416: 54,  // BITCLEAR_OP (77x)
		57431: 55,  // LEFT_OP (77x)
		57432: 56,  // RIGHT_OP (77x)
		57551: 57,  // type_specifier (75x)
		57379: 58,  // ASSIGN (72x)
		57521: 59,  // indexing_literal (68x)
		57402: 60,  // DIV_OP (66x)
		57403: 61,  // MOD_OP (66x)
		57366: 62,  // VAR (65x)
		57544: 63,  // slice_literal_expression (64x)
		57492: 64,  // array_literal_expression (63x)
		57539: 65,  // postfix_expression (63x)
		57540: 66,  // primary_expression (63x)
		57553: 67,  // unary_expression (63x)
		57554: 68,  // unary_operator (63x)
		57439: 69,  // ADD_ASSIGN (59x)
		57440: 70,  // AND_ASSIGN (59x)
		57380: 71,  // CASSIGN (59x)
		57444: 72,  // DIV_ASSIGN (59x)
		57441: 73,  // LEFT_ASSIGN (59x)
		57442: 74,  // MOD_ASSIGN (59x)
		57443: 75,  // MUL_ASSIGN (59x)
		57445: 76,  // OR_ASSIGN (59x)
		57368: 77,  // PERIOD (59x)
		57446: 78,  // RIGHT_ASSIGN (59x)
		57447: 79,  // SUB_ASSIGN (59x)
		57448: 80,  // XOR_ASSIGN (59x)
		57534: 81,  // multiplicative_expression (56x)
		57488: 82,  // additive_expression (54x)
		57543: 83,  // shift_expression (51x)
		57372: 84,  // IF (50x)
		57467: 85,  // BREAK (49x)
		57464: 86,  // CASE (49x)
		57468: 87,  // CONTINUE (49x)
		57465: 88,  // DEFAULT (49x)
		57374: 89,  // FOR (49x)
		57383: 90,  // GOTO (49x)
		57382: 91,  // RETURN (49x)
		57466: 92,  // SWITCH (49x)
		57541: 93,  // relational_expression (45x)
		57490: 94,  // and_expression (44x)
		57508: 95,  // exclusive_or_expression (43x)
		57520: 96,  // inclusive_or_expression (42x)
		57532: 97,  // logical_and_expression (41x)
		57499: 98,  // conditional_expression (40x)
		57533: 99,  // logical_or_expression (40x)
		57494: 100, // assignment_expression (33x)
		57548: 101, // struct_literal_expression (33x)
		57357: 102, // FUNC (28x)
		57509: 103, // expression (21x)
		57498: 104, // compound_statement (20x)
		57381: 105, // IMPORT (20x)
		57371: 106, // PACKAGE (20x)
		57469: 107, // TYPE (20x)
		57344: 108, // $end (19x)
		57510: 109, // expression_statement (15x)
		57529: 110, // iteration_statement (12x)
		57530: 111, // jump_statement (12x)
		57531: 112, // labeled_statement (12x)
		57542: 113, // selection_statement (12x)
		57545: 114, // statement (12x)
		57501: 115, // declaration (10x)
		57496: 116, // block_item (9x)
		57503: 117, // declarator (8x)
		57504: 118, // direct_declarator (8x)
		57373: 119, // ELSE (8x)
		57502: 120, // declaration_specifiers (5x)
		57536: 121, // parameter_declaration (5x)
		57497: 122, // block_item_list (4x)
		57505: 123, // else_statement (4x)
		57506: 124, // elseif (4x)
		57523: 125, // infer_action (4x)
		57491: 126, // argument_expression_list (3x)
		57493: 127, // array_literal_expression_list (3x)
		57500: 128, // constant_expression (3x)
		57549: 129, // struct_literal_fields (3x)
		57507: 130, // elseif_list (2x)
		57511: 131, // external_declaration (2x)
		57513: 132, // function_declaration (2x)
		57514: 133, // function_header (2x)
		57515: 134, // function_parameters (2x)
		57516: 135, // global_declaration (2x)
		57519: 136, // import_declaration (2x)
		57527: 137, // initializer (2x)
		57535: 138, // package_declaration (2x)
		57537: 139, // parameter_list (2x)
		57538: 140, // parameter_type_list (2x)
		57546: 141, // struct_declaration (2x)
		57552: 142, // types_list (2x)
		57489: 143, // after_period (1x)
		57495: 144, // assignment_operator (1x)
		57512: 145, // fields (1x)
		57517: 146, // id_list (1x)
		57524: 147, // infer_action_arg (1x)
		57525: 148, // infer_actions (1x)
		57526: 149, // infer_clauses (1x)
		57376: 150, // STRUCT (1x)
		57547: 151, // struct_fields (1x)
		57550: 152, // translation_unit (1x)
		57487: 153, // $default (0x)
		57486: 154, // ADDR (0x)
		57406: 155, // AFFVAR (0x)
		57397: 156, // AND (0x)
		57470: 157, // BASICTYPE (0x)
		57425: 158, // BITANDEQ (0x)
		57427: 159, // BITOREQ (0x)
		57426: 160, // BITXOREQ (0x)
		57482: 161, // CAFF (0x)
		57475: 162, // CLAUSES (0x)
		57369: 163, // COMMENT (0x)
		57463: 164, // CONST (0x)
		57472: 165, // DEF (0x)
		57420: 166, // DIVEQ (0x)
		57479: 167, // DPROGRAM (0x)
		57478: 168, // DSTACK (0x)
		57480: 169, // DSTATE (0x)
		57462: 170, // ENUM (0x)
		57388: 171, // EQUAL (0x)
		57391: 172, // EQUALWORD (0x)
		57345: 173, // error (0x)
		57412: 174, // EXP (0x)
		57422: 175, // EXPEQ (0x)
		57473: 176, // EXPR (0x)
		57474: 177, // FIELD (0x)
		57433: 178, // GE_OP (0x)
		57394: 179, // GTHANEQ (0x)
		57392: 180, // GTHANWORD (0x)
		57518: 181, // identifier_list (0x)
		57522: 182, // indexing_slice_literal (0x)
		57528: 183, // int_value (0x)
		57434: 184, // LE_OP (0x)
		57410: 185, // LEFTSHIFT (0x)
		57423: 186, // LEFTSHIFTEQ (0x)
		57395: 187, // LTHANEQ (0x)
		57393: 188, // LTHANWORD (0x)
		57418: 189, // MINUSEQ (0x)
		57408: 190, // MINUSMINUS (0x)
		57419: 191, // MULTEQ (0x)
		57390: 192, // NEW (0x)
		57378: 193, // NEWLINE (0x)
		57413: 194, // NOT (0x)
		57476: 195, // OBJECT (0x)
		57477: 196, // OBJECTS (0x)
		57358: 197, // OP (0x)
		57398: 198, // OR (0x)
		57417: 199, // PLUSEQ (0x)
		57407: 200, // PLUSPLUS (0x)
		57430: 201, // PTR_OP (0x)
		57471: 202, // REM (0x)
		57409: 203, // REMAINDER (0x)
		57421: 204, // REMAINDEREQ (0x)
		57411: 205, // RIGHTSHIFT (0x)
		57424: 206, // RIGHTSHIFTEQ (0x)
		57483: 207, // TAG (0x)
		57375: 208, // TYPSTRUCT (0x)
		57396: 209, // UNEQUAL (0x)
		57461: 210, // UNION (0x)
		57485: 211, // VALUE (0x)
	}

	yySymNames = []string{
		"SEMICOLON",
		"REF_OP",
		"LPAREN",
		"MUL_OP",
		"ADD_OP",
		"SUB_OP",
		"LBRACK",
		"DEC_OP",
		"INC_OP",
		"RBRACE",
		"LBRACE",
		"IDENTIFIER",
		"COMMA",
		"RPAREN",
		"AFF",
		"BOOL",
		"F32",
		"F64",
		"I16",
		"I32",
		"I64",
		"I8",
		"STR",
		"UI16",
		"UI32",
		"UI64",
		"UI8",
		"INT_LITERAL",
		"STRING_LITERAL",
		"BOOLEAN_LITERAL",
		"BYTE_LITERAL",
		"DOUBLE_LITERAL",
		"FLOAT_LITERAL",
		"INFER",
		"LONG_LITERAL",
		"NEG_OP",
		"SHORT_LITERAL",
		"UNSIGNED_BYTE_LITERAL",
		"UNSIGNED_INT_LITERAL",
		"UNSIGNED_LONG_LITERAL",
		"UNSIGNED_SHORT_LITERAL",
		"COLON",
		"RBRACK",
		"'?'",
		"OR_OP",
		"AND_OP",
		"BITOR_OP",
		"BITXOR_OP",
		"EQ_OP",
		"GT_OP",
		"GTEQ_OP",
		"LT_OP",
		"LTEQ_OP",
		"NE_OP",
		"BITCLEAR_OP",
		"LEFT_OP",
		"RIGHT_OP",
		"type_specifier",
		"ASSIGN",
		"indexing_literal",
		"DIV_OP",
		"MOD_OP",
		"VAR",
		"slice_literal_expression",
		"array_literal_expression",
		"postfix_expression",
		"primary_expression",
		"unary_expression",
		"unary_operator",
		"ADD_ASSIGN",
		"AND_ASSIGN",
		"CASSIGN",
		"DIV_ASSIGN",
		"LEFT_ASSIGN",
		"MOD_ASSIGN",
		"MUL_ASSIGN",
		"OR_ASSIGN",
		"PERIOD",
		"RIGHT_ASSIGN",
		"SUB_ASSIGN",
		"XOR_ASSIGN",
		"multiplicative_expression",
		"additive_expression",
		"shift_expression",
		"IF",
		"BREAK",
		"CASE",
		"CONTINUE",
		"DEFAULT",
		"FOR",
		"GOTO",
		"RETURN",
		"SWITCH",
		"relational_expression",
		"and_expression",
		"exclusive_or_expression",
		"inclusive_or_expression",
		"logical_and_expression",
		"conditional_expression",
		"logical_or_expression",
		"assignment_expression",
		"struct_literal_expression",
		"FUNC",
		"expression",
		"compound_statement",
		"IMPORT",
		"PACKAGE",
		"TYPE",
		"$end",
		"expression_statement",
		"iteration_statement",
		"jump_statement",
		"labeled_statement",
		"selection_statement",
		"statement",
		"declaration",
		"block_item",
		"declarator",
		"direct_declarator",
		"ELSE",
		"declaration_specifiers",
		"parameter_declaration",
		"block_item_list",
		"else_statement",
		"elseif",
		"infer_action",
		"argument_expression_list",
		"array_literal_expression_list",
		"constant_expression",
		"struct_literal_fields",
		"elseif_list",
		"external_declaration",
		"function_declaration",
		"function_header",
		"function_parameters",
		"global_declaration",
		"import_declaration",
		"initializer",
		"package_declaration",
		"parameter_list",
		"parameter_type_list",
		"struct_declaration",
		"types_list",
		"after_period",
		"assignment_operator",
		"fields",
		"id_list",
		"infer_action_arg",
		"infer_actions",
		"infer_clauses",
		"STRUCT",
		"struct_fields",
		"translation_unit",
		"$default",
		"ADDR",
		"AFFVAR",
		"AND",
		"BASICTYPE",
		"BITANDEQ",
		"BITOREQ",
		"BITXOREQ",
		"CAFF",
		"CLAUSES",
		"COMMENT",
		"CONST",
		"DEF",
		"DIVEQ",
		"DPROGRAM",
		"DSTACK",
		"DSTATE",
		"ENUM",
		"EQUAL",
		"EQUALWORD",
		"error",
		"EXP",
		"EXPEQ",
		"EXPR",
		"FIELD",
		"GE_OP",
		"GTHANEQ",
		"GTHANWORD",
		"identifier_list",
		"indexing_slice_literal",
		"int_value",
		"LE_OP",
		"LEFTSHIFT",
		"LEFTSHIFTEQ",
		"LTHANEQ",
		"LTHANWORD",
		"MINUSEQ",
		"MINUSMINUS",
		"MULTEQ",
		"NEW",
		"NEWLINE",
		"NOT",
		"OBJECT",
		"OBJECTS",
		"OP",
		"OR",
		"PLUSEQ",
		"PLUSPLUS",
		"PTR_OP",
		"REM",
		"REMAINDER",
		"REMAINDEREQ",
		"RIGHTSHIFT",
		"RIGHTSHIFTEQ",
		"TAG",
		"TYPSTRUCT",
		"UNEQUAL",
		"UNION",
		"VALUE",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {152, 1},
		2:   {152, 2},
		3:   {131, 1},
		4:   {131, 1},
		5:   {131, 1},
		6:   {131, 1},
		7:   {131, 1},
		8:   {135, 4},
		9:   {135, 6},
		10:  {141, 4},
		11:  {151, 3},
		12:  {151, 4},
		13:  {145, 2},
		14:  {145, 3},
		15:  {138, 3},
		16:  {136, 3},
		17:  {133, 2},
		18:  {133, 5},
		19:  {134, 2},
		20:  {134, 3},
		21:  {132, 3},
		22:  {132, 4},
		23:  {140, 1},
		24:  {139, 1},
		25:  {139, 3},
		26:  {121, 2},
		27:  {181, 1},
		28:  {181, 3},
		29:  {117, 1},
		30:  {118, 1},
		31:  {118, 3},
		32:  {146, 1},
		33:  {146, 1},
		34:  {146, 3},
		35:  {146, 3},
		36:  {142, 3},
		37:  {142, 2},
		38:  {120, 3},
		39:  {120, 2},
		40:  {120, 3},
		41:  {120, 1},
		42:  {120, 1},
		43:  {120, 2},
		44:  {120, 2},
		45:  {120, 3},
		46:  {120, 3},
		47:  {57, 1},
		48:  {57, 1},
		49:  {57, 1},
		50:  {57, 1},
		51:  {57, 1},
		52:  {57, 1},
		53:  {57, 1},
		54:  {57, 1},
		55:  {57, 1},
		56:  {57, 1},
		57:  {57, 1},
		58:  {57, 1},
		59:  {57, 1},
		60:  {129, 0},
		61:  {129, 3},
		62:  {129, 5},
		63:  {127, 1},
		64:  {127, 3},
		65:  {127, 3},
		66:  {59, 3},
		67:  {59, 4},
		68:  {182, 2},
		69:  {182, 3},
		70:  {64, 5},
		71:  {64, 4},
		72:  {64, 5},
		73:  {64, 4},
		74:  {63, 6},
		75:  {63, 5},
		76:  {63, 6},
		77:  {63, 5},
		78:  {63, 3},
		79:  {147, 1},
		80:  {147, 1},
		81:  {147, 3},
		82:  {125, 6},
		83:  {125, 4},
		84:  {125, 4},
		85:  {125, 6},
		86:  {148, 2},
		87:  {148, 3},
		88:  {149, 0},
		89:  {149, 1},
		90:  {183, 1},
		91:  {183, 2},
		92:  {66, 1},
		93:  {66, 4},
		94:  {66, 1},
		95:  {66, 1},
		96:  {66, 1},
		97:  {66, 1},
		98:  {66, 1},
		99:  {66, 1},
		100: {66, 1},
		101: {66, 1},
		102: {66, 1},
		103: {66, 1},
		104: {66, 1},
		105: {66, 1},
		106: {66, 3},
		107: {66, 1},
		108: {66, 1},
		109: {143, 1},
		110: {143, 1},
		111: {65, 1},
		112: {65, 4},
		113: {65, 3},
		114: {65, 3},
		115: {65, 4},
		116: {65, 2},
		117: {65, 2},
		118: {65, 3},
		119: {126, 1},
		120: {126, 3},
		121: {67, 1},
		122: {67, 2},
		123: {67, 2},
		124: {67, 2},
		125: {68, 1},
		126: {68, 1},
		127: {68, 1},
		128: {68, 1},
		129: {68, 1},
		130: {81, 1},
		131: {81, 3},
		132: {81, 3},
		133: {81, 3},
		134: {82, 1},
		135: {82, 3},
		136: {82, 3},
		137: {83, 1},
		138: {83, 3},
		139: {83, 3},
		140: {83, 3},
		141: {93, 1},
		142: {93, 3},
		143: {93, 3},
		144: {93, 3},
		145: {93, 3},
		146: {93, 3},
		147: {93, 3},
		148: {94, 1},
		149: {94, 3},
		150: {95, 1},
		151: {95, 3},
		152: {96, 1},
		153: {96, 3},
		154: {97, 1},
		155: {97, 3},
		156: {99, 1},
		157: {99, 3},
		158: {98, 1},
		159: {98, 5},
		160: {101, 1},
		161: {101, 4},
		162: {101, 5},
		163: {101, 6},
		164: {100, 1},
		165: {100, 3},
		166: {144, 1},
		167: {144, 1},
		168: {144, 1},
		169: {144, 1},
		170: {144, 1},
		171: {144, 1},
		172: {144, 1},
		173: {144, 1},
		174: {144, 1},
		175: {144, 1},
		176: {144, 1},
		177: {144, 1},
		178: {103, 1},
		179: {103, 3},
		180: {128, 1},
		181: {115, 4},
		182: {115, 6},
		183: {137, 1},
		184: {114, 1},
		185: {114, 1},
		186: {114, 1},
		187: {114, 1},
		188: {114, 1},
		189: {114, 1},
		190: {112, 3},
		191: {112, 4},
		192: {112, 3},
		193: {104, 3},
		194: {104, 4},
		195: {122, 1},
		196: {122, 2},
		197: {116, 1},
		198: {116, 1},
		199: {109, 1},
		200: {109, 2},
		201: {113, 8},
		202: {113, 7},
		203: {113, 6},
		204: {113, 7},
		205: {113, 6},
		206: {113, 7},
		207: {113, 3},
		208: {113, 5},
		209: {124, 6},
		210: {124, 5},
		211: {130, 1},
		212: {130, 2},
		213: {123, 4},
		214: {123, 3},
		215: {110, 3},
		216: {110, 4},
		217: {110, 5},
		218: {110, 4},
		219: {110, 5},
		220: {111, 3},
		221: {111, 2},
		222: {111, 2},
		223: {111, 2},
		224: {111, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [406][]uint16{
		// 0
		{62: 233, 102: 237, 105: 236, 235, 234, 131: 227, 230, 238, 135: 229, 231, 138: 228, 141: 232, 152: 226},
		{62: 233, 102: 237, 105: 236, 235, 234, 225, 131: 630, 230, 238, 135: 229, 231, 138: 228, 141: 232},
		{62: 224, 102: 224, 105: 224, 224, 224, 224},
		{62: 222, 102: 222, 105: 222, 222, 222, 222},
		{62: 221, 102: 221, 105: 221, 221, 221, 221},
		// 5
		{62: 220, 102: 220, 105: 220, 220, 220, 220},
		{62: 219, 102: 219, 105: 219, 219, 219, 219},
		{62: 218, 102: 218, 105: 218, 218, 218, 218},
		{2: 422, 11: 421, 117: 624, 420},
		{11: 611},
		// 10
		{11: 609},
		{28: 607},
		{2: 603, 11: 602},
		{2: 239, 134: 240},
		{2: 422, 11: 421, 13: 593, 117: 597, 420, 121: 596, 139: 595, 594},
		// 15
		{2: 239, 10: 243, 104: 241, 134: 242},
		{62: 204, 102: 204, 105: 204, 204, 204, 204},
		{10: 243, 104: 592},
		{315, 282, 273, 283, 284, 285, 257, 280, 279, 310, 243, 259, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 62: 301, 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 316, 321, 308, 320, 309, 318, 319, 322, 317, 291, 292, 293, 294, 295, 297, 296, 299, 298, 103: 300, 303, 109: 304, 306, 307, 302, 305, 314, 313, 312, 122: 311},
		{178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 12: 178, 178, 41: 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 58: 178, 60: 178, 178, 69: 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178},
		// 20
		{177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 12: 177, 177, 41: 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 58: 177, 60: 177, 177, 69: 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177},
		{176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 12: 176, 176, 41: 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 58: 176, 60: 176, 176, 69: 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176},
		{175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 12: 175, 175, 41: 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 58: 175, 60: 175, 175, 69: 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175},
		{174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 12: 174, 174, 41: 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 58: 174, 60: 174, 174, 69: 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174},
		{173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 12: 173, 173, 41: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 58: 173, 60: 173, 173, 69: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173},
		// 25
		{172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 12: 172, 172, 41: 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 58: 172, 60: 172, 172, 69: 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172},
		{171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 12: 171, 171, 41: 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 58: 171, 60: 171, 171, 69: 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171},
		{170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 12: 170, 170, 41: 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 58: 170, 60: 170, 170, 69: 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170},
		{169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 12: 169, 169, 41: 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 58: 169, 60: 169, 169, 69: 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169},
		{168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 12: 168, 168, 41: 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 58: 168, 60: 168, 168, 69: 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168},
		// 30
		{167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 12: 167, 167, 41: 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 58: 167, 60: 167, 167, 69: 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167},
		{166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 12: 166, 166, 41: 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 58: 166, 60: 166, 166, 69: 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166},
		{27: 446, 42: 579},
		{6: 438, 11: 563, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 57: 564},
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 10: 329, 12: 133, 41: 561, 43: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 58: 133, 60: 133, 133, 69: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133},
		// 35
		{10: 536},
		{131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 12: 131, 131, 41: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 58: 131, 60: 131, 131, 69: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131},
		{130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 12: 130, 130, 41: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 58: 130, 60: 130, 130, 69: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130},
		{129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 12: 129, 129, 41: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 58: 129, 60: 129, 129, 69: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129},
		{128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 12: 128, 128, 41: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 58: 128, 60: 128, 128, 69: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},
		// 40
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 12: 127, 127, 41: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 58: 127, 60: 127, 127, 69: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127},
		{126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 12: 126, 126, 41: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 58: 126, 60: 126, 126, 69: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126},
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 12: 125, 125, 41: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 58: 125, 60: 125, 125, 69: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125},
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 12: 124, 124, 41: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 58: 124, 60: 124, 124, 69: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124},
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 12: 123, 123, 41: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 58: 123, 60: 123, 123, 69: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123},
		// 45
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 12: 122, 122, 41: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 58: 122, 60: 122, 122, 69: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 12: 121, 121, 41: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 58: 121, 60: 121, 121, 69: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 12: 120, 120, 41: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 58: 120, 60: 120, 120, 69: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 323, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 297, 296, 299, 298, 103: 534},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 12: 118, 118, 41: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 58: 118, 60: 118, 118, 69: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118},
		// 50
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 12: 117, 117, 41: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 58: 117, 60: 117, 117, 69: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 12: 114, 114, 41: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 58: 114, 60: 114, 114, 69: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114},
		{104, 104, 344, 104, 104, 104, 343, 346, 345, 104, 104, 12: 104, 104, 41: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 58: 104, 60: 104, 104, 69: 104, 104, 104, 104, 104, 104, 104, 104, 529, 104, 104, 104},
		{77: 525},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 524, 339},
		// 55
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 523, 339},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 519, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 342, 339},
		{1: 100, 100, 100, 100, 100, 100, 100, 100, 11: 100, 14: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
		{1: 99, 99, 99, 99, 99, 99, 99, 99, 11: 99, 14: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99},
		{1: 98, 98, 98, 98, 98, 98, 98, 98, 11: 98, 14: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98},
		// 60
		{1: 97, 97, 97, 97, 97, 97, 97, 97, 11: 97, 14: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97},
		{1: 96, 96, 96, 96, 96, 96, 96, 96, 11: 96, 14: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
		{95, 95, 3: 95, 95, 95, 9: 95, 95, 12: 95, 95, 41: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 58: 506, 60: 95, 95, 69: 511, 515, 507, 509, 513, 510, 508, 517, 78: 514, 512, 516, 144: 505},
		{91, 91, 3: 491, 91, 91, 9: 91, 91, 12: 91, 91, 41: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 60: 492, 493},
		{88, 88, 4: 488, 489, 9: 88, 88, 12: 88, 88, 41: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		// 65
		{84, 84, 9: 84, 84, 12: 84, 84, 41: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 486, 484, 485},
		{77, 77, 9: 77, 77, 12: 77, 77, 41: 77, 77, 77, 77, 77, 77, 77, 477, 480, 482, 479, 481, 478},
		{75, 475, 9: 75, 75, 12: 75, 75, 41: 75, 75, 75, 75, 75, 75, 75},
		{73, 9: 73, 73, 12: 73, 73, 41: 73, 73, 73, 73, 73, 73, 473},
		{71, 9: 71, 71, 12: 71, 71, 41: 71, 71, 71, 71, 71, 471},
		// 70
		{69, 9: 69, 69, 12: 69, 69, 41: 69, 69, 69, 69, 469},
		{67, 9: 67, 67, 12: 67, 67, 41: 67, 67, 464, 463},
		{65, 9: 65, 65, 12: 65, 65, 41: 65, 65},
		{61, 9: 61, 61, 12: 61, 61, 41: 61, 61},
		{47, 10: 47, 12: 47, 47, 41: 47, 47},
		// 75
		{374, 12: 326},
		{2: 422, 11: 421, 117: 423, 420},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 14: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 62: 41, 84: 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 14: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 62: 40, 84: 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 14: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 62: 39, 84: 39, 39, 39, 39, 39, 39, 39, 39, 39},
		// 80
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 14: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 62: 38, 84: 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 14: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 62: 37, 84: 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 14: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 62: 36, 84: 36, 36, 36, 36, 36, 36, 36, 36, 36},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 341, 296, 128: 417},
		{41: 415},
		// 85
		{407},
		{315, 282, 273, 283, 284, 285, 257, 280, 279, 414, 243, 259, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 62: 301, 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 316, 321, 308, 320, 309, 318, 319, 322, 317, 291, 292, 293, 294, 295, 297, 296, 299, 298, 103: 300, 303, 109: 304, 306, 307, 302, 305, 314, 313, 386},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 14: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 62: 30, 84: 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 14: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 62: 28, 84: 28, 28, 28, 28, 28, 28, 28, 28, 28},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 14: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 62: 27, 84: 27, 27, 27, 27, 27, 27, 27, 27, 27},
		// 90
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 14: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 62: 26, 84: 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 380, 296},
		{2: 376},
		{315, 282, 273, 283, 284, 285, 257, 280, 279, 11: 323, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 62: 301, 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 297, 296, 299, 298, 103: 363, 109: 364, 115: 365},
		{11: 361},
		// 95
		{360},
		{359},
		{325, 282, 273, 283, 284, 285, 257, 280, 279, 11: 323, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 297, 296, 299, 298, 103: 324},
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 329, 12: 133, 133, 41: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 58: 133, 60: 133, 133, 69: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133},
		{327, 12: 326},
		// 100
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 14: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 62: 2, 84: 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 323, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 297, 296, 328, 298},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 14: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 62: 1, 84: 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{46, 10: 46, 12: 46, 46, 41: 46, 46},
		{9: 165, 11: 330, 165, 129: 331},
		// 105
		{41: 357},
		{9: 333, 12: 332},
		{11: 334},
		{64, 9: 64, 64, 12: 64, 64, 41: 64, 64},
		{41: 335},
		// 110
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 341, 296, 128: 336},
		{9: 163, 12: 163},
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 12: 133, 133, 41: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 58: 133, 60: 133, 133, 69: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133},
		{104, 104, 344, 104, 104, 104, 343, 346, 345, 104, 104, 12: 104, 104, 41: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 58: 104, 60: 104, 104, 69: 104, 104, 104, 104, 104, 104, 104, 104, 347, 104, 104, 104},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 342, 339},
		// 115
		{95, 95, 3: 95, 95, 95, 9: 95, 95, 12: 95, 95, 41: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 60: 95, 95},
		{9: 45, 12: 45, 41: 45},
		{101, 101, 3: 101, 101, 101, 9: 101, 101, 12: 101, 101, 41: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 58: 101, 60: 101, 101, 69: 101, 101, 101, 101, 101, 101, 101, 101, 78: 101, 101, 101},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 323, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 297, 296, 299, 298, 103: 355},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 323, 13: 349, 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 297, 296, 351, 298, 126: 350},
		// 120
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 12: 109, 109, 41: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 58: 109, 60: 109, 109, 69: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109},
		{108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 12: 108, 108, 41: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 58: 108, 60: 108, 108, 69: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108},
		{11: 348},
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 12: 107, 107, 41: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 58: 107, 60: 107, 107, 69: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107},
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 12: 111, 111, 41: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 58: 111, 60: 111, 111, 69: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111},
		// 125
		{12: 353, 352},
		{9: 106, 12: 106, 106},
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 12: 110, 110, 41: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 58: 110, 60: 110, 110, 69: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 323, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 297, 296, 354, 298},
		{9: 105, 12: 105, 105},
		// 130
		{12: 326, 42: 356},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 12: 113, 113, 41: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 58: 113, 60: 113, 113, 69: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 341, 296, 128: 358},
		{9: 164, 12: 164},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 14: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 62: 3, 84: 3, 3, 3, 3, 3, 3, 3, 3, 3},
		// 135
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 14: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 62: 4, 84: 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{362},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 14: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 62: 5, 84: 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{374, 10: 243, 12: 326, 104: 375},
		{315, 282, 273, 283, 284, 285, 257, 280, 279, 11: 323, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 297, 296, 299, 298, 103: 300, 109: 370},
		// 140
		{315, 282, 273, 283, 284, 285, 257, 280, 279, 11: 323, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 297, 296, 299, 298, 103: 300, 109: 366},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 10: 243, 323, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 297, 296, 299, 298, 103: 367, 368},
		{10: 243, 12: 326, 104: 369},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 14: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 62: 7, 84: 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 14: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 62: 6, 84: 6, 6, 6, 6, 6, 6, 6, 6, 6},
		// 145
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 10: 243, 323, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 297, 296, 299, 298, 103: 371, 372},
		{10: 243, 12: 326, 104: 373},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 14: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 62: 9, 84: 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 14: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 62: 8, 84: 8, 8, 8, 8, 8, 8, 8, 8, 8},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 14: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 62: 25, 84: 25, 25, 25, 25, 25, 25, 25, 25, 25},
		// 150
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 62: 10, 84: 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 377, 296},
		{13: 378},
		{315, 282, 273, 283, 284, 285, 257, 280, 279, 10: 243, 259, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 316, 321, 308, 320, 309, 318, 319, 322, 317, 291, 292, 293, 294, 295, 297, 296, 299, 298, 103: 300, 303, 109: 304, 306, 307, 302, 305, 379},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 14: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 62: 17, 84: 17, 17, 17, 17, 17, 17, 17, 17, 17},
		// 155
		{10: 381, 104: 382},
		{315, 282, 273, 283, 284, 285, 257, 280, 279, 383, 243, 259, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 62: 301, 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 316, 321, 308, 320, 309, 318, 319, 322, 317, 291, 292, 293, 294, 295, 297, 296, 299, 298, 103: 300, 303, 109: 304, 306, 307, 302, 305, 314, 313, 312, 122: 384},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 14: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 62: 18, 84: 18, 18, 18, 18, 18, 18, 18, 18, 18},
		{407, 119: 390, 123: 408, 391, 130: 409},
		{315, 282, 273, 283, 284, 285, 257, 280, 279, 385, 243, 259, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 62: 301, 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 316, 321, 308, 320, 309, 318, 319, 322, 317, 291, 292, 293, 294, 295, 297, 296, 299, 298, 103: 300, 303, 109: 304, 306, 307, 302, 305, 314, 313, 386},
		// 160
		{387, 119: 390, 123: 389, 391, 130: 388},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 62: 29, 84: 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 14: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 62: 31, 84: 31, 31, 31, 31, 31, 31, 31, 31, 31, 102: 31, 105: 31, 31, 31, 31},
		{404, 119: 390, 123: 403, 405},
		{402},
		// 165
		{10: 393, 84: 392},
		{14, 119: 14},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 397, 296},
		{315, 282, 273, 283, 284, 285, 257, 280, 279, 395, 243, 259, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 62: 301, 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 316, 321, 308, 320, 309, 318, 319, 322, 317, 291, 292, 293, 294, 295, 297, 296, 299, 298, 103: 300, 303, 109: 304, 306, 307, 302, 305, 314, 313, 312, 122: 394},
		{315, 282, 273, 283, 284, 285, 257, 280, 279, 396, 243, 259, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 62: 301, 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 316, 321, 308, 320, 309, 318, 319, 322, 317, 291, 292, 293, 294, 295, 297, 296, 299, 298, 103: 300, 303, 109: 304, 306, 307, 302, 305, 314, 313, 386},
		// 170
		{11},
		{12},
		{10: 398},
		{315, 282, 273, 283, 284, 285, 257, 280, 279, 400, 243, 259, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 62: 301, 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 316, 321, 308, 320, 309, 318, 319, 322, 317, 291, 292, 293, 294, 295, 297, 296, 299, 298, 103: 300, 303, 109: 304, 306, 307, 302, 305, 314, 313, 312, 122: 399},
		{315, 282, 273, 283, 284, 285, 257, 280, 279, 401, 243, 259, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 62: 301, 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 316, 321, 308, 320, 309, 318, 319, 322, 317, 291, 292, 293, 294, 295, 297, 296, 299, 298, 103: 300, 303, 109: 304, 306, 307, 302, 305, 314, 313, 386},
		// 175
		{15, 119: 15},
		{16, 119: 16},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 14: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 62: 23, 84: 23, 23, 23, 23, 23, 23, 23, 23, 23},
		{406},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 14: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 62: 21, 84: 21, 21, 21, 21, 21, 21, 21, 21, 21},
		// 180
		{13, 119: 13},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 14: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 62: 24, 84: 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 14: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 62: 32, 84: 32, 32, 32, 32, 32, 32, 32, 32, 32, 102: 32, 105: 32, 32, 32, 32},
		{413},
		{410, 119: 390, 123: 411, 405},
		// 185
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 62: 20, 84: 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{412},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 14: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 62: 19, 84: 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 14: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 62: 22, 84: 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{387},
		// 190
		{315, 282, 273, 283, 284, 285, 257, 280, 279, 10: 243, 259, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 316, 321, 308, 320, 309, 318, 319, 322, 317, 291, 292, 293, 294, 295, 297, 296, 299, 298, 103: 300, 303, 109: 304, 306, 307, 302, 305, 416},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 14: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 62: 33, 84: 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{41: 418},
		{315, 282, 273, 283, 284, 285, 257, 280, 279, 10: 243, 259, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 316, 321, 308, 320, 309, 318, 319, 322, 317, 291, 292, 293, 294, 295, 297, 296, 299, 298, 103: 300, 303, 109: 304, 306, 307, 302, 305, 419},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 14: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 62: 34, 84: 34, 34, 34, 34, 34, 34, 34, 34, 34},
		// 195
		{3: 196, 6: 196, 11: 196, 13: 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 102: 196},
		{3: 195, 6: 195, 11: 195, 13: 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 102: 195},
		{2: 422, 11: 421, 117: 461, 420},
		{3: 425, 6: 426, 11: 428, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 57: 427, 59: 429, 102: 424, 120: 430},
		{2: 450, 142: 451},
		// 200
		{3: 425, 6: 426, 11: 428, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 57: 427, 59: 429, 102: 424, 120: 449},
		{27: 446, 42: 445},
		{184, 12: 184, 184, 58: 184, 77: 443},
		{183, 12: 183, 183, 58: 183, 77: 441},
		{6: 438, 11: 437, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 57: 436},
		// 205
		{431, 58: 432},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 14: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 62: 44, 84: 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 323, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 297, 296, 434, 298, 137: 433},
		{435},
		{42},
		// 210
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 14: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 62: 43, 84: 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{182, 12: 182, 182, 58: 182},
		{181, 12: 181, 181, 58: 181},
		{27: 439},
		{42: 440},
		// 215
		{6: 158, 11: 158, 14: 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158},
		{11: 442},
		{180, 12: 180, 180, 58: 180},
		{11: 444},
		{179, 12: 179, 179, 58: 179},
		// 220
		{3: 425, 6: 426, 11: 428, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 57: 427, 59: 429, 102: 424, 120: 448},
		{42: 447},
		{6: 159, 11: 159, 14: 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159},
		{185, 12: 185, 185, 58: 185},
		{186, 12: 186, 186, 58: 186},
		// 225
		{11: 453, 13: 456, 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 57: 454, 146: 455},
		{2: 450, 142: 452},
		{187, 12: 187, 187, 58: 187},
		{12: 193, 193},
		{12: 192, 192},
		// 230
		{12: 457, 458},
		{188, 2: 188, 12: 188, 188, 58: 188},
		{11: 459, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 57: 460},
		{189, 2: 189, 12: 189, 189, 58: 189},
		{12: 191, 191},
		// 235
		{12: 190, 190},
		{13: 462},
		{3: 194, 6: 194, 11: 194, 13: 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 102: 194},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 288, 289, 290, 93: 291, 292, 293, 294, 468},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 323, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 297, 296, 299, 298, 103: 465},
		// 240
		{12: 326, 41: 466},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 467, 296},
		{66, 9: 66, 66, 12: 66, 66, 41: 66, 66},
		{68, 9: 68, 68, 12: 68, 68, 41: 68, 68, 68, 68, 469},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 288, 289, 290, 93: 291, 292, 293, 470},
		// 245
		{70, 9: 70, 70, 12: 70, 70, 41: 70, 70, 70, 70, 70, 471},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 288, 289, 290, 93: 291, 292, 472},
		{72, 9: 72, 72, 12: 72, 72, 41: 72, 72, 72, 72, 72, 72, 473},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 288, 289, 290, 93: 291, 474},
		{74, 475, 9: 74, 74, 12: 74, 74, 41: 74, 74, 74, 74, 74, 74, 74},
		// 250
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 288, 289, 290, 93: 476},
		{76, 76, 9: 76, 76, 12: 76, 76, 41: 76, 76, 76, 76, 76, 76, 76, 477, 480, 482, 479, 481, 478},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 288, 289, 504},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 288, 289, 503},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 288, 289, 502},
		// 255
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 288, 289, 501},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 288, 289, 500},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 288, 289, 483},
		{78, 78, 9: 78, 78, 12: 78, 78, 41: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 486, 484, 485},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 288, 499},
		// 260
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 288, 498},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 288, 487},
		{85, 85, 4: 488, 489, 9: 85, 85, 12: 85, 85, 41: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 497},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 340, 339, 81: 490},
		// 265
		{89, 89, 3: 491, 89, 89, 9: 89, 89, 12: 89, 89, 41: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 60: 492, 493},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 496, 339},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 495, 339},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 337, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 338, 276, 494, 339},
		{92, 92, 3: 92, 92, 92, 9: 92, 92, 12: 92, 92, 41: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 60: 92, 92},
		// 270
		{93, 93, 3: 93, 93, 93, 9: 93, 93, 12: 93, 93, 41: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 60: 93, 93},
		{94, 94, 3: 94, 94, 94, 9: 94, 94, 12: 94, 94, 41: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 60: 94, 94},
		{90, 90, 3: 491, 90, 90, 9: 90, 90, 12: 90, 90, 41: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 60: 492, 493},
		{86, 86, 4: 488, 489, 9: 86, 86, 12: 86, 86, 41: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		{87, 87, 4: 488, 489, 9: 87, 87, 12: 87, 87, 41: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		// 275
		{79, 79, 9: 79, 79, 12: 79, 79, 41: 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 486, 484, 485},
		{80, 80, 9: 80, 80, 12: 80, 80, 41: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 486, 484, 485},
		{81, 81, 9: 81, 81, 12: 81, 81, 41: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 486, 484, 485},
		{82, 82, 9: 82, 82, 12: 82, 82, 41: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 486, 484, 485},
		{83, 83, 9: 83, 83, 12: 83, 83, 41: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 486, 484, 485},
		// 280
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 323, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 297, 296, 518, 298},
		{1: 59, 59, 59, 59, 59, 59, 59, 59, 11: 59, 14: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{1: 58, 58, 58, 58, 58, 58, 58, 58, 11: 58, 14: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{1: 57, 57, 57, 57, 57, 57, 57, 57, 11: 57, 14: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{1: 56, 56, 56, 56, 56, 56, 56, 56, 11: 56, 14: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		// 285
		{1: 55, 55, 55, 55, 55, 55, 55, 55, 11: 55, 14: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{1: 54, 54, 54, 54, 54, 54, 54, 54, 11: 54, 14: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{1: 53, 53, 53, 53, 53, 53, 53, 53, 11: 53, 14: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{1: 52, 52, 52, 52, 52, 52, 52, 52, 11: 52, 14: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		{1: 51, 51, 51, 51, 51, 51, 51, 51, 11: 51, 14: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		// 290
		{1: 50, 50, 50, 50, 50, 50, 50, 50, 11: 50, 14: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{1: 49, 49, 49, 49, 49, 49, 49, 49, 11: 49, 14: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		{1: 48, 48, 48, 48, 48, 48, 48, 48, 11: 48, 14: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{60, 9: 60, 60, 12: 60, 60, 41: 60, 60},
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 520, 12: 133, 133, 41: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 58: 133, 60: 133, 133, 69: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133},
		// 295
		{9: 165, 11: 330, 165, 129: 521},
		{9: 522, 12: 332},
		{63, 9: 63, 63, 12: 63, 63, 41: 63, 63},
		{102, 102, 3: 102, 102, 102, 9: 102, 102, 12: 102, 102, 41: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 58: 102, 60: 102, 102, 69: 102, 102, 102, 102, 102, 102, 102, 102, 78: 102, 102, 102},
		{103, 103, 3: 103, 103, 103, 9: 103, 103, 12: 103, 103, 41: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 58: 103, 60: 103, 103, 69: 103, 103, 103, 103, 103, 103, 103, 103, 78: 103, 103, 103},
		// 300
		{11: 527, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 57: 526, 143: 528},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 12: 116, 116, 41: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 58: 116, 60: 116, 116, 69: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 12: 115, 115, 41: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 58: 115, 60: 115, 115, 69: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115},
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 12: 112, 112, 41: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 58: 112, 60: 112, 112, 69: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112},
		{11: 530},
		// 305
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 531, 12: 107, 107, 41: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 58: 107, 60: 107, 107, 69: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107},
		{9: 165, 11: 330, 165, 129: 532},
		{9: 533, 12: 332},
		{62, 9: 62, 62, 12: 62, 62, 41: 62, 62},
		{12: 326, 535},
		// 310
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 12: 119, 119, 41: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 58: 119, 60: 119, 119, 69: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119},
		{9: 137, 11: 537, 125: 538, 148: 539, 540},
		{2: 545},
		{544},
		{9: 136, 11: 537, 125: 542},
		// 315
		{9: 541},
		{132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 12: 132, 132, 41: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 58: 132, 60: 132, 132, 69: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132},
		{543},
		{9: 138, 11: 138},
		{9: 139, 11: 139},
		// 320
		{11: 546, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 547, 57: 548, 125: 550, 147: 549},
		{2: 545, 12: 146, 146},
		{12: 145, 145},
		{77: 559},
		{12: 555, 556},
		// 325
		{12: 552, 551},
		{141, 12: 141, 141},
		{11: 537, 125: 553},
		{13: 554},
		{140, 12: 140, 140},
		// 330
		{11: 557},
		{142, 12: 142, 142},
		{13: 558},
		{143, 12: 143, 143},
		{11: 560},
		// 335
		{12: 144, 144},
		{315, 282, 273, 283, 284, 285, 257, 280, 279, 10: 243, 259, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 62: 301, 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 316, 321, 308, 320, 309, 318, 319, 322, 317, 291, 292, 293, 294, 295, 297, 296, 299, 298, 103: 300, 303, 109: 304, 306, 307, 302, 305, 314, 313, 562},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 14: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 62: 35, 84: 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{10: 575},
		{10: 565},
		// 340
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 569, 567, 323, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 297, 296, 566, 298, 127: 568},
		{9: 162, 12: 162},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 10: 567, 323, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 297, 296, 566, 298, 127: 573},
		{9: 571, 12: 570},
		{152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 12: 152, 152, 41: 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 58: 152, 60: 152, 152, 69: 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152},
		// 345
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 323, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 297, 296, 572, 298},
		{153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 12: 153, 153, 41: 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 58: 153, 60: 153, 153, 69: 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153},
		{9: 160, 12: 160},
		{9: 574, 12: 570},
		{9: 161, 12: 161},
		// 350
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 577, 567, 323, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 297, 296, 566, 298, 127: 576},
		{9: 578, 12: 570},
		{154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 12: 154, 154, 41: 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 58: 154, 60: 154, 154, 69: 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154},
		{155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 12: 155, 155, 41: 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 58: 155, 60: 155, 155, 69: 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155},
		{6: 580, 11: 581, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 57: 582, 63: 583},
		// 355
		{42: 579},
		{10: 588},
		{10: 584},
		{147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 12: 147, 147, 41: 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 58: 147, 60: 147, 147, 69: 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 586, 11: 323, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 297, 296, 351, 298, 126: 585},
		// 360
		{9: 587, 12: 353},
		{148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 12: 148, 148, 41: 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 58: 148, 60: 148, 148, 69: 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148},
		{149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 12: 149, 149, 41: 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 58: 149, 60: 149, 149, 69: 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 590, 11: 323, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 297, 296, 351, 298, 126: 589},
		{9: 591, 12: 353},
		// 365
		{150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 12: 150, 150, 41: 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 58: 150, 60: 150, 150, 69: 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150},
		{151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 12: 151, 151, 41: 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 58: 151, 60: 151, 151, 69: 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151},
		{62: 203, 102: 203, 105: 203, 203, 203, 203},
		{2: 206, 10: 206},
		{13: 601},
		// 370
		{12: 599, 202},
		{12: 201, 201},
		{3: 425, 6: 426, 11: 428, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 57: 427, 59: 429, 102: 424, 120: 598},
		{199, 12: 199, 199},
		{2: 422, 11: 421, 117: 597, 420, 121: 600},
		// 375
		{12: 200, 200},
		{2: 205, 10: 205},
		{2: 208},
		{2: 422, 11: 421, 117: 597, 420, 121: 596, 139: 595, 604},
		{13: 605},
		// 380
		{11: 606},
		{2: 207},
		{608},
		{62: 209, 102: 209, 105: 209, 209, 209, 209},
		{610},
		// 385
		{62: 210, 102: 210, 105: 210, 210, 210, 210},
		{150: 612},
		{10: 614, 151: 613},
		{62: 215, 102: 215, 105: 215, 215, 215, 215},
		{2: 422, 9: 615, 11: 421, 117: 597, 420, 121: 617, 145: 616},
		// 390
		{623},
		{2: 422, 9: 619, 11: 421, 117: 597, 420, 121: 620},
		{618},
		{2: 212, 9: 212, 11: 212},
		{622},
		// 395
		{621},
		{2: 211, 9: 211, 11: 211},
		{62: 213, 102: 213, 105: 213, 213, 213, 213},
		{62: 214, 102: 214, 105: 214, 214, 214, 214},
		{3: 425, 6: 426, 11: 428, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 57: 427, 59: 429, 102: 424, 120: 625},
		// 400
		{626, 58: 627},
		{62: 217, 102: 217, 105: 217, 217, 217, 217},
		{1: 282, 273, 283, 284, 285, 257, 280, 279, 11: 323, 14: 244, 245, 247, 248, 250, 251, 252, 249, 246, 254, 255, 256, 253, 265, 261, 262, 263, 272, 271, 260, 266, 286, 264, 267, 269, 270, 268, 57: 278, 59: 258, 63: 275, 274, 277, 276, 287, 281, 81: 288, 289, 290, 93: 291, 292, 293, 294, 295, 297, 296, 434, 298, 137: 628},
		{629},
		{62: 216, 102: 216, 105: 216, 216, 216, 216},
		// 405
		{62: 223, 102: 223, 105: 223, 223, 223, 223},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 173

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 8:
		{
			actions.DeclareGlobal(yyS[yypt-2].argument, yyS[yypt-1].argument, nil, false)
		}
	case 9:
		{
			actions.DeclareGlobal(yyS[yypt-4].argument, yyS[yypt-3].argument, nil, false)
		}
	case 10:
		{
			actions.DeclareStruct(yyS[yypt-2].tok, yyS[yypt-0].arguments)
		}
	case 11:
		{
			yyVAL.arguments = nil
		}
	case 12:
		{
			yyVAL.arguments = yyS[yypt-2].arguments
		}
	case 13:
		{
			yyVAL.arguments = []*ast.CXArgument{yyS[yypt-1].argument}
		}
	case 14:
		{
			yyVAL.arguments = append(yyS[yypt-2].arguments, yyS[yypt-1].argument)
		}
	case 15:
		{
			actions.DeclarePackage(yyS[yypt-1].tok)
		}
	case 16:
		{
			actions.DeclareImport(yyS[yypt-1].tok, CurrentFileName, lineNo)
		}
	case 17:
		{
			if pkg, err := Program.GetCurrentPackage(); err == nil {
				fn := ast.MakeFunction(yyS[yypt-0].tok, CurrentFileName, lineNo)
				pkg.AddFunction(fn)

				yyVAL.function = fn
			} else {
				panic(err)
			}
		}
	case 18:
		{
			if len(yyS[yypt-2].arguments) > 1 {
				panic("method has multiple receivers")
			}

			fnName := yyS[yypt-2].arguments[0].CustomType.Name + "." + yyS[yypt-0].tok

			if pkg, err := Program.GetCurrentPackage(); err == nil {
				fn := ast.MakeFunction(fnName, CurrentFileName, lineNo)
				pkg.AddFunction(fn)

				fn.AddInput(yyS[yypt-2].arguments[0])

				yyVAL.function = fn
			} else {
				panic(err)
			}
		}
	case 19:
		{
			yyVAL.arguments = nil
		}
	case 20:
		{
			yyVAL.arguments = yyS[yypt-1].arguments
		}
	case 21:
		{
			PreFunctionDeclaration(yyS[yypt-2].function, yyS[yypt-1].arguments, nil)
		}
	case 22:
		{
			PreFunctionDeclaration(yyS[yypt-3].function, yyS[yypt-2].arguments, yyS[yypt-1].arguments)
		}
	case 24:
		{
			yyVAL.arguments = []*ast.CXArgument{yyS[yypt-0].argument}
		}
	case 25:
		{
			yyVAL.arguments = append(yyS[yypt-2].arguments, yyS[yypt-0].argument)
		}
	case 26:
		{
			yyS[yypt-0].argument.ArgDetails.Name = yyS[yypt-1].argument.ArgDetails.Name
			yyS[yypt-0].argument.ArgDetails.Package = yyS[yypt-1].argument.ArgDetails.Package
			yyS[yypt-0].argument.IsLocalDeclaration = true
			yyVAL.argument = yyS[yypt-0].argument
		}
	case 30:
		{
			if pkg, err := Program.GetCurrentPackage(); err == nil {
				arg := ast.MakeArgument("", actions.CurrentFile, actions.LineNo)
				arg.AddType(types.UNDEFINED)
				arg.ArgDetails.Name = yyS[yypt-0].tok
				arg.ArgDetails.Package = pkg
				yyVAL.argument = arg
			} else {
				panic(err)
			}
		}
	case 31:
		{
			yyVAL.argument = yyS[yypt-1].argument
		}
	case 32:
		{
			arg := actions.DeclarationSpecifiersStruct(yyS[yypt-0].tok, "", false, actions.CurrentFile, actions.LineNo)
			yyVAL.arguments = []*ast.CXArgument{arg}
		}
	case 33:
		{
			arg := actions.DeclarationSpecifiersBasic(types.Code(yyS[yypt-0].i))
			yyVAL.arguments = []*ast.CXArgument{arg}
		}
	case 34:
		{
			arg := actions.DeclarationSpecifiersStruct(yyS[yypt-0].tok, "", false, actions.CurrentFile, actions.LineNo)
			yyVAL.arguments = append(yyS[yypt-2].arguments, arg)
		}
	case 35:
		{
			arg := actions.DeclarationSpecifiersBasic(types.Code(yyS[yypt-0].i))
			yyVAL.arguments = append(yyS[yypt-2].arguments, arg)
		}
	case 36:
		{
			yyVAL.arguments = yyS[yypt-1].arguments
		}
	case 37:
		{
			yyVAL.arguments = nil
		}
	case 38:
		{
			arg := ast.MakeArgument("", actions.CurrentFile, actions.LineNo).AddType(types.FUNC)
			arg.Inputs = yyS[yypt-1].arguments
			arg.Outputs = yyS[yypt-0].arguments
			yyVAL.argument = actions.DeclarationSpecifiers(arg, []types.Pointer{0}, constants.DECL_FUNC)
		}
	case 39:
		{
			yyVAL.argument = actions.DeclarationSpecifiers(yyS[yypt-0].argument, []types.Pointer{0}, constants.DECL_POINTER)
		}
	case 40:
		{
			yyVAL.argument = actions.DeclarationSpecifiers(yyS[yypt-0].argument, []types.Pointer{0}, constants.DECL_SLICE)
		}
	case 41:
		{
			yyVAL.argument = actions.DeclarationSpecifiersBasic(types.Code(yyS[yypt-0].i))
		}
	case 42:
		{
			yyVAL.argument = actions.DeclarationSpecifiersStruct(yyS[yypt-0].tok, "", false, CurrentFileName, lineNo)
		}
	case 43:
		{
			basic := actions.DeclarationSpecifiersBasic(types.Code(yyS[yypt-0].i))
			yyVAL.argument = actions.DeclarationSpecifiers(basic, types.Cast_sint_to_sptr(yyS[yypt-1].ints), constants.DECL_ARRAY)
		}
	case 44:
		{
			strct := actions.DeclarationSpecifiersStruct(yyS[yypt-0].tok, "", false, actions.CurrentFile, actions.LineNo)
			yyVAL.argument = actions.DeclarationSpecifiers(strct, types.Cast_sint_to_sptr(yyS[yypt-1].ints), constants.DECL_ARRAY)
		}
	case 45:
		{
			yyVAL.argument = actions.DeclarationSpecifiersStruct(yyS[yypt-0].tok, yyS[yypt-2].tok, true, CurrentFileName, lineNo)
		}
	case 46:
		{
			yyVAL.argument = actions.DeclarationSpecifiersStruct(yyS[yypt-0].tok, types.Code(yyS[yypt-2].i).Name(), true, CurrentFileName, lineNo)
		}
	case 47:
		{
			yyVAL.i = int(types.AFF)
		}
	case 48:
		{
			yyVAL.i = int(types.BOOL)
		}
	case 49:
		{
			yyVAL.i = int(types.STR)
		}
	case 50:
		{
			yyVAL.i = int(types.F32)
		}
	case 51:
		{
			yyVAL.i = int(types.F64)
		}
	case 52:
		{
			yyVAL.i = int(types.I8)
		}
	case 53:
		{
			yyVAL.i = int(types.I16)
		}
	case 54:
		{
			yyVAL.i = int(types.I32)
		}
	case 55:
		{
			yyVAL.i = int(types.I64)
		}
	case 56:
		{
			yyVAL.i = int(types.UI8)
		}
	case 57:
		{
			yyVAL.i = int(types.UI16)
		}
	case 58:
		{
			yyVAL.i = int(types.UI32)
		}
	case 59:
		{
			yyVAL.i = int(types.UI64)
		}
	case 66:
		{
			yyVAL.ints = []int{int(yyS[yypt-1].i32)}
		}
	case 67:
		{
			yyVAL.ints = append(yyS[yypt-3].ints, int(yyS[yypt-1].i32))
		}
	case 68:
		{
			yyVAL.ints = []int{0}
		}
	case 69:
		{
			yyVAL.ints = append(yyS[yypt-2].ints, 0)
		}
	case 90:
		{
			yyVAL.i32 = yyS[yypt-0].i32
		}
	case 91:
		{
			yyVAL.i32 = -yyS[yypt-0].i32
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
