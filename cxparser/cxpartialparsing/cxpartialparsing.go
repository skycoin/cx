// Code generated by goyacc -o cxparser/cxpartialparsing/cxpartialparsing.go cxparser/cxpartialparsing/cxpartialparsing.y. DO NOT EDIT.

//line cxparser/cxpartialparsing/cxpartialparsing.y:2
package partialparsing

import __yyfmt__ "fmt"

//line cxparser/cxpartialparsing/cxpartialparsing.y:2
import (
	"bytes"
	"github.com/skycoin/cx/cx/ast"
	"github.com/skycoin/cx/cx/constants"
	"github.com/skycoin/cx/cx/types"
	"github.com/skycoin/cx/cxparser/actions"
)

/*
   This is a computer generated file
   - partialparsing.go is generated from partialparsing.y via
   - ./bin/goyacc -o cxparser/cxpartialparsing/cxpartialparsing.go cxparser/cxpartialparsing/cxpartialparsing.y
*/

var Program *ast.CXProgram

var lineNo int = -1
var replMode bool = false
var inREPL bool = false
var inFn bool = false
var fileName string

// Parse() is the function that is called from main().
// It is needed because yyParse is not exported.
func Parse(code string) int {
	codeBuf := bytes.NewBufferString(code)
	return yyParse(NewLexer(codeBuf))
}

func PreFunctionDeclaration(fnIdx ast.CXFunctionIndex, inputs []*ast.CXArgument, outputs []*ast.CXArgument) {
	fn := actions.AST.GetFunctionFromArray(fnIdx)
	// adding inputs, outputs
	for _, inp := range inputs {
		fn.AddInput(actions.AST, inp)
	}
	for _, out := range outputs {
		fn.AddOutput(actions.AST, out)
	}
}

//line cxparser/cxpartialparsing/cxpartialparsing.y:45
type yySymType struct {
	yys     int
	i       int
	i8      int8
	i16     int16
	i32     int32
	i64     int64
	ui8     uint8
	ui16    uint16
	ui32    uint32
	ui64    uint64
	f32     float32
	f64     float64
	tok     string
	bool    bool
	string  string
	stringA []string
	ints    []int

	line int

	argument  *ast.CXArgument
	arguments []*ast.CXArgument

	expression  *ast.CXExpression
	expressions []*ast.CXExpression

	function      *ast.CXFunction
	functionIndex ast.CXFunctionIndex
}

const BOOLEAN_LITERAL = 57346
const BYTE_LITERAL = 57347
const SHORT_LITERAL = 57348
const INT_LITERAL = 57349
const LONG_LITERAL = 57350
const UNSIGNED_BYTE_LITERAL = 57351
const UNSIGNED_SHORT_LITERAL = 57352
const UNSIGNED_INT_LITERAL = 57353
const UNSIGNED_LONG_LITERAL = 57354
const FLOAT_LITERAL = 57355
const DOUBLE_LITERAL = 57356
const FUNC = 57357
const OP = 57358
const LPAREN = 57359
const RPAREN = 57360
const LBRACE = 57361
const RBRACE = 57362
const LBRACK = 57363
const RBRACK = 57364
const IDENTIFIER = 57365
const VAR = 57366
const COMMA = 57367
const PERIOD = 57368
const COMMENT = 57369
const STRING_LITERAL = 57370
const PACKAGE = 57371
const IF = 57372
const ELSE = 57373
const FOR = 57374
const TYPSTRUCT = 57375
const STRUCT = 57376
const SEMICOLON = 57377
const NEWLINE = 57378
const ASSIGN = 57379
const CASSIGN = 57380
const IMPORT = 57381
const RETURN = 57382
const GOTO = 57383
const GT_OP = 57384
const LT_OP = 57385
const GTEQ_OP = 57386
const LTEQ_OP = 57387
const EQUAL = 57388
const COLON = 57389
const NEW = 57390
const EQUALWORD = 57391
const GTHANWORD = 57392
const LTHANWORD = 57393
const GTHANEQ = 57394
const LTHANEQ = 57395
const UNEQUAL = 57396
const AND = 57397
const OR = 57398
const ADD_OP = 57399
const SUB_OP = 57400
const MUL_OP = 57401
const DIV_OP = 57402
const MOD_OP = 57403
const REF_OP = 57404
const NEG_OP = 57405
const AFFVAR = 57406
const PLUSPLUS = 57407
const MINUSMINUS = 57408
const REMAINDER = 57409
const LEFTSHIFT = 57410
const RIGHTSHIFT = 57411
const EXP = 57412
const NOT = 57413
const BITXOR_OP = 57414
const BITOR_OP = 57415
const BITCLEAR_OP = 57416
const PLUSEQ = 57417
const MINUSEQ = 57418
const MULTEQ = 57419
const DIVEQ = 57420
const REMAINDEREQ = 57421
const EXPEQ = 57422
const LEFTSHIFTEQ = 57423
const RIGHTSHIFTEQ = 57424
const BITANDEQ = 57425
const BITXOREQ = 57426
const BITOREQ = 57427
const DEC_OP = 57428
const INC_OP = 57429
const PTR_OP = 57430
const LEFT_OP = 57431
const RIGHT_OP = 57432
const GE_OP = 57433
const LE_OP = 57434
const EQ_OP = 57435
const NE_OP = 57436
const AND_OP = 57437
const OR_OP = 57438
const ADD_ASSIGN = 57439
const AND_ASSIGN = 57440
const LEFT_ASSIGN = 57441
const MOD_ASSIGN = 57442
const MUL_ASSIGN = 57443
const DIV_ASSIGN = 57444
const OR_ASSIGN = 57445
const RIGHT_ASSIGN = 57446
const SUB_ASSIGN = 57447
const XOR_ASSIGN = 57448
const BOOL = 57449
const F32 = 57450
const F64 = 57451
const I8 = 57452
const I16 = 57453
const I32 = 57454
const I64 = 57455
const STR = 57456
const UI8 = 57457
const UI16 = 57458
const UI32 = 57459
const UI64 = 57460
const UNION = 57461
const ENUM = 57462
const CONST = 57463
const CASE = 57464
const DEFAULT = 57465
const SWITCH = 57466
const BREAK = 57467
const CONTINUE = 57468
const TYPE = 57469
const BASICTYPE = 57470
const REM = 57471
const DEF = 57472
const EXPR = 57473
const FIELD = 57474
const CLAUSES = 57475
const OBJECT = 57476
const OBJECTS = 57477
const DSTACK = 57478
const DPROGRAM = 57479
const DSTATE = 57480
const AFF = 57481
const CAFF = 57482
const TAG = 57483
const INFER = 57484
const VALUE = 57485
const ADDR = 57486
const yyDefault = 57487

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"BOOLEAN_LITERAL",
	"BYTE_LITERAL",
	"SHORT_LITERAL",
	"INT_LITERAL",
	"LONG_LITERAL",
	"UNSIGNED_BYTE_LITERAL",
	"UNSIGNED_SHORT_LITERAL",
	"UNSIGNED_INT_LITERAL",
	"UNSIGNED_LONG_LITERAL",
	"FLOAT_LITERAL",
	"DOUBLE_LITERAL",
	"FUNC",
	"OP",
	"LPAREN",
	"RPAREN",
	"LBRACE",
	"RBRACE",
	"LBRACK",
	"RBRACK",
	"IDENTIFIER",
	"VAR",
	"COMMA",
	"PERIOD",
	"COMMENT",
	"STRING_LITERAL",
	"PACKAGE",
	"IF",
	"ELSE",
	"FOR",
	"TYPSTRUCT",
	"STRUCT",
	"SEMICOLON",
	"NEWLINE",
	"ASSIGN",
	"CASSIGN",
	"IMPORT",
	"RETURN",
	"GOTO",
	"GT_OP",
	"LT_OP",
	"GTEQ_OP",
	"LTEQ_OP",
	"EQUAL",
	"COLON",
	"NEW",
	"EQUALWORD",
	"GTHANWORD",
	"LTHANWORD",
	"GTHANEQ",
	"LTHANEQ",
	"UNEQUAL",
	"AND",
	"OR",
	"ADD_OP",
	"SUB_OP",
	"MUL_OP",
	"DIV_OP",
	"MOD_OP",
	"REF_OP",
	"NEG_OP",
	"AFFVAR",
	"PLUSPLUS",
	"MINUSMINUS",
	"REMAINDER",
	"LEFTSHIFT",
	"RIGHTSHIFT",
	"EXP",
	"NOT",
	"BITXOR_OP",
	"BITOR_OP",
	"BITCLEAR_OP",
	"PLUSEQ",
	"MINUSEQ",
	"MULTEQ",
	"DIVEQ",
	"REMAINDEREQ",
	"EXPEQ",
	"LEFTSHIFTEQ",
	"RIGHTSHIFTEQ",
	"BITANDEQ",
	"BITXOREQ",
	"BITOREQ",
	"DEC_OP",
	"INC_OP",
	"PTR_OP",
	"LEFT_OP",
	"RIGHT_OP",
	"GE_OP",
	"LE_OP",
	"EQ_OP",
	"NE_OP",
	"AND_OP",
	"OR_OP",
	"ADD_ASSIGN",
	"AND_ASSIGN",
	"LEFT_ASSIGN",
	"MOD_ASSIGN",
	"MUL_ASSIGN",
	"DIV_ASSIGN",
	"OR_ASSIGN",
	"RIGHT_ASSIGN",
	"SUB_ASSIGN",
	"XOR_ASSIGN",
	"BOOL",
	"F32",
	"F64",
	"I8",
	"I16",
	"I32",
	"I64",
	"STR",
	"UI8",
	"UI16",
	"UI32",
	"UI64",
	"UNION",
	"ENUM",
	"CONST",
	"CASE",
	"DEFAULT",
	"SWITCH",
	"BREAK",
	"CONTINUE",
	"TYPE",
	"BASICTYPE",
	"REM",
	"DEF",
	"EXPR",
	"FIELD",
	"CLAUSES",
	"OBJECT",
	"OBJECTS",
	"DSTACK",
	"DPROGRAM",
	"DSTATE",
	"AFF",
	"CAFF",
	"TAG",
	"INFER",
	"VALUE",
	"ADDR",
	"yyDefault",
	"'?'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line cxparser/cxpartialparsing/cxpartialparsing.y:788

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 2605

var yyAct = [...]int{
	75, 99, 100, 272, 341, 344, 342, 54, 97, 164,
	261, 80, 242, 145, 205, 208, 81, 135, 77, 134,
	131, 328, 129, 76, 74, 13, 133, 102, 211, 215,
	216, 130, 48, 368, 9, 138, 113, 33, 225, 8,
	228, 229, 230, 27, 220, 219, 222, 221, 61, 11,
	33, 226, 227, 223, 224, 137, 171, 55, 308, 184,
	185, 72, 89, 162, 206, 245, 170, 16, 343, 146,
	199, 400, 393, 63, 198, 160, 33, 47, 323, 246,
	304, 59, 305, 60, 50, 33, 136, 394, 166, 165,
	171, 163, 166, 173, 171, 217, 218, 343, 199, 141,
	172, 240, 198, 196, 256, 203, 204, 202, 153, 176,
	148, 343, 388, 343, 167, 370, 177, 158, 167, 189,
	193, 191, 188, 186, 187, 195, 192, 190, 194, 167,
	369, 167, 167, 171, 367, 353, 161, 12, 337, 201,
	200, 112, 336, 172, 326, 301, 298, 255, 231, 240,
	236, 234, 180, 179, 158, 175, 56, 26, 31, 182,
	57, 374, 22, 382, 244, 207, 67, 201, 200, 386,
	196, 31, 373, 385, 321, 68, 166, 251, 321, 384,
	248, 380, 33, 319, 359, 250, 171, 252, 381, 247,
	210, 101, 257, 253, 254, 377, 167, 31, 362, 66,
	306, 140, 167, 359, 152, 241, 31, 166, 262, 379,
	166, 397, 273, 166, 324, 395, 378, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	295, 296, 297, 167, 283, 282, 167, 280, 275, 167,
	269, 300, 264, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 243,
	339, 259, 293, 294, 309, 314, 316, 360, 52, 265,
	50, 318, 359, 213, 312, 325, 171, 320, 168, 290,
	291, 292, 168, 349, 321, 330, 330, 307, 306, 310,
	274, 238, 306, 168, 58, 168, 168, 171, 237, 332,
	263, 235, 178, 31, 284, 285, 286, 287, 288, 289,
	166, 165, 156, 160, 146, 19, 315, 317, 340, 338,
	155, 18, 19, 51, 23, 166, 352, 347, 18, 348,
	350, 355, 346, 25, 15, 351, 167, 214, 402, 24,
	330, 239, 65, 262, 262, 363, 365, 371, 372, 267,
	376, 167, 375, 361, 65, 19, 279, 214, 299, 19,
	168, 18, 232, 154, 398, 18, 168, 20, 383, 64,
	166, 165, 21, 335, 50, 166, 389, 334, 387, 303,
	392, 372, 322, 277, 276, 396, 258, 249, 49, 162,
	209, 160, 143, 50, 401, 313, 167, 168, 144, 390,
	168, 167, 139, 168, 160, 71, 327, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 403, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 174, 62, 127, 21, 50,
	405, 132, 157, 85, 78, 2, 84, 14, 115, 83,
	90, 82, 92, 79, 183, 88, 98, 105, 266, 111,
	96, 93, 270, 271, 354, 128, 7, 6, 5, 358,
	4, 3, 1, 10, 149, 142, 233, 108, 109, 107,
	53, 17, 106, 110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	168, 0, 0, 0, 0, 0, 104, 103, 0, 0,
	0, 0, 28, 0, 0, 168, 0, 0, 30, 0,
	32, 0, 0, 0, 0, 0, 0, 35, 37, 38,
	39, 40, 41, 42, 36, 43, 44, 45, 46, 0,
	0, 0, 86, 87, 91, 95, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 29, 0, 0, 34,
	168, 0, 114, 0, 0, 168, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 0, 0, 127,
	0, 50, 404, 132, 0, 85, 78, 0, 0, 0,
	115, 0, 90, 0, 92, 0, 0, 88, 0, 0,
	0, 0, 96, 93, 35, 37, 38, 39, 40, 41,
	42, 36, 43, 44, 45, 46, 0, 0, 0, 108,
	109, 107, 0, 0, 106, 110, 0, 0, 357, 0,
	0, 0, 0, 0, 0, 0, 34, 0, 0, 0,
	0, 0, 0, 0, 356, 0, 0, 0, 104, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 35,
	37, 38, 39, 40, 41, 42, 36, 43, 44, 45,
	46, 0, 0, 0, 86, 87, 91, 95, 94, 0,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 34, 0, 127, 114, 50, 399, 132, 0, 85,
	78, 0, 0, 0, 115, 0, 90, 0, 92, 0,
	0, 88, 0, 0, 0, 0, 96, 93, 35, 37,
	38, 39, 40, 41, 42, 36, 43, 44, 45, 46,
	0, 0, 0, 108, 109, 107, 0, 0, 106, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	34, 0, 0, 0, 0, 0, 281, 0, 278, 0,
	0, 0, 104, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 35, 37, 38, 39, 40, 41, 42,
	36, 43, 44, 45, 46, 0, 0, 0, 86, 87,
	91, 95, 94, 0, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 34, 0, 127, 114, 50,
	391, 132, 0, 85, 78, 0, 0, 0, 115, 0,
	90, 0, 92, 0, 0, 88, 0, 0, 0, 0,
	96, 93, 35, 37, 38, 39, 40, 41, 42, 36,
	43, 44, 45, 46, 0, 0, 0, 108, 109, 107,
	0, 0, 106, 110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 34, 0, 0, 0, 0, 0,
	70, 0, 212, 0, 0, 0, 104, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 35, 37, 38,
	39, 40, 41, 42, 36, 43, 44, 45, 46, 0,
	0, 0, 86, 87, 91, 95, 94, 0, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 34,
	0, 127, 114, 50, 345, 132, 0, 85, 78, 0,
	0, 0, 115, 0, 90, 0, 92, 0, 0, 88,
	0, 0, 0, 0, 96, 93, 35, 37, 38, 39,
	40, 41, 42, 36, 43, 44, 45, 46, 0, 0,
	0, 108, 109, 107, 0, 0, 106, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 34, 0,
	0, 150, 0, 0, 0, 0, 151, 0, 0, 0,
	104, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 35, 37, 38, 39, 40, 41, 42, 36, 43,
	44, 45, 46, 0, 0, 0, 86, 87, 91, 95,
	94, 0, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 34, 0, 127, 114, 50, 311, 132,
	0, 85, 78, 0, 0, 0, 115, 0, 90, 0,
	92, 0, 0, 88, 0, 0, 0, 0, 96, 93,
	35, 37, 38, 39, 40, 41, 42, 36, 43, 44,
	45, 46, 0, 0, 0, 108, 109, 107, 0, 0,
	106, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 34, 0, 0, 0, 0, 0, 70, 0,
	69, 0, 0, 0, 104, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 35, 37, 38, 39, 40,
	41, 42, 36, 43, 44, 45, 46, 0, 0, 0,
	86, 87, 91, 95, 94, 0, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 34, 0, 127,
	114, 50, 159, 132, 0, 85, 78, 0, 0, 0,
	115, 0, 90, 0, 92, 0, 0, 88, 0, 0,
	0, 0, 96, 93, 35, 37, 38, 39, 40, 41,
	42, 36, 43, 44, 45, 46, 0, 0, 0, 108,
	109, 107, 0, 0, 106, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 34, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 104, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 35,
	37, 38, 39, 40, 41, 42, 36, 43, 44, 45,
	46, 0, 0, 0, 86, 87, 91, 95, 94, 0,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 34, 0, 127, 114, 50, 73, 132, 0, 85,
	78, 0, 0, 0, 115, 0, 90, 0, 92, 0,
	0, 88, 0, 0, 0, 0, 96, 93, 35, 37,
	38, 39, 40, 41, 42, 36, 43, 44, 45, 46,
	0, 0, 0, 108, 109, 107, 0, 0, 106, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	34, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	0, 0, 104, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 35, 37, 38, 39, 40, 41, 42,
	36, 43, 44, 45, 46, 0, 0, 0, 86, 87,
	91, 95, 94, 0, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 34, 0, 127, 114, 50,
	0, 132, 0, 85, 78, 0, 0, 0, 115, 0,
	90, 0, 92, 0, 0, 88, 0, 0, 0, 0,
	96, 93, 35, 37, 38, 39, 40, 41, 42, 36,
	43, 44, 45, 46, 0, 0, 0, 108, 109, 107,
	0, 0, 106, 110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 34, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 35, 37, 38,
	39, 40, 41, 42, 36, 43, 44, 45, 46, 0,
	0, 0, 86, 87, 91, 95, 94, 0, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 34,
	0, 127, 114, 50, 0, 132, 0, 85, 0, 0,
	0, 0, 115, 0, 90, 0, 92, 0, 0, 88,
	0, 0, 0, 0, 96, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 107, 0, 0, 106, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	104, 103, 127, 0, 331, 333, 132, 0, 147, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 0, 0,
	0, 35, 37, 38, 39, 40, 41, 42, 36, 43,
	44, 45, 46, 0, 0, 0, 86, 87, 91, 95,
	94, 0, 108, 109, 107, 0, 0, 106, 110, 0,
	0, 0, 0, 34, 0, 0, 114, 0, 0, 0,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 104, 103, 127, 0, 331, 329, 132, 0, 147,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 0,
	0, 0, 35, 37, 38, 39, 40, 41, 42, 36,
	43, 44, 45, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 109, 107, 0, 0, 106, 110,
	0, 0, 0, 0, 34, 0, 0, 114, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 0,
	0, 127, 104, 103, 0, 132, 0, 147, 78, 0,
	0, 0, 115, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 35, 37, 38, 39, 40, 41, 42,
	36, 43, 44, 45, 46, 0, 0, 0, 0, 0,
	0, 108, 109, 107, 0, 0, 106, 110, 0, 0,
	0, 0, 0, 0, 0, 34, 0, 0, 114, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	104, 103, 127, 0, 0, 366, 132, 0, 147, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 0, 0,
	0, 35, 37, 38, 39, 40, 41, 42, 36, 43,
	44, 45, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 109, 107, 0, 0, 106, 110, 0,
	0, 0, 0, 34, 0, 0, 114, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 0, 0,
	127, 104, 103, 364, 132, 0, 147, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 35, 37, 38, 39, 40, 41, 42, 36,
	43, 44, 45, 46, 0, 0, 0, 0, 0, 0,
	108, 109, 107, 0, 0, 106, 110, 0, 0, 0,
	0, 0, 0, 0, 34, 0, 0, 114, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 104,
	103, 127, 0, 331, 0, 132, 0, 147, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 0, 0, 0,
	35, 37, 38, 39, 40, 41, 42, 36, 43, 44,
	45, 46, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 107, 0, 0, 106, 110, 0, 0,
	0, 0, 34, 0, 0, 114, 0, 0, 0, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	104, 103, 127, 0, 50, 0, 132, 0, 147, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 0, 0,
	0, 35, 37, 38, 39, 40, 41, 42, 36, 43,
	44, 45, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 109, 107, 0, 0, 106, 110, 0,
	0, 0, 0, 34, 0, 0, 114, 0, 0, 0,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 104, 103, 127, 260, 0, 0, 132, 0, 147,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 0,
	0, 0, 35, 37, 38, 39, 40, 41, 42, 36,
	43, 44, 45, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 109, 107, 0, 0, 106, 110,
	0, 0, 0, 0, 34, 0, 0, 114, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 0,
	0, 127, 104, 103, 0, 132, 0, 147, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 35, 37, 38, 39, 40, 41, 42,
	36, 43, 44, 45, 46, 0, 0, 0, 0, 0,
	0, 108, 109, 107, 0, 0, 106, 110, 0, 0,
	0, 0, 0, 0, 0, 34, 0, 0, 114, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	104, 103, 127, 0, 0, 0, 132, 0, 147, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 0, 0,
	181, 35, 37, 38, 39, 40, 41, 42, 36, 43,
	44, 45, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 109, 107, 0, 0, 106, 110, 0,
	0, 0, 0, 34, 0, 0, 114, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 0, 0,
	127, 104, 103, 0, 132, 0, 169, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 35, 37, 38, 39, 40, 41, 42, 36,
	43, 44, 45, 46, 0, 0, 0, 0, 0, 0,
	108, 109, 107, 0, 0, 106, 110, 0, 0, 0,
	0, 0, 0, 0, 34, 0, 0, 114, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 104,
	103, 127, 0, 0, 0, 132, 0, 147, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 0, 0, 0,
	35, 37, 38, 39, 40, 41, 42, 36, 43, 44,
	45, 46, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 109, 107, 0, 0, 106, 110, 0, 0,
	0, 0, 34, 0, 0, 114, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 0, 0, 127,
	104, 103, 0, 132, 0, 197, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 35, 37, 38, 39, 40, 41, 42, 36, 43,
	44, 45, 46, 0, 0, 0, 0, 0, 0, 108,
	109, 107, 0, 0, 106, 110, 0, 0, 0, 0,
	0, 0, 0, 34, 0, 0, 114, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 35,
	37, 38, 39, 40, 41, 42, 36, 43, 44, 45,
	46, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 34, 0, 0, 114,
}

var yyPact = [...]int{
	10, 10, -1000, -1000, -1000, -1000, -1000, -1000, 311, 298,
	421, 134, 301, 316, -1000, 122, 497, -1000, -1000, 298,
	355, 305, 121, 126, -1000, 298, -1000, 46, 419, 497,
	347, 173, 140, 1117, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 387, -1000, 374,
	1306, -1000, 384, 176, -1000, 497, -1000, 373, 380, -1000,
	2394, 419, 993, -1000, 497, 341, 297, 289, -1000, -1000,
	435, -1000, -1000, 119, 1182, -1000, -1000, -1000, 298, -1000,
	-1000, -1000, -1000, -1000, -1000, 44, 2323, 19, -1000, 108,
	2323, 418, 1764, 279, 118, 117, 2255, -1000, -1000, 22,
	-1000, 2462, 81, 2323, 2323, -82, -1000, -1000, -1000, -1000,
	-1000, -1000, 139, -80, 371, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2394, -1000, -1000,
	-45, 869, 335, -43, -32, 2, -36, -6, -19, -1000,
	298, -1000, -1000, 342, 278, 115, -1000, 370, -1000, 273,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 319, -1000, 114,
	-1000, 497, 236, 1430, 18, -1000, -1000, 53, 2323, -1000,
	1554, 2394, -1000, 368, 2323, 65, 2184, 2184, 112, -1000,
	-1000, -1000, 69, 2394, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 367, 2394, 2116,
	-1000, -1000, 277, -1000, -1000, 2323, 2394, 1365, 2323, 189,
	272, 2323, 365, 364, 745, 2323, 2323, 2323, 2323, 2323,
	2323, 2323, 2323, 2323, 2323, 2323, 2323, 2323, 2323, 2323,
	2323, -1000, 111, 338, 110, -1000, -1000, 1241, -1000, -1000,
	-1000, 45, 267, 11, -1000, 1554, 266, -1000, -1000, 1058,
	-1000, 377, -1000, 2045, 2045, -1000, -1000, -1000, 236, 161,
	-1000, 259, -1000, 363, -80, 31, -1000, -1000, -1000, -45,
	194, 189, 109, 389, -1000, -43, 1696, 1625, 358, 354,
	-1000, 315, -32, 2, -36, -36, -36, -36, -36, -36,
	-6, -6, -6, -19, -19, -1000, -1000, -1000, -1000, 107,
	103, -1000, -1000, -1000, -1000, 2394, 237, -1000, 2323, -1000,
	-1000, 82, 934, 1554, -1000, 251, -1000, 251, 263, -1000,
	-1000, 2394, 236, 2323, -1000, 100, -1000, 621, 247, -1000,
	-1000, 1974, 178, -1000, 1903, 1835, -1000, -1000, 99, -14,
	-1000, 95, 80, 142, -1000, 66, -1000, -1000, -1000, -1000,
	-1000, 175, -1000, -1000, 191, 163, 389, -1000, 137, 2394,
	-1000, 159, -1000, 153, -1000, 149, -1000, -1000, 2323, -1000,
	-1000, 77, -1000, 2323, 810, 37, 52, -1000, 192, -1000,
	-1000, 189, 188, -1000, -1000, -1000, -1000, -1000, -1000, 345,
	686, -1000, 36, -1000, -1000, 376, 320, -1000, 562, -1000,
	-1000, -1000, -1000, 420, -1000, -1000,
}

var yyPgo = [...]int{
	0, 484, 191, 141, 43, 57, 481, 7, 268, 367,
	480, 476, 475, 474, 48, 473, 20, 473, 472, 445,
	471, 470, 468, 467, 466, 13, 11, 466, 12, 9,
	21, 8, 465, 22, 10, 464, 3, 463, 462, 459,
	62, 458, 27, 1, 35, 55, 86, 17, 19, 26,
	31, 36, 457, 2, 456, 454, 23, 18, 453, 16,
	451, 449, 446, 0, 24, 6, 4, 5,
}

var yyR1 = [...]int{
	0, 18, 18, 19, 19, 19, 19, 19, 21, 21,
	24, 12, 12, 11, 11, 20, 23, 15, 15, 9,
	9, 22, 22, 8, 10, 10, 7, 27, 27, 5,
	6, 6, 13, 13, 13, 13, 14, 14, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	28, 28, 28, 30, 30, 30, 16, 16, 17, 17,
	32, 32, 32, 32, 33, 33, 33, 33, 33, 35,
	35, 35, 36, 36, 36, 36, 37, 37, 38, 38,
	1, 1, 39, 39, 39, 39, 39, 39, 39, 39,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 41,
	41, 42, 42, 42, 42, 42, 42, 42, 42, 34,
	34, 43, 43, 43, 43, 2, 2, 2, 2, 2,
	44, 44, 44, 44, 45, 45, 45, 46, 46, 46,
	46, 47, 47, 47, 47, 47, 47, 47, 48, 48,
	49, 49, 50, 50, 51, 51, 52, 52, 53, 53,
	54, 54, 54, 54, 31, 31, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 40, 40,
	29, 56, 56, 25, 57, 57, 57, 57, 57, 57,
	58, 58, 58, 26, 26, 64, 64, 63, 63, 59,
	59, 60, 60, 60, 60, 60, 60, 60, 60, 67,
	67, 65, 65, 66, 66, 61, 61, 61, 61, 61,
	62, 62, 62, 62, 62,
}

var yyR2 = [...]int{
	0, 1, 2, 1, 1, 1, 1, 1, 4, 6,
	4, 3, 4, 2, 3, 3, 3, 2, 5, 2,
	3, 3, 4, 1, 1, 3, 2, 1, 3, 1,
	1, 3, 1, 1, 3, 3, 3, 2, 3, 2,
	3, 1, 1, 2, 2, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 3, 5, 1, 3, 3, 3, 4, 2, 3,
	5, 4, 5, 4, 6, 5, 6, 5, 3, 1,
	1, 3, 6, 4, 4, 6, 2, 3, 0, 1,
	1, 2, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 4, 3, 3, 4, 2, 2, 3, 1,
	3, 1, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 1, 3, 3, 1, 3, 3,
	3, 1, 3, 3, 3, 3, 3, 3, 1, 3,
	1, 3, 1, 3, 1, 3, 1, 3, 1, 5,
	1, 4, 5, 6, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 4, 6, 1, 1, 1, 1, 1, 1, 1,
	3, 4, 3, 3, 4, 1, 2, 1, 1, 1,
	2, 8, 7, 6, 7, 6, 7, 3, 5, 6,
	5, 1, 2, 4, 3, 3, 4, 5, 4, 5,
	3, 2, 2, 2, 3,
}

var yyChk = [...]int{
	-1000, -18, -19, -20, -21, -22, -23, -24, 29, 24,
	-15, 39, 127, 15, -19, 23, -5, -6, 23, 17,
	-9, 17, 28, 23, 23, 17, 35, -4, 15, 59,
	21, -3, 23, -16, 139, 107, 114, 108, 109, 110,
	111, 112, 113, 115, 116, 117, 118, -5, -26, -9,
	19, 18, -8, -10, -7, -5, 35, 34, -8, 35,
	37, -14, 17, -4, 22, 7, 26, 26, -3, 23,
	21, 18, -26, 20, -64, -63, -56, -57, 24, -58,
	-26, -59, -60, -61, -62, 23, 122, 123, 35, -40,
	30, 124, 32, 41, 126, 125, 40, -31, -54, -43,
	-53, -2, -42, 87, 86, -52, 62, 59, 57, 58,
	63, -39, -3, -51, 142, 28, 4, 5, 6, 7,
	8, 9, 10, 11, 12, 13, 14, 17, -32, -33,
	-50, -16, 21, -49, -48, -47, -46, -45, -44, 18,
	25, -4, -12, 19, 18, -25, -31, 23, -14, -13,
	18, 23, -3, -4, 22, 23, 23, 7, 35, 20,
	-63, -5, 19, 47, -29, -53, -43, -42, -2, 23,
	47, 25, 35, -53, 17, -40, -59, -56, 23, 35,
	35, 35, -40, -55, 37, 38, 101, 102, 100, 97,
	105, 99, 104, 98, 106, 103, -43, 23, 21, 17,
	87, 86, 26, -43, -43, 96, 146, 26, 95, 19,
	-40, 73, 23, -3, 22, 72, 62, 93, 94, 43,
	42, 45, 44, 89, 90, 74, 57, 58, 59, 60,
	61, -7, 20, -11, -7, 23, 35, 25, 18, 22,
	35, -4, -28, 23, -63, 47, 26, -57, -31, 19,
	-26, -53, -26, -59, -59, 35, 35, -31, 19, -40,
	18, -34, -31, 23, -51, -40, -41, -3, 23, -50,
	-38, -37, -36, 23, 18, -49, 19, 19, 23, -3,
	-33, 21, -48, -47, -46, -46, -46, -46, -46, -46,
	-45, -45, -45, -44, -44, -43, -43, -43, 35, 20,
	-7, 35, 23, -3, 35, 37, 25, 20, 47, -57,
	23, 20, -64, 18, -26, -40, -26, -40, -28, 22,
	18, 25, 19, 47, 20, -36, 35, 17, -30, 20,
	-31, 19, -30, 20, 19, 19, 35, 35, -25, 23,
	-29, -66, -65, 31, -67, 20, -57, -26, -26, 20,
	-31, -28, -53, 35, -35, -36, 23, 7, -3, 25,
	20, -30, 20, -34, 20, -34, 20, 35, 47, 35,
	35, -66, -67, 30, 19, -65, -66, 20, 25, 18,
	18, 25, 26, -31, 20, 20, 20, -29, 35, -53,
	-64, 20, -66, 35, 35, 23, -36, 23, 19, 20,
	35, 18, 18, -64, 20, 20,
}

var yyDef = [...]int{
	0, -2, 1, 3, 4, 5, 6, 7, 0, 0,
	0, 0, 0, 0, 2, 0, 0, 29, 30, 0,
	0, 0, 0, 0, 17, 0, 15, 0, 0, 0,
	0, 41, 42, 0, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 0, 21, 0,
	0, 19, 0, 23, 24, 0, 16, 0, 0, 8,
	0, 0, 0, 39, 0, 0, 0, 0, 43, 44,
	0, 31, 22, 0, 0, 195, 197, 198, 0, 184,
	185, 186, 187, 188, 189, 92, 0, 0, 199, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 164, 130,
	160, 0, 121, 0, 0, 158, 125, 126, 127, 128,
	129, 111, 0, 156, 0, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 0, 107, 108,
	154, 0, 0, 152, 150, 148, 141, 137, 134, 20,
	0, 26, 10, 0, 0, 0, 183, 92, 38, 0,
	37, 32, 33, 40, 66, 46, 45, 0, 193, 0,
	196, 0, 60, 0, 0, 180, 130, 121, 0, 92,
	0, 0, 200, 0, 0, 0, 0, 0, 0, 221,
	222, 223, 0, 0, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 124, 92, 0, 0,
	116, 117, 0, 122, 123, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 25, 0, 0, 0, 18, 9, 0, 36, 67,
	194, 0, 0, 0, 190, 0, 0, 192, 179, 0,
	207, 0, 215, 0, 0, 220, 224, 165, 60, 0,
	114, 0, 119, 118, 157, 0, 113, 109, 110, 155,
	0, 89, 0, 0, 106, 153, 0, 0, 0, 0,
	78, 0, 151, 149, 142, 143, 144, 145, 146, 147,
	138, 139, 140, 135, 136, 131, 132, 133, 11, 0,
	0, 13, 34, 35, 181, 0, 0, 161, 0, 191,
	118, 0, 0, 0, 216, 0, 218, 0, 0, 112,
	115, 0, 60, 0, 93, 0, 86, 0, 0, 71,
	63, 0, 0, 73, 0, 0, 12, 14, 0, 0,
	61, 0, 0, 0, 211, 0, 208, 217, 219, 162,
	120, 0, 159, 87, 0, 0, 79, 80, 0, 0,
	70, 0, 72, 0, 75, 0, 77, 182, 0, 203,
	205, 0, 212, 0, 0, 0, 0, 163, 0, 83,
	84, 0, 0, 65, 64, 74, 76, 62, 206, 0,
	0, 214, 0, 204, 202, 0, 0, 81, 0, 213,
	201, 82, 85, 0, 210, 209,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 146,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 8:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:177
		{
			actions.DeclareGlobalInPackage(Program, nil, yyDollar[2].argument, yyDollar[3].argument, nil, false)
		}
	case 9:
		yyDollar = yyS[yypt-6 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:181
		{
			actions.DeclareGlobalInPackage(Program, nil, yyDollar[2].argument, yyDollar[3].argument, nil, false)
		}
	case 10:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:188
		{
			actions.DeclareStruct(Program, yyDollar[2].tok, yyDollar[4].arguments)
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:195
		{
			yyVAL.arguments = nil
		}
	case 12:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:197
		{
			yyVAL.arguments = yyDollar[2].arguments
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:201
		{
			yyVAL.arguments = []*ast.CXArgument{yyDollar[1].argument}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:205
		{
			yyVAL.arguments = append(yyDollar[1].arguments, yyDollar[2].argument)
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:212
		{
			actions.DeclarePackage(Program, yyDollar[2].tok)
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:219
		{
			actions.DeclareImport(Program, yyDollar[2].tok, CurrentFileName, lineNo)
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:226
		{
			if pkg, err := Program.GetCurrentPackage(); err == nil {
				fn := ast.MakeFunction(yyDollar[2].tok, CurrentFileName, lineNo)
				_, fnIdx := pkg.AddFunction(Program, fn)
				pkg.CurrentFunction = fnIdx

				yyVAL.functionIndex = fnIdx
			} else {
				panic(err)
			}
		}
	case 18:
		yyDollar = yyS[yypt-5 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:238
		{
			if len(yyDollar[3].arguments) > 1 {
				panic("method has multiple receivers")
			}

			fnName := yyDollar[3].arguments[0].StructType.Name + "." + yyDollar[5].tok

			if pkg, err := Program.GetCurrentPackage(); err == nil {
				fn := ast.MakeFunction(fnName, CurrentFileName, lineNo)
				_, fnIdx := pkg.AddFunction(Program, fn)
				newFn := Program.GetFunctionFromArray(fnIdx)
				newFn.AddInput(Program, yyDollar[3].arguments[0])

				pkg.CurrentFunction = fnIdx

				yyVAL.functionIndex = fnIdx
			} else {
				panic(err)
			}
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:262
		{
			yyVAL.arguments = nil
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:264
		{
			yyVAL.arguments = yyDollar[2].arguments
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:269
		{
			PreFunctionDeclaration(yyDollar[1].functionIndex, yyDollar[2].arguments, nil)
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:273
		{
			PreFunctionDeclaration(yyDollar[1].functionIndex, yyDollar[2].arguments, yyDollar[3].arguments)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:285
		{
			yyVAL.arguments = []*ast.CXArgument{yyDollar[1].argument}
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:289
		{
			yyVAL.arguments = append(yyDollar[1].arguments, yyDollar[3].argument)
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:296
		{
			yyDollar[2].argument.Name = yyDollar[1].argument.Name
			yyDollar[2].argument.Package = yyDollar[1].argument.Package

			yyVAL.argument = yyDollar[2].argument
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:314
		{
			if pkg, err := Program.GetCurrentPackage(); err == nil {
				arg := ast.MakeArgument("", actions.CurrentFile, actions.LineNo)
				arg.SetType(types.UNDEFINED)
				arg.Name = yyDollar[1].tok
				arg.Package = ast.CXPackageIndex(pkg.Index)
				yyVAL.argument = arg
			} else {
				panic(err)
			}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:326
		{
			yyVAL.argument = yyDollar[2].argument
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:330
		{
			arg := actions.DeclarationSpecifiersStruct(Program, yyDollar[1].tok, "", false, actions.CurrentFile, actions.LineNo)
			yyVAL.arguments = []*ast.CXArgument{arg}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:335
		{
			arg := actions.DeclarationSpecifiersBasic(types.Code(yyDollar[1].i))
			yyVAL.arguments = []*ast.CXArgument{arg}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:340
		{
			arg := actions.DeclarationSpecifiersStruct(Program, yyDollar[3].tok, "", false, actions.CurrentFile, actions.LineNo)
			yyVAL.arguments = append(yyDollar[1].arguments, arg)
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:345
		{
			arg := actions.DeclarationSpecifiersBasic(types.Code(yyDollar[3].i))
			yyVAL.arguments = append(yyDollar[1].arguments, arg)
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:353
		{
			yyVAL.arguments = yyDollar[2].arguments
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:357
		{
			yyVAL.arguments = nil
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:364
		{
			arg := ast.MakeArgument("", actions.CurrentFile, actions.LineNo).SetType(types.FUNC)
			arg.Inputs = Program.AddPointerArgsToCXArgsArray(yyDollar[2].arguments)
			arg.Outputs = Program.AddPointerArgsToCXArgsArray(yyDollar[3].arguments)
			yyVAL.argument = actions.DeclarationSpecifiers(arg, []types.Pointer{0}, constants.DECL_FUNC)
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:371
		{
			yyVAL.argument = actions.DeclarationSpecifiers(yyDollar[2].argument, []types.Pointer{0}, constants.DECL_POINTER)
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:379
		{
			yyVAL.argument = actions.DeclarationSpecifiers(yyDollar[3].argument, []types.Pointer{0}, constants.DECL_SLICE)
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:383
		{
			yyVAL.argument = actions.DeclarationSpecifiersBasic(types.Code(yyDollar[1].i))
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:387
		{
			yyVAL.argument = actions.DeclarationSpecifiersStruct(Program, yyDollar[1].tok, "", false, CurrentFileName, lineNo)
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:391
		{
			basic := actions.DeclarationSpecifiersBasic(types.Code(yyDollar[2].i))
			yyVAL.argument = actions.DeclarationSpecifiers(basic, types.Cast_sint_to_sptr(yyDollar[1].ints), constants.DECL_ARRAY)
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:396
		{
			strct := actions.DeclarationSpecifiersStruct(Program, yyDollar[2].tok, "", false, actions.CurrentFile, actions.LineNo)
			yyVAL.argument = actions.DeclarationSpecifiers(strct, types.Cast_sint_to_sptr(yyDollar[1].ints), constants.DECL_ARRAY)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:401
		{
			yyVAL.argument = actions.DeclarationSpecifiersStruct(Program, yyDollar[3].tok, yyDollar[1].tok, true, CurrentFileName, lineNo)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:405
		{
			yyVAL.argument = actions.DeclarationSpecifiersStruct(Program, yyDollar[3].tok, types.Code(yyDollar[1].i).Name(), true, CurrentFileName, lineNo)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:416
		{
			yyVAL.i = int(types.AFF)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:418
		{
			yyVAL.i = int(types.BOOL)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:420
		{
			yyVAL.i = int(types.STR)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:422
		{
			yyVAL.i = int(types.F32)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:424
		{
			yyVAL.i = int(types.F64)
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:426
		{
			yyVAL.i = int(types.I8)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:428
		{
			yyVAL.i = int(types.I16)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:430
		{
			yyVAL.i = int(types.I32)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:432
		{
			yyVAL.i = int(types.I64)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:434
		{
			yyVAL.i = int(types.UI8)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:436
		{
			yyVAL.i = int(types.UI16)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:438
		{
			yyVAL.i = int(types.UI32)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:440
		{
			yyVAL.i = int(types.UI64)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:468
		{
			yyVAL.ints = []int{int(yyDollar[2].i32)}
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:472
		{
			yyVAL.ints = append(yyDollar[1].ints, int(yyDollar[3].i32))
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:479
		{
			yyVAL.ints = []int{0}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:483
		{
			yyVAL.ints = append(yyDollar[1].ints, 0)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:545
		{
			yyVAL.i32 = yyDollar[1].i32
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxpartialparsing/cxpartialparsing.y:549
		{
			yyVAL.i32 = -yyDollar[2].i32
		}
	}
	goto yystack /* stack new state and value */
}
