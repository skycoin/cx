// Code generated by goyacc - DO NOT EDIT.

package parsingcompletor

import __yyfmt__ "fmt"

import (
	"github.com/skycoin/cx/cx/ast"
	"github.com/skycoin/cx/cx/constants"
	"github.com/skycoin/cx/cx/types"
	"github.com/skycoin/cx/cxparser/actions"
	"github.com/skycoin/skycoin/src/cipher/encoder"
	"strconv"
)

/*
This is a machine generated file
parsingcompletor.go is is generated by GOYACC from parsingcompletor.y

build-parser: ## Generate lexer and parser for CX grammar
  	./bin/goyacc -o cxparser/cxpartialparsing/partialparsing.go cxparser/cxpartialparsing/partialparsing.y
	./bin/goyacc -o cxparser/cxparsingcompletor/parsingcompletor.go cxparser/cxparsingcompletor/parsingcompletor.y

- parsingcompletor.go is output
- cxparser/cxparsingcompletor/parsingcompletor.y is input
*/

// var actions.AST = MakeProgram(CALLSTACK_SIZE, STACK_SIZE, INIT_HEAP_SIZE)

func Parse(lexer *Lexer) int {
	return yyParse(lexer)
}

type yySymType struct {
	yys     int
	i       int
	i8      int8
	i16     int16
	i32     int32
	i64     int64
	ui8     uint8
	ui16    uint16
	ui32    uint32
	ui64    uint64
	f32     float32
	f64     float64
	tok     string
	bool    bool
	string  string
	stringA []string
	ints    []int

	line int

	argument  *ast.CXArgument
	arguments []*ast.CXArgument

	expression  *ast.CXExpression
	expressions []*ast.CXExpression

	SelectStatement  actions.SelectStatement
	SelectStatements []actions.SelectStatement

	ReturnExpressions actions.ReturnExpressions

	arrayArguments [][]*ast.CXExpression

	function *ast.CXFunction
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault              = 57487
	yyEofCode              = 57344
	ADDR                   = 57486
	ADD_ASSIGN             = 57439
	ADD_OP                 = 57399
	AFF                    = 57481
	AFFVAR                 = 57406
	AND                    = 57397
	AND_ASSIGN             = 57440
	AND_OP                 = 57437
	ASSIGN                 = 57379
	BASICTYPE              = 57470
	BITANDEQ               = 57425
	BITCLEAR_OP            = 57416
	BITOREQ                = 57427
	BITOR_OP               = 57415
	BITXOREQ               = 57426
	BITXOR_OP              = 57414
	BOOL                   = 57449
	BOOLEAN_LITERAL        = 57346
	BREAK                  = 57467
	BYTE_LITERAL           = 57347
	CAFF                   = 57482
	CASE                   = 57464
	CASSIGN                = 57380
	CLAUSES                = 57475
	COLON                  = 57389
	COMMA                  = 57367
	COMMENT                = 57369
	CONST                  = 57463
	CONTINUE               = 57468
	DEC_OP                 = 57428
	DEF                    = 57472
	DEFAULT                = 57465
	DIVEQ                  = 57420
	DIV_ASSIGN             = 57444
	DIV_OP                 = 57402
	DOUBLE_LITERAL         = 57356
	DPROGRAM               = 57479
	DSTACK                 = 57478
	DSTATE                 = 57480
	ELSE                   = 57373
	ENUM                   = 57462
	EQUAL                  = 57388
	EQUALWORD              = 57391
	EQ_OP                  = 57435
	EXP                    = 57412
	EXPEQ                  = 57422
	EXPR                   = 57473
	F32                    = 57450
	F64                    = 57451
	FIELD                  = 57474
	FLOAT_LITERAL          = 57355
	FOR                    = 57374
	FUNC                   = 57357
	GE_OP                  = 57433
	GOTO                   = 57383
	GTEQ_OP                = 57386
	GTHANEQ                = 57394
	GTHANWORD              = 57392
	GT_OP                  = 57384
	I16                    = 57453
	I32                    = 57454
	I64                    = 57455
	I8                     = 57452
	IDENTIFIER             = 57365
	IF                     = 57372
	IMPORT                 = 57381
	INC_OP                 = 57429
	INFER                  = 57484
	INT_LITERAL            = 57349
	LBRACE                 = 57361
	LBRACK                 = 57363
	LEFTSHIFT              = 57410
	LEFTSHIFTEQ            = 57423
	LEFT_ASSIGN            = 57441
	LEFT_OP                = 57431
	LE_OP                  = 57434
	LONG_LITERAL           = 57350
	LPAREN                 = 57359
	LTEQ_OP                = 57387
	LTHANEQ                = 57395
	LTHANWORD              = 57393
	LT_OP                  = 57385
	MINUSEQ                = 57418
	MINUSMINUS             = 57408
	MOD_ASSIGN             = 57442
	MOD_OP                 = 57403
	MULTEQ                 = 57419
	MUL_ASSIGN             = 57443
	MUL_OP                 = 57401
	NEG_OP                 = 57405
	NEW                    = 57390
	NEWLINE                = 57378
	NE_OP                  = 57436
	NOT                    = 57413
	OBJECT                 = 57476
	OBJECTS                = 57477
	OP                     = 57358
	OR                     = 57398
	OR_ASSIGN              = 57445
	OR_OP                  = 57438
	PACKAGE                = 57371
	PERIOD                 = 57368
	PLUSEQ                 = 57417
	PLUSPLUS               = 57407
	PTR_OP                 = 57430
	RBRACE                 = 57362
	RBRACK                 = 57364
	REF_OP                 = 57404
	REM                    = 57471
	REMAINDER              = 57409
	REMAINDEREQ            = 57421
	RETURN                 = 57382
	RIGHTSHIFT             = 57411
	RIGHTSHIFTEQ           = 57424
	RIGHT_ASSIGN           = 57446
	RIGHT_OP               = 57432
	RPAREN                 = 57360
	SEMICOLON              = 57377
	SHORT_LITERAL          = 57348
	STR                    = 57456
	STRING_LITERAL         = 57370
	STRUCT                 = 57376
	SUB_ASSIGN             = 57447
	SUB_OP                 = 57400
	SWITCH                 = 57466
	TAG                    = 57483
	TYPE                   = 57469
	TYPSTRUCT              = 57375
	UI16                   = 57458
	UI32                   = 57459
	UI64                   = 57460
	UI8                    = 57457
	UNEQUAL                = 57396
	UNION                  = 57461
	UNSIGNED_BYTE_LITERAL  = 57351
	UNSIGNED_INT_LITERAL   = 57353
	UNSIGNED_LONG_LITERAL  = 57354
	UNSIGNED_SHORT_LITERAL = 57352
	VALUE                  = 57485
	VAR                    = 57366
	XOR_ASSIGN             = 57448
	yyErrCode              = 57345

	yyMaxDepth = 200
	yyTabOfs   = -230
)

var (
	yyPrec = map[int]int{
		IDENTIFIER: 0,
		LBRACE:     0,
	}

	yyXLAT = map[int]int{
		57377: 0,   // SEMICOLON (206x)
		57404: 1,   // REF_OP (200x)
		57359: 2,   // LPAREN (199x)
		57401: 3,   // MUL_OP (193x)
		57400: 4,   // SUB_OP (190x)
		57399: 5,   // ADD_OP (189x)
		57363: 6,   // LBRACK (187x)
		57428: 7,   // DEC_OP (174x)
		57429: 8,   // INC_OP (174x)
		57362: 9,   // RBRACE (172x)
		57365: 10,  // IDENTIFIER (166x)
		57361: 11,  // LBRACE (165x)
		57367: 12,  // COMMA (159x)
		57357: 13,  // FUNC (145x)
		57360: 14,  // RPAREN (145x)
		57481: 15,  // AFF (135x)
		57449: 16,  // BOOL (135x)
		57450: 17,  // F32 (135x)
		57451: 18,  // F64 (135x)
		57453: 19,  // I16 (135x)
		57454: 20,  // I32 (135x)
		57455: 21,  // I64 (135x)
		57452: 22,  // I8 (135x)
		57456: 23,  // STR (135x)
		57458: 24,  // UI16 (135x)
		57459: 25,  // UI32 (135x)
		57460: 26,  // UI64 (135x)
		57457: 27,  // UI8 (135x)
		57349: 28,  // INT_LITERAL (123x)
		57370: 29,  // STRING_LITERAL (120x)
		57346: 30,  // BOOLEAN_LITERAL (118x)
		57347: 31,  // BYTE_LITERAL (118x)
		57356: 32,  // DOUBLE_LITERAL (118x)
		57355: 33,  // FLOAT_LITERAL (118x)
		57484: 34,  // INFER (118x)
		57350: 35,  // LONG_LITERAL (118x)
		57405: 36,  // NEG_OP (118x)
		57348: 37,  // SHORT_LITERAL (118x)
		57351: 38,  // UNSIGNED_BYTE_LITERAL (118x)
		57353: 39,  // UNSIGNED_INT_LITERAL (118x)
		57354: 40,  // UNSIGNED_LONG_LITERAL (118x)
		57352: 41,  // UNSIGNED_SHORT_LITERAL (118x)
		57389: 42,  // COLON (104x)
		57364: 43,  // RBRACK (103x)
		63:    44,  // '?' (89x)
		57438: 45,  // OR_OP (89x)
		57437: 46,  // AND_OP (88x)
		57415: 47,  // BITOR_OP (86x)
		57414: 48,  // BITXOR_OP (84x)
		57435: 49,  // EQ_OP (80x)
		57384: 50,  // GT_OP (80x)
		57386: 51,  // GTEQ_OP (80x)
		57385: 52,  // LT_OP (80x)
		57387: 53,  // LTEQ_OP (80x)
		57436: 54,  // NE_OP (80x)
		57416: 55,  // BITCLEAR_OP (78x)
		57431: 56,  // LEFT_OP (78x)
		57432: 57,  // RIGHT_OP (78x)
		57554: 58,  // type_specifier (74x)
		57379: 59,  // ASSIGN (73x)
		57479: 60,  // DPROGRAM (70x)
		57381: 61,  // IMPORT (70x)
		57402: 62,  // DIV_OP (67x)
		57521: 63,  // indexing_literal (67x)
		57403: 64,  // MOD_OP (67x)
		57366: 65,  // VAR (67x)
		57546: 66,  // slice_literal_expression (63x)
		57492: 67,  // array_literal_expression (62x)
		57539: 68,  // postfix_expression (62x)
		57540: 69,  // primary_expression (62x)
		57556: 70,  // unary_expression (62x)
		57557: 71,  // unary_operator (62x)
		57439: 72,  // ADD_ASSIGN (60x)
		57440: 73,  // AND_ASSIGN (60x)
		57380: 74,  // CASSIGN (60x)
		57444: 75,  // DIV_ASSIGN (60x)
		57441: 76,  // LEFT_ASSIGN (60x)
		57442: 77,  // MOD_ASSIGN (60x)
		57443: 78,  // MUL_ASSIGN (60x)
		57445: 79,  // OR_ASSIGN (60x)
		57368: 80,  // PERIOD (60x)
		57446: 81,  // RIGHT_ASSIGN (60x)
		57447: 82,  // SUB_ASSIGN (60x)
		57448: 83,  // XOR_ASSIGN (60x)
		57534: 84,  // multiplicative_expression (55x)
		57488: 85,  // additive_expression (53x)
		57372: 86,  // IF (52x)
		57467: 87,  // BREAK (51x)
		57464: 88,  // CASE (51x)
		57468: 89,  // CONTINUE (51x)
		57465: 90,  // DEFAULT (51x)
		57374: 91,  // FOR (51x)
		57383: 92,  // GOTO (51x)
		57382: 93,  // RETURN (51x)
		57466: 94,  // SWITCH (51x)
		57545: 95,  // shift_expression (50x)
		57541: 96,  // relational_expression (44x)
		57490: 97,  // and_expression (43x)
		57509: 98,  // exclusive_or_expression (42x)
		57520: 99,  // inclusive_or_expression (41x)
		57532: 100, // logical_and_expression (40x)
		57499: 101, // conditional_expression (39x)
		57533: 102, // logical_or_expression (39x)
		57551: 103, // struct_literal_expression (33x)
		57494: 104, // assignment_expression (31x)
		57371: 105, // PACKAGE (22x)
		57469: 106, // TYPE (22x)
		57344: 107, // $end (21x)
		57510: 108, // expression (19x)
		57498: 109, // compound_statement (18x)
		57501: 110, // debugging (14x)
		57511: 111, // expression_statement (14x)
		57529: 112, // iteration_statement (12x)
		57530: 113, // jump_statement (12x)
		57531: 114, // labeled_statement (12x)
		57543: 115, // selection_statement (12x)
		57544: 116, // selector (12x)
		57548: 117, // statement (12x)
		57496: 118, // block_item (9x)
		57502: 119, // declaration (9x)
		57504: 120, // declarator (8x)
		57505: 121, // direct_declarator (8x)
		57373: 122, // ELSE (8x)
		57503: 123, // declaration_specifiers (5x)
		57536: 124, // parameter_declaration (5x)
		57497: 125, // block_item_list (4x)
		57506: 126, // else_statement (4x)
		57507: 127, // elseif (4x)
		57523: 128, // infer_action (4x)
		57500: 129, // constant_expression (3x)
		57552: 130, // struct_literal_fields (3x)
		57493: 131, // array_literal_expression_list (2x)
		57508: 132, // elseif_list (2x)
		57512: 133, // external_declaration (2x)
		57514: 134, // function_declaration (2x)
		57515: 135, // function_header (2x)
		57516: 136, // function_parameters (2x)
		57517: 137, // global_declaration (2x)
		57519: 138, // import_declaration (2x)
		57527: 139, // initializer (2x)
		57535: 140, // package_declaration (2x)
		57537: 141, // parameter_list (2x)
		57538: 142, // parameter_type_list (2x)
		57547: 143, // slice_literal_expression_list (2x)
		57549: 144, // struct_declaration (2x)
		57555: 145, // types_list (2x)
		57489: 146, // after_period (1x)
		57491: 147, // argument_expression_list (1x)
		57495: 148, // assignment_operator (1x)
		57513: 149, // fields (1x)
		57518: 150, // id_list (1x)
		57524: 151, // infer_action_arg (1x)
		57525: 152, // infer_actions (1x)
		57526: 153, // infer_clauses (1x)
		57528: 154, // int_value (1x)
		57542: 155, // return_expression (1x)
		57376: 156, // STRUCT (1x)
		57550: 157, // struct_fields (1x)
		57553: 158, // translation_unit (1x)
		57487: 159, // $default (0x)
		57486: 160, // ADDR (0x)
		57406: 161, // AFFVAR (0x)
		57397: 162, // AND (0x)
		57470: 163, // BASICTYPE (0x)
		57425: 164, // BITANDEQ (0x)
		57427: 165, // BITOREQ (0x)
		57426: 166, // BITXOREQ (0x)
		57482: 167, // CAFF (0x)
		57475: 168, // CLAUSES (0x)
		57369: 169, // COMMENT (0x)
		57463: 170, // CONST (0x)
		57472: 171, // DEF (0x)
		57420: 172, // DIVEQ (0x)
		57478: 173, // DSTACK (0x)
		57480: 174, // DSTATE (0x)
		57462: 175, // ENUM (0x)
		57388: 176, // EQUAL (0x)
		57391: 177, // EQUALWORD (0x)
		57345: 178, // error (0x)
		57412: 179, // EXP (0x)
		57422: 180, // EXPEQ (0x)
		57473: 181, // EXPR (0x)
		57474: 182, // FIELD (0x)
		57433: 183, // GE_OP (0x)
		57394: 184, // GTHANEQ (0x)
		57392: 185, // GTHANWORD (0x)
		57522: 186, // indexing_slice_literal (0x)
		57434: 187, // LE_OP (0x)
		57410: 188, // LEFTSHIFT (0x)
		57423: 189, // LEFTSHIFTEQ (0x)
		57395: 190, // LTHANEQ (0x)
		57393: 191, // LTHANWORD (0x)
		57418: 192, // MINUSEQ (0x)
		57408: 193, // MINUSMINUS (0x)
		57419: 194, // MULTEQ (0x)
		57390: 195, // NEW (0x)
		57378: 196, // NEWLINE (0x)
		57413: 197, // NOT (0x)
		57476: 198, // OBJECT (0x)
		57477: 199, // OBJECTS (0x)
		57358: 200, // OP (0x)
		57398: 201, // OR (0x)
		57417: 202, // PLUSEQ (0x)
		57407: 203, // PLUSPLUS (0x)
		57430: 204, // PTR_OP (0x)
		57471: 205, // REM (0x)
		57409: 206, // REMAINDER (0x)
		57421: 207, // REMAINDEREQ (0x)
		57411: 208, // RIGHTSHIFT (0x)
		57424: 209, // RIGHTSHIFTEQ (0x)
		57483: 210, // TAG (0x)
		57375: 211, // TYPSTRUCT (0x)
		57396: 212, // UNEQUAL (0x)
		57461: 213, // UNION (0x)
		57485: 214, // VALUE (0x)
	}

	yySymNames = []string{
		"SEMICOLON",
		"REF_OP",
		"LPAREN",
		"MUL_OP",
		"SUB_OP",
		"ADD_OP",
		"LBRACK",
		"DEC_OP",
		"INC_OP",
		"RBRACE",
		"IDENTIFIER",
		"LBRACE",
		"COMMA",
		"FUNC",
		"RPAREN",
		"AFF",
		"BOOL",
		"F32",
		"F64",
		"I16",
		"I32",
		"I64",
		"I8",
		"STR",
		"UI16",
		"UI32",
		"UI64",
		"UI8",
		"INT_LITERAL",
		"STRING_LITERAL",
		"BOOLEAN_LITERAL",
		"BYTE_LITERAL",
		"DOUBLE_LITERAL",
		"FLOAT_LITERAL",
		"INFER",
		"LONG_LITERAL",
		"NEG_OP",
		"SHORT_LITERAL",
		"UNSIGNED_BYTE_LITERAL",
		"UNSIGNED_INT_LITERAL",
		"UNSIGNED_LONG_LITERAL",
		"UNSIGNED_SHORT_LITERAL",
		"COLON",
		"RBRACK",
		"'?'",
		"OR_OP",
		"AND_OP",
		"BITOR_OP",
		"BITXOR_OP",
		"EQ_OP",
		"GT_OP",
		"GTEQ_OP",
		"LT_OP",
		"LTEQ_OP",
		"NE_OP",
		"BITCLEAR_OP",
		"LEFT_OP",
		"RIGHT_OP",
		"type_specifier",
		"ASSIGN",
		"DPROGRAM",
		"IMPORT",
		"DIV_OP",
		"indexing_literal",
		"MOD_OP",
		"VAR",
		"slice_literal_expression",
		"array_literal_expression",
		"postfix_expression",
		"primary_expression",
		"unary_expression",
		"unary_operator",
		"ADD_ASSIGN",
		"AND_ASSIGN",
		"CASSIGN",
		"DIV_ASSIGN",
		"LEFT_ASSIGN",
		"MOD_ASSIGN",
		"MUL_ASSIGN",
		"OR_ASSIGN",
		"PERIOD",
		"RIGHT_ASSIGN",
		"SUB_ASSIGN",
		"XOR_ASSIGN",
		"multiplicative_expression",
		"additive_expression",
		"IF",
		"BREAK",
		"CASE",
		"CONTINUE",
		"DEFAULT",
		"FOR",
		"GOTO",
		"RETURN",
		"SWITCH",
		"shift_expression",
		"relational_expression",
		"and_expression",
		"exclusive_or_expression",
		"inclusive_or_expression",
		"logical_and_expression",
		"conditional_expression",
		"logical_or_expression",
		"struct_literal_expression",
		"assignment_expression",
		"PACKAGE",
		"TYPE",
		"$end",
		"expression",
		"compound_statement",
		"debugging",
		"expression_statement",
		"iteration_statement",
		"jump_statement",
		"labeled_statement",
		"selection_statement",
		"selector",
		"statement",
		"block_item",
		"declaration",
		"declarator",
		"direct_declarator",
		"ELSE",
		"declaration_specifiers",
		"parameter_declaration",
		"block_item_list",
		"else_statement",
		"elseif",
		"infer_action",
		"constant_expression",
		"struct_literal_fields",
		"array_literal_expression_list",
		"elseif_list",
		"external_declaration",
		"function_declaration",
		"function_header",
		"function_parameters",
		"global_declaration",
		"import_declaration",
		"initializer",
		"package_declaration",
		"parameter_list",
		"parameter_type_list",
		"slice_literal_expression_list",
		"struct_declaration",
		"types_list",
		"after_period",
		"argument_expression_list",
		"assignment_operator",
		"fields",
		"id_list",
		"infer_action_arg",
		"infer_actions",
		"infer_clauses",
		"int_value",
		"return_expression",
		"STRUCT",
		"struct_fields",
		"translation_unit",
		"$default",
		"ADDR",
		"AFFVAR",
		"AND",
		"BASICTYPE",
		"BITANDEQ",
		"BITOREQ",
		"BITXOREQ",
		"CAFF",
		"CLAUSES",
		"COMMENT",
		"CONST",
		"DEF",
		"DIVEQ",
		"DSTACK",
		"DSTATE",
		"ENUM",
		"EQUAL",
		"EQUALWORD",
		"error",
		"EXP",
		"EXPEQ",
		"EXPR",
		"FIELD",
		"GE_OP",
		"GTHANEQ",
		"GTHANWORD",
		"indexing_slice_literal",
		"LE_OP",
		"LEFTSHIFT",
		"LEFTSHIFTEQ",
		"LTHANEQ",
		"LTHANWORD",
		"MINUSEQ",
		"MINUSMINUS",
		"MULTEQ",
		"NEW",
		"NEWLINE",
		"NOT",
		"OBJECT",
		"OBJECTS",
		"OP",
		"OR",
		"PLUSEQ",
		"PLUSPLUS",
		"PTR_OP",
		"REM",
		"REMAINDER",
		"REMAINDEREQ",
		"RIGHTSHIFT",
		"RIGHTSHIFTEQ",
		"TAG",
		"TYPSTRUCT",
		"UNEQUAL",
		"UNION",
		"VALUE",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {158, 1},
		2:   {158, 2},
		3:   {133, 1},
		4:   {133, 1},
		5:   {133, 1},
		6:   {133, 1},
		7:   {133, 1},
		8:   {133, 1},
		9:   {110, 1},
		10:  {116, 4},
		11:  {137, 4},
		12:  {137, 6},
		13:  {144, 4},
		14:  {157, 3},
		15:  {157, 4},
		16:  {149, 2},
		17:  {149, 3},
		18:  {140, 3},
		19:  {138, 3},
		20:  {135, 2},
		21:  {135, 5},
		22:  {136, 2},
		23:  {136, 3},
		24:  {134, 3},
		25:  {134, 4},
		26:  {142, 1},
		27:  {141, 1},
		28:  {141, 3},
		29:  {124, 2},
		30:  {120, 1},
		31:  {121, 1},
		32:  {121, 3},
		33:  {150, 1},
		34:  {150, 1},
		35:  {150, 3},
		36:  {150, 3},
		37:  {145, 3},
		38:  {145, 2},
		39:  {123, 3},
		40:  {123, 2},
		41:  {123, 3},
		42:  {123, 1},
		43:  {123, 1},
		44:  {123, 2},
		45:  {123, 2},
		46:  {123, 3},
		47:  {123, 3},
		48:  {58, 1},
		49:  {58, 1},
		50:  {58, 1},
		51:  {58, 1},
		52:  {58, 1},
		53:  {58, 1},
		54:  {58, 1},
		55:  {58, 1},
		56:  {58, 1},
		57:  {58, 1},
		58:  {58, 1},
		59:  {58, 1},
		60:  {58, 1},
		61:  {130, 0},
		62:  {130, 3},
		63:  {130, 5},
		64:  {131, 1},
		65:  {131, 3},
		66:  {63, 3},
		67:  {63, 4},
		68:  {186, 2},
		69:  {186, 3},
		70:  {67, 5},
		71:  {67, 4},
		72:  {67, 5},
		73:  {67, 4},
		74:  {143, 1},
		75:  {143, 3},
		76:  {66, 6},
		77:  {66, 5},
		78:  {66, 6},
		79:  {66, 5},
		80:  {66, 3},
		81:  {151, 1},
		82:  {151, 1},
		83:  {151, 3},
		84:  {128, 6},
		85:  {128, 4},
		86:  {128, 4},
		87:  {128, 6},
		88:  {152, 2},
		89:  {152, 3},
		90:  {153, 0},
		91:  {153, 1},
		92:  {154, 1},
		93:  {154, 2},
		94:  {69, 1},
		95:  {69, 3},
		96:  {69, 4},
		97:  {69, 1},
		98:  {69, 1},
		99:  {69, 1},
		100: {69, 1},
		101: {69, 1},
		102: {69, 1},
		103: {69, 1},
		104: {69, 1},
		105: {69, 1},
		106: {69, 1},
		107: {69, 1},
		108: {69, 1},
		109: {69, 3},
		110: {69, 1},
		111: {69, 1},
		112: {146, 1},
		113: {146, 1},
		114: {68, 1},
		115: {68, 4},
		116: {68, 3},
		117: {68, 3},
		118: {68, 4},
		119: {68, 2},
		120: {68, 2},
		121: {68, 3},
		122: {147, 1},
		123: {147, 3},
		124: {70, 1},
		125: {70, 2},
		126: {70, 2},
		127: {70, 2},
		128: {71, 1},
		129: {71, 1},
		130: {71, 1},
		131: {71, 1},
		132: {71, 1},
		133: {84, 1},
		134: {84, 3},
		135: {84, 3},
		136: {84, 3},
		137: {85, 1},
		138: {85, 3},
		139: {85, 3},
		140: {95, 1},
		141: {95, 3},
		142: {95, 3},
		143: {95, 3},
		144: {96, 1},
		145: {96, 3},
		146: {96, 3},
		147: {96, 3},
		148: {96, 3},
		149: {96, 3},
		150: {96, 3},
		151: {97, 1},
		152: {97, 3},
		153: {98, 1},
		154: {98, 3},
		155: {99, 1},
		156: {99, 3},
		157: {100, 1},
		158: {100, 3},
		159: {102, 1},
		160: {102, 3},
		161: {101, 1},
		162: {101, 5},
		163: {103, 1},
		164: {103, 4},
		165: {103, 5},
		166: {103, 6},
		167: {104, 1},
		168: {104, 3},
		169: {148, 1},
		170: {148, 1},
		171: {148, 1},
		172: {148, 1},
		173: {148, 1},
		174: {148, 1},
		175: {148, 1},
		176: {148, 1},
		177: {148, 1},
		178: {148, 1},
		179: {148, 1},
		180: {148, 1},
		181: {108, 1},
		182: {108, 3},
		183: {129, 1},
		184: {119, 4},
		185: {119, 6},
		186: {139, 1},
		187: {117, 1},
		188: {117, 1},
		189: {117, 1},
		190: {117, 1},
		191: {117, 1},
		192: {117, 1},
		193: {117, 1},
		194: {117, 1},
		195: {114, 3},
		196: {114, 4},
		197: {114, 3},
		198: {109, 3},
		199: {109, 4},
		200: {125, 1},
		201: {125, 2},
		202: {118, 1},
		203: {118, 1},
		204: {111, 1},
		205: {111, 2},
		206: {115, 8},
		207: {115, 7},
		208: {115, 6},
		209: {115, 7},
		210: {115, 6},
		211: {115, 7},
		212: {115, 3},
		213: {115, 5},
		214: {127, 6},
		215: {127, 5},
		216: {132, 1},
		217: {132, 2},
		218: {126, 4},
		219: {126, 3},
		220: {112, 3},
		221: {112, 4},
		222: {112, 5},
		223: {155, 1},
		224: {155, 3},
		225: {113, 3},
		226: {113, 2},
		227: {113, 2},
		228: {113, 2},
		229: {113, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [418][]uint16{
		// 0
		{13: 244, 60: 239, 243, 65: 240, 105: 242, 241, 110: 238, 133: 232, 235, 245, 137: 234, 236, 140: 233, 144: 237, 158: 231},
		{13: 244, 60: 239, 243, 65: 240, 105: 242, 241, 230, 110: 238, 133: 647, 235, 245, 137: 234, 236, 140: 233, 144: 237},
		{13: 229, 60: 229, 229, 65: 229, 105: 229, 229, 229},
		{13: 227, 60: 227, 227, 65: 227, 105: 227, 227, 227},
		{13: 226, 60: 226, 226, 65: 226, 105: 226, 226, 226},
		// 5
		{13: 225, 60: 225, 225, 65: 225, 105: 225, 225, 225},
		{13: 224, 60: 224, 224, 65: 224, 105: 224, 224, 224},
		{13: 223, 60: 223, 223, 65: 223, 105: 223, 223, 223},
		{13: 222, 60: 222, 222, 65: 222, 105: 222, 222, 222},
		{221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 13: 221, 15: 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 60: 221, 221, 65: 221, 86: 221, 221, 221, 221, 221, 221, 221, 221, 221, 105: 221, 221, 221},
		// 10
		{2: 431, 10: 430, 120: 641, 429},
		{10: 628},
		{10: 626},
		{29: 624},
		{2: 620, 10: 619},
		// 15
		{2: 246, 136: 247},
		{2: 431, 10: 430, 14: 610, 120: 614, 429, 124: 613, 141: 612, 611},
		{2: 246, 11: 250, 109: 248, 136: 249},
		{13: 206, 60: 206, 206, 65: 206, 105: 206, 206, 206},
		{11: 250, 109: 609},
		// 20
		{326, 291, 282, 292, 294, 293, 265, 289, 288, 321, 267, 250, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 60: 239, 251, 63: 266, 65: 310, 284, 283, 286, 285, 296, 290, 84: 297, 298, 327, 332, 319, 331, 320, 329, 330, 333, 328, 299, 300, 301, 302, 303, 304, 306, 305, 307, 308, 108: 309, 312, 317, 313, 315, 318, 311, 314, 316, 325, 323, 324, 125: 322},
		{29: 606},
		{182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 11: 182, 182, 14: 182, 42: 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 59: 182, 62: 182, 64: 182, 72: 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182},
		{181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 11: 181, 181, 14: 181, 42: 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 59: 181, 62: 181, 64: 181, 72: 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181},
		{180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 11: 180, 180, 14: 180, 42: 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 59: 180, 62: 180, 64: 180, 72: 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180},
		// 25
		{179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 11: 179, 179, 14: 179, 42: 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 59: 179, 62: 179, 64: 179, 72: 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179},
		{178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 11: 178, 178, 14: 178, 42: 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 59: 178, 62: 178, 64: 178, 72: 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178},
		{177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 11: 177, 177, 14: 177, 42: 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 59: 177, 62: 177, 64: 177, 72: 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177},
		{176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 11: 176, 176, 14: 176, 42: 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 59: 176, 62: 176, 64: 176, 72: 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176},
		{175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 11: 175, 175, 14: 175, 42: 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 59: 175, 62: 175, 64: 175, 72: 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175},
		// 30
		{174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 11: 174, 174, 14: 174, 42: 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 59: 174, 62: 174, 64: 174, 72: 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174},
		{173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 11: 173, 173, 14: 173, 42: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 59: 173, 62: 173, 64: 173, 72: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173},
		{172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 11: 172, 172, 14: 172, 42: 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 59: 172, 62: 172, 64: 172, 72: 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172},
		{171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 11: 171, 171, 14: 171, 42: 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 59: 171, 62: 171, 64: 171, 72: 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171},
		{170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 11: 170, 170, 14: 170, 42: 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 59: 170, 62: 170, 64: 170, 72: 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170},
		// 35
		{28: 455, 43: 590},
		{6: 447, 10: 577, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 58: 578},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 11: 342, 136, 42: 575, 44: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 59: 136, 62: 136, 64: 136, 72: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136},
		{2: 573},
		{11: 545},
		// 40
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 11: 133, 133, 14: 133, 42: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 59: 133, 62: 133, 64: 133, 72: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133},
		{132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 11: 132, 132, 14: 132, 42: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 59: 132, 62: 132, 64: 132, 72: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132},
		{131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 11: 131, 131, 14: 131, 42: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 59: 131, 62: 131, 64: 131, 72: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131},
		{130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 11: 130, 130, 14: 130, 42: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 59: 130, 62: 130, 64: 130, 72: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130},
		{129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 11: 129, 129, 14: 129, 42: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 59: 129, 62: 129, 64: 129, 72: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129},
		// 45
		{128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 11: 128, 128, 14: 128, 42: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 59: 128, 62: 128, 64: 128, 72: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 11: 127, 127, 14: 127, 42: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 59: 127, 62: 127, 64: 127, 72: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127},
		{126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 11: 126, 126, 14: 126, 42: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 59: 126, 62: 126, 64: 126, 72: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126},
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 11: 125, 125, 14: 125, 42: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 59: 125, 62: 125, 64: 125, 72: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125},
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 11: 124, 124, 14: 124, 42: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 59: 124, 62: 124, 64: 124, 72: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124},
		// 50
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 11: 123, 123, 14: 123, 42: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 59: 123, 62: 123, 64: 123, 72: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123},
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 11: 122, 122, 14: 122, 42: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 59: 122, 62: 122, 64: 122, 72: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 334, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 286, 285, 296, 290, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 306, 305, 307, 308, 108: 543},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 11: 120, 120, 14: 120, 42: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 59: 120, 62: 120, 64: 120, 72: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 11: 119, 119, 14: 119, 42: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 59: 119, 62: 119, 64: 119, 72: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119},
		// 55
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 11: 116, 116, 14: 116, 42: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 59: 116, 62: 116, 64: 116, 72: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116},
		{106, 106, 356, 106, 106, 106, 355, 358, 357, 106, 11: 106, 106, 14: 106, 42: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 59: 106, 62: 106, 64: 106, 72: 106, 106, 106, 106, 106, 106, 106, 106, 538, 106, 106, 106},
		{80: 534},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 533, 352},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 532, 352},
		// 60
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 528, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 354, 352},
		{1: 102, 102, 102, 102, 102, 102, 102, 102, 10: 102, 13: 102, 15: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
		{1: 101, 101, 101, 101, 101, 101, 101, 101, 10: 101, 13: 101, 15: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101},
		{1: 100, 100, 100, 100, 100, 100, 100, 100, 10: 100, 13: 100, 15: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
		{1: 99, 99, 99, 99, 99, 99, 99, 99, 10: 99, 13: 99, 15: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99},
		// 65
		{1: 98, 98, 98, 98, 98, 98, 98, 98, 10: 98, 13: 98, 15: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98},
		{97, 97, 3: 97, 97, 97, 9: 97, 11: 97, 97, 14: 97, 42: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 59: 515, 62: 97, 64: 97, 72: 520, 524, 516, 518, 522, 519, 517, 526, 81: 523, 521, 525, 148: 514},
		{93, 93, 3: 500, 93, 93, 9: 93, 11: 93, 93, 14: 93, 42: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 62: 501, 64: 502},
		{90, 90, 4: 498, 497, 9: 90, 11: 90, 90, 14: 90, 42: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90},
		{86, 86, 9: 86, 11: 86, 86, 14: 86, 42: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 495, 493, 494},
		// 70
		{79, 79, 9: 79, 11: 79, 79, 14: 79, 42: 79, 79, 79, 79, 79, 79, 79, 486, 489, 491, 488, 490, 487},
		{77, 484, 9: 77, 11: 77, 77, 14: 77, 42: 77, 77, 77, 77, 77, 77, 77},
		{75, 9: 75, 11: 75, 75, 14: 75, 42: 75, 75, 75, 75, 75, 75, 482},
		{73, 9: 73, 11: 73, 73, 14: 73, 42: 73, 73, 73, 73, 73, 480},
		{71, 9: 71, 11: 71, 71, 14: 71, 42: 71, 71, 71, 71, 478},
		// 75
		{69, 9: 69, 11: 69, 69, 14: 69, 42: 69, 69, 473, 472},
		{67, 9: 67, 11: 67, 67, 14: 67, 42: 67, 67},
		{63, 9: 63, 11: 63, 63, 14: 63, 42: 63, 63},
		{49, 11: 49, 49, 14: 49, 42: 49, 49},
		{383, 12: 369},
		// 80
		{2: 431, 10: 430, 120: 432, 429},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 13: 43, 15: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 60: 43, 43, 65: 43, 86: 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 13: 42, 15: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 60: 42, 42, 65: 42, 86: 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 13: 41, 15: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 60: 41, 41, 65: 41, 86: 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 13: 40, 15: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 60: 40, 40, 65: 40, 86: 40, 40, 40, 40, 40, 40, 40, 40, 40},
		// 85
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 13: 39, 15: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 60: 39, 39, 65: 39, 86: 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 13: 38, 15: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 60: 38, 38, 65: 38, 86: 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 13: 37, 15: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 60: 37, 37, 65: 37, 86: 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 13: 36, 15: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 60: 36, 36, 65: 36, 86: 36, 36, 36, 36, 36, 36, 36, 36, 36},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 335, 352, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 353, 305, 129: 426},
		// 90
		{42: 424},
		{416},
		{326, 291, 282, 292, 294, 293, 265, 289, 288, 423, 267, 250, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 60: 239, 251, 63: 266, 65: 310, 284, 283, 286, 285, 296, 290, 84: 297, 298, 327, 332, 319, 331, 320, 329, 330, 333, 328, 299, 300, 301, 302, 303, 304, 306, 305, 307, 308, 108: 309, 312, 317, 313, 315, 318, 311, 314, 316, 325, 395, 324},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 13: 30, 15: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 60: 30, 30, 65: 30, 86: 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 13: 28, 15: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 60: 28, 28, 65: 28, 86: 28, 28, 28, 28, 28, 28, 28, 28, 28},
		// 95
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 13: 27, 15: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 60: 27, 27, 65: 27, 86: 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 13: 26, 15: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 60: 26, 26, 65: 26, 86: 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 335, 352, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 389, 305},
		{2: 385},
		{326, 291, 282, 292, 294, 293, 265, 289, 288, 10: 334, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 286, 285, 296, 290, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 306, 305, 307, 308, 108: 377, 111: 378},
		// 100
		{10: 375},
		{374},
		{373},
		{338, 291, 282, 292, 294, 293, 265, 289, 288, 10: 334, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 286, 285, 335, 290, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 306, 305, 336, 155: 337},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 11: 342, 136, 14: 136, 42: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 59: 136, 62: 136, 64: 136, 72: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136},
		// 105
		{97, 97, 3: 97, 97, 97, 9: 97, 11: 97, 97, 14: 97, 42: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 62: 97, 64: 97},
		{7, 12: 7},
		{340, 12: 339},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 13: 2, 15: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 60: 2, 2, 65: 2, 86: 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 334, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 286, 285, 335, 290, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 306, 305, 341},
		// 110
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13: 1, 15: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 60: 1, 1, 65: 1, 86: 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{6, 12: 6},
		{9: 169, 343, 12: 169, 130: 344},
		{42: 371},
		{9: 346, 12: 345},
		// 115
		{10: 347},
		{66, 9: 66, 11: 66, 66, 14: 66, 42: 66, 66},
		{42: 348},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 335, 352, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 353, 305, 129: 349},
		{9: 167, 12: 167},
		// 120
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 11: 136, 136, 14: 136, 42: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 59: 136, 62: 136, 64: 136, 72: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136},
		{106, 106, 356, 106, 106, 106, 355, 358, 357, 106, 11: 106, 106, 14: 106, 42: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 59: 106, 62: 106, 64: 106, 72: 106, 106, 106, 106, 106, 106, 106, 106, 359, 106, 106, 106},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 354, 352},
		{9: 47, 12: 47, 42: 47},
		{103, 103, 3: 103, 103, 103, 9: 103, 11: 103, 103, 14: 103, 42: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 59: 103, 62: 103, 64: 103, 72: 103, 103, 103, 103, 103, 103, 103, 103, 81: 103, 103, 103},
		// 125
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 334, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 286, 285, 296, 290, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 306, 305, 307, 308, 108: 367},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 334, 13: 268, 361, 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 286, 285, 296, 290, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 306, 305, 307, 363, 147: 362},
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 11: 111, 111, 14: 111, 42: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 59: 111, 62: 111, 64: 111, 72: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111},
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 11: 110, 110, 14: 110, 42: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 59: 110, 62: 110, 64: 110, 72: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110},
		{10: 360},
		// 130
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 11: 109, 109, 14: 109, 42: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 59: 109, 62: 109, 64: 109, 72: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 11: 113, 113, 14: 113, 42: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 59: 113, 62: 113, 64: 113, 72: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113},
		{12: 365, 14: 364},
		{12: 108, 14: 108},
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 11: 112, 112, 14: 112, 42: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 59: 112, 62: 112, 64: 112, 72: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112},
		// 135
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 334, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 286, 285, 296, 290, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 306, 305, 307, 366},
		{12: 107, 14: 107},
		{12: 369, 43: 368},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 11: 115, 115, 14: 115, 42: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 59: 115, 62: 115, 64: 115, 72: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 334, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 286, 285, 296, 290, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 306, 305, 307, 370},
		// 140
		{48, 11: 48, 48, 14: 48, 42: 48, 48},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 335, 352, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 353, 305, 129: 372},
		{9: 168, 12: 168},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 13: 3, 15: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 60: 3, 3, 65: 3, 86: 3, 3, 3, 3, 3, 3, 3, 3, 3},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 13: 4, 15: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 60: 4, 4, 65: 4, 86: 4, 4, 4, 4, 4, 4, 4, 4, 4},
		// 145
		{376},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 13: 5, 15: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 60: 5, 5, 65: 5, 86: 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{383, 11: 250, 369, 109: 384},
		{326, 291, 282, 292, 294, 293, 265, 289, 288, 10: 334, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 286, 285, 296, 290, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 306, 305, 307, 308, 108: 309, 111: 379},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 334, 250, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 286, 285, 296, 290, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 306, 305, 307, 308, 108: 380, 381},
		// 150
		{11: 250, 369, 109: 382},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 13: 9, 15: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 60: 9, 9, 65: 9, 86: 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 13: 8, 15: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 60: 8, 8, 65: 8, 86: 8, 8, 8, 8, 8, 8, 8, 8, 8},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 13: 25, 15: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 60: 25, 25, 65: 25, 86: 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 13: 10, 15: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 60: 10, 10, 65: 10, 86: 10, 10, 10, 10, 10, 10, 10, 10, 10},
		// 155
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 334, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 286, 285, 296, 290, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 306, 305, 307, 308, 108: 386},
		{12: 369, 14: 387},
		{326, 291, 282, 292, 294, 293, 265, 289, 288, 10: 267, 250, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 60: 239, 251, 63: 266, 66: 284, 283, 286, 285, 296, 290, 84: 297, 298, 327, 332, 319, 331, 320, 329, 330, 333, 328, 299, 300, 301, 302, 303, 304, 306, 305, 307, 308, 108: 309, 312, 317, 313, 315, 318, 311, 314, 316, 388},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 13: 17, 15: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 60: 17, 17, 65: 17, 86: 17, 17, 17, 17, 17, 17, 17, 17, 17},
		{11: 390, 109: 391},
		// 160
		{326, 291, 282, 292, 294, 293, 265, 289, 288, 392, 267, 250, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 60: 239, 251, 63: 266, 65: 310, 284, 283, 286, 285, 296, 290, 84: 297, 298, 327, 332, 319, 331, 320, 329, 330, 333, 328, 299, 300, 301, 302, 303, 304, 306, 305, 307, 308, 108: 309, 312, 317, 313, 315, 318, 311, 314, 316, 325, 323, 324, 125: 393},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 13: 18, 15: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 60: 18, 18, 65: 18, 86: 18, 18, 18, 18, 18, 18, 18, 18, 18},
		{416, 122: 399, 126: 417, 400, 132: 418},
		{326, 291, 282, 292, 294, 293, 265, 289, 288, 394, 267, 250, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 60: 239, 251, 63: 266, 65: 310, 284, 283, 286, 285, 296, 290, 84: 297, 298, 327, 332, 319, 331, 320, 329, 330, 333, 328, 299, 300, 301, 302, 303, 304, 306, 305, 307, 308, 108: 309, 312, 317, 313, 315, 318, 311, 314, 316, 325, 395, 324},
		{396, 122: 399, 126: 398, 400, 132: 397},
		// 165
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 13: 29, 15: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 60: 29, 29, 65: 29, 86: 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 13: 31, 15: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 60: 31, 31, 65: 31, 86: 31, 31, 31, 31, 31, 31, 31, 31, 31, 105: 31, 31, 31},
		{413, 122: 399, 126: 412, 414},
		{411},
		{11: 402, 86: 401},
		// 170
		{14, 122: 14},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 335, 352, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 406, 305},
		{326, 291, 282, 292, 294, 293, 265, 289, 288, 404, 267, 250, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 60: 239, 251, 63: 266, 65: 310, 284, 283, 286, 285, 296, 290, 84: 297, 298, 327, 332, 319, 331, 320, 329, 330, 333, 328, 299, 300, 301, 302, 303, 304, 306, 305, 307, 308, 108: 309, 312, 317, 313, 315, 318, 311, 314, 316, 325, 323, 324, 125: 403},
		{326, 291, 282, 292, 294, 293, 265, 289, 288, 405, 267, 250, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 60: 239, 251, 63: 266, 65: 310, 284, 283, 286, 285, 296, 290, 84: 297, 298, 327, 332, 319, 331, 320, 329, 330, 333, 328, 299, 300, 301, 302, 303, 304, 306, 305, 307, 308, 108: 309, 312, 317, 313, 315, 318, 311, 314, 316, 325, 395, 324},
		{11},
		// 175
		{12},
		{11: 407},
		{326, 291, 282, 292, 294, 293, 265, 289, 288, 409, 267, 250, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 60: 239, 251, 63: 266, 65: 310, 284, 283, 286, 285, 296, 290, 84: 297, 298, 327, 332, 319, 331, 320, 329, 330, 333, 328, 299, 300, 301, 302, 303, 304, 306, 305, 307, 308, 108: 309, 312, 317, 313, 315, 318, 311, 314, 316, 325, 323, 324, 125: 408},
		{326, 291, 282, 292, 294, 293, 265, 289, 288, 410, 267, 250, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 60: 239, 251, 63: 266, 65: 310, 284, 283, 286, 285, 296, 290, 84: 297, 298, 327, 332, 319, 331, 320, 329, 330, 333, 328, 299, 300, 301, 302, 303, 304, 306, 305, 307, 308, 108: 309, 312, 317, 313, 315, 318, 311, 314, 316, 325, 395, 324},
		{15, 122: 15},
		// 180
		{16, 122: 16},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 13: 23, 15: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 60: 23, 23, 65: 23, 86: 23, 23, 23, 23, 23, 23, 23, 23, 23},
		{415},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 13: 21, 15: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 60: 21, 21, 65: 21, 86: 21, 21, 21, 21, 21, 21, 21, 21, 21},
		{13, 122: 13},
		// 185
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 13: 24, 15: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 60: 24, 24, 65: 24, 86: 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 13: 32, 15: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60: 32, 32, 65: 32, 86: 32, 32, 32, 32, 32, 32, 32, 32, 32, 105: 32, 32, 32},
		{422},
		{419, 122: 399, 126: 420, 414},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 13: 20, 15: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 60: 20, 20, 65: 20, 86: 20, 20, 20, 20, 20, 20, 20, 20, 20},
		// 190
		{421},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 13: 19, 15: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 60: 19, 19, 65: 19, 86: 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 13: 22, 15: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 60: 22, 22, 65: 22, 86: 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{396},
		{326, 291, 282, 292, 294, 293, 265, 289, 288, 10: 267, 250, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 60: 239, 251, 63: 266, 66: 284, 283, 286, 285, 296, 290, 84: 297, 298, 327, 332, 319, 331, 320, 329, 330, 333, 328, 299, 300, 301, 302, 303, 304, 306, 305, 307, 308, 108: 309, 312, 317, 313, 315, 318, 311, 314, 316, 425},
		// 195
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 13: 33, 15: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 60: 33, 33, 65: 33, 86: 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{42: 427},
		{326, 291, 282, 292, 294, 293, 265, 289, 288, 10: 267, 250, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 60: 239, 251, 63: 266, 66: 284, 283, 286, 285, 296, 290, 84: 297, 298, 327, 332, 319, 331, 320, 329, 330, 333, 328, 299, 300, 301, 302, 303, 304, 306, 305, 307, 308, 108: 309, 312, 317, 313, 315, 318, 311, 314, 316, 428},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 13: 34, 15: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 60: 34, 34, 65: 34, 86: 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{3: 200, 6: 200, 10: 200, 13: 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200},
		// 200
		{3: 199, 6: 199, 10: 199, 13: 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199},
		{2: 431, 10: 430, 120: 470, 429},
		{3: 434, 6: 435, 10: 437, 13: 433, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 58: 436, 63: 438, 123: 439},
		{2: 459, 145: 460},
		{3: 434, 6: 435, 10: 437, 13: 433, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 58: 436, 63: 438, 123: 458},
		// 205
		{28: 455, 43: 454},
		{188, 12: 188, 14: 188, 59: 188, 80: 452},
		{187, 12: 187, 14: 187, 59: 187, 80: 450},
		{6: 447, 10: 446, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 58: 445},
		{440, 59: 441},
		// 210
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 13: 46, 15: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 60: 46, 46, 65: 46, 86: 46, 46, 46, 46, 46, 46, 46, 46, 46},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 334, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 286, 285, 296, 290, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 306, 305, 307, 443, 139: 442},
		{444},
		{44},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 13: 45, 15: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 60: 45, 45, 65: 45, 86: 45, 45, 45, 45, 45, 45, 45, 45, 45},
		// 215
		{186, 12: 186, 14: 186, 59: 186},
		{185, 12: 185, 14: 185, 59: 185},
		{28: 448},
		{43: 449},
		{6: 163, 10: 163, 15: 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163},
		// 220
		{10: 451},
		{184, 12: 184, 14: 184, 59: 184},
		{10: 453},
		{183, 12: 183, 14: 183, 59: 183},
		{3: 434, 6: 435, 10: 437, 13: 433, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 58: 436, 63: 438, 123: 457},
		// 225
		{43: 456},
		{6: 164, 10: 164, 15: 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164},
		{189, 12: 189, 14: 189, 59: 189},
		{190, 12: 190, 14: 190, 59: 190},
		{10: 462, 14: 465, 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 58: 463, 150: 464},
		// 230
		{2: 459, 145: 461},
		{191, 12: 191, 14: 191, 59: 191},
		{12: 197, 14: 197},
		{12: 196, 14: 196},
		{12: 466, 14: 467},
		// 235
		{192, 2: 192, 12: 192, 14: 192, 59: 192},
		{10: 468, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 58: 469},
		{193, 2: 193, 12: 193, 14: 193, 59: 193},
		{12: 195, 14: 195},
		{12: 194, 14: 194},
		// 240
		{14: 471},
		{3: 198, 6: 198, 10: 198, 13: 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 335, 352, 84: 297, 298, 95: 299, 300, 301, 302, 303, 477},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 334, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 286, 285, 296, 290, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 306, 305, 307, 308, 108: 474},
		{12: 369, 42: 475},
		// 245
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 335, 352, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 476, 305},
		{68, 9: 68, 11: 68, 68, 14: 68, 42: 68, 68},
		{70, 9: 70, 11: 70, 70, 14: 70, 42: 70, 70, 70, 70, 478},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 335, 352, 84: 297, 298, 95: 299, 300, 301, 302, 479},
		{72, 9: 72, 11: 72, 72, 14: 72, 42: 72, 72, 72, 72, 72, 480},
		// 250
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 335, 352, 84: 297, 298, 95: 299, 300, 301, 481},
		{74, 9: 74, 11: 74, 74, 14: 74, 42: 74, 74, 74, 74, 74, 74, 482},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 335, 352, 84: 297, 298, 95: 299, 300, 483},
		{76, 484, 9: 76, 11: 76, 76, 14: 76, 42: 76, 76, 76, 76, 76, 76, 76},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 335, 352, 84: 297, 298, 95: 299, 485},
		// 255
		{78, 78, 9: 78, 11: 78, 78, 14: 78, 42: 78, 78, 78, 78, 78, 78, 78, 486, 489, 491, 488, 490, 487},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 335, 352, 84: 297, 298, 95: 513},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 335, 352, 84: 297, 298, 95: 512},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 335, 352, 84: 297, 298, 95: 511},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 335, 352, 84: 297, 298, 95: 510},
		// 260
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 335, 352, 84: 297, 298, 95: 509},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 335, 352, 84: 297, 298, 95: 492},
		{80, 80, 9: 80, 11: 80, 80, 14: 80, 42: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 495, 493, 494},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 335, 352, 84: 297, 508},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 335, 352, 84: 297, 507},
		// 265
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 335, 352, 84: 297, 496},
		{87, 87, 4: 498, 497, 9: 87, 11: 87, 87, 14: 87, 42: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 335, 352, 84: 506},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 335, 352, 84: 499},
		{91, 91, 3: 500, 91, 91, 9: 91, 11: 91, 91, 14: 91, 42: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 62: 501, 64: 502},
		// 270
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 505, 352},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 504, 352},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 350, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 351, 285, 503, 352},
		{94, 94, 3: 94, 94, 94, 9: 94, 11: 94, 94, 14: 94, 42: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 62: 94, 64: 94},
		{95, 95, 3: 95, 95, 95, 9: 95, 11: 95, 95, 14: 95, 42: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 62: 95, 64: 95},
		// 275
		{96, 96, 3: 96, 96, 96, 9: 96, 11: 96, 96, 14: 96, 42: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 62: 96, 64: 96},
		{92, 92, 3: 500, 92, 92, 9: 92, 11: 92, 92, 14: 92, 42: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 62: 501, 64: 502},
		{88, 88, 4: 498, 497, 9: 88, 11: 88, 88, 14: 88, 42: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{89, 89, 4: 498, 497, 9: 89, 11: 89, 89, 14: 89, 42: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89},
		{81, 81, 9: 81, 11: 81, 81, 14: 81, 42: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 495, 493, 494},
		// 280
		{82, 82, 9: 82, 11: 82, 82, 14: 82, 42: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 495, 493, 494},
		{83, 83, 9: 83, 11: 83, 83, 14: 83, 42: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 495, 493, 494},
		{84, 84, 9: 84, 11: 84, 84, 14: 84, 42: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 495, 493, 494},
		{85, 85, 9: 85, 11: 85, 85, 14: 85, 42: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 495, 493, 494},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 334, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 286, 285, 296, 290, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 306, 305, 307, 527},
		// 285
		{1: 61, 61, 61, 61, 61, 61, 61, 61, 10: 61, 13: 61, 15: 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		{1: 60, 60, 60, 60, 60, 60, 60, 60, 10: 60, 13: 60, 15: 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{1: 59, 59, 59, 59, 59, 59, 59, 59, 10: 59, 13: 59, 15: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{1: 58, 58, 58, 58, 58, 58, 58, 58, 10: 58, 13: 58, 15: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{1: 57, 57, 57, 57, 57, 57, 57, 57, 10: 57, 13: 57, 15: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		// 290
		{1: 56, 56, 56, 56, 56, 56, 56, 56, 10: 56, 13: 56, 15: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		{1: 55, 55, 55, 55, 55, 55, 55, 55, 10: 55, 13: 55, 15: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{1: 54, 54, 54, 54, 54, 54, 54, 54, 10: 54, 13: 54, 15: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{1: 53, 53, 53, 53, 53, 53, 53, 53, 10: 53, 13: 53, 15: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{1: 52, 52, 52, 52, 52, 52, 52, 52, 10: 52, 13: 52, 15: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		// 295
		{1: 51, 51, 51, 51, 51, 51, 51, 51, 10: 51, 13: 51, 15: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{1: 50, 50, 50, 50, 50, 50, 50, 50, 10: 50, 13: 50, 15: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{62, 9: 62, 11: 62, 62, 14: 62, 42: 62, 62},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 11: 529, 136, 14: 136, 42: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 59: 136, 62: 136, 64: 136, 72: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136},
		{9: 169, 343, 12: 169, 130: 530},
		// 300
		{9: 531, 12: 345},
		{65, 9: 65, 11: 65, 65, 14: 65, 42: 65, 65},
		{104, 104, 3: 104, 104, 104, 9: 104, 11: 104, 104, 14: 104, 42: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 59: 104, 62: 104, 64: 104, 72: 104, 104, 104, 104, 104, 104, 104, 104, 81: 104, 104, 104},
		{105, 105, 3: 105, 105, 105, 9: 105, 11: 105, 105, 14: 105, 42: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 59: 105, 62: 105, 64: 105, 72: 105, 105, 105, 105, 105, 105, 105, 105, 81: 105, 105, 105},
		{10: 536, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 58: 535, 146: 537},
		// 305
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 11: 118, 118, 14: 118, 42: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 59: 118, 62: 118, 64: 118, 72: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 11: 117, 117, 14: 117, 42: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 59: 117, 62: 117, 64: 117, 72: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 11: 114, 114, 14: 114, 42: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 59: 114, 62: 114, 64: 114, 72: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114},
		{10: 539},
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 11: 540, 109, 14: 109, 42: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 59: 109, 62: 109, 64: 109, 72: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109},
		// 310
		{9: 169, 343, 12: 169, 130: 541},
		{9: 542, 12: 345},
		{64, 9: 64, 11: 64, 64, 14: 64, 42: 64, 64},
		{12: 369, 14: 544},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 11: 121, 121, 14: 121, 42: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 59: 121, 62: 121, 64: 121, 72: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121},
		// 315
		{9: 140, 546, 128: 547, 152: 548, 549},
		{2: 554},
		{553},
		{9: 139, 546, 128: 551},
		{9: 550},
		// 320
		{134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 11: 134, 134, 14: 134, 42: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 59: 134, 62: 134, 64: 134, 72: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134},
		{552},
		{9: 141, 141},
		{9: 142, 142},
		{4: 561, 10: 555, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 560, 58: 557, 128: 559, 151: 558, 154: 556},
		// 325
		{2: 554, 12: 149, 14: 149},
		{12: 148, 14: 148},
		{80: 571},
		{12: 567, 14: 568},
		{12: 564, 14: 563},
		// 330
		{12: 138, 14: 138},
		{28: 562},
		{12: 137, 14: 137},
		{144, 12: 144, 14: 144},
		{10: 546, 128: 565},
		// 335
		{14: 566},
		{143, 12: 143, 14: 143},
		{10: 569},
		{145, 12: 145, 14: 145},
		{14: 570},
		// 340
		{146, 12: 146, 14: 146},
		{10: 572},
		{12: 147, 14: 147},
		{14: 574},
		{135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 11: 135, 135, 14: 135, 42: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 59: 135, 62: 135, 64: 135, 72: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135},
		// 345
		{326, 291, 282, 292, 294, 293, 265, 289, 288, 10: 267, 250, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 60: 239, 251, 63: 266, 65: 310, 284, 283, 286, 285, 296, 290, 84: 297, 298, 327, 332, 319, 331, 320, 329, 330, 333, 328, 299, 300, 301, 302, 303, 304, 306, 305, 307, 308, 108: 309, 312, 317, 313, 315, 318, 311, 314, 316, 325, 576, 324},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 13: 35, 15: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 60: 35, 35, 65: 35, 86: 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{11: 586},
		{11: 579},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 582, 334, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 286, 285, 296, 290, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 306, 305, 307, 580, 131: 581},
		// 350
		{9: 166, 12: 166},
		{9: 584, 12: 583},
		{157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 11: 157, 157, 14: 157, 42: 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 59: 157, 62: 157, 64: 157, 72: 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 334, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 286, 285, 296, 290, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 306, 305, 307, 585},
		{158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 11: 158, 158, 14: 158, 42: 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 59: 158, 62: 158, 64: 158, 72: 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158},
		// 355
		{9: 165, 12: 165},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 588, 334, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 286, 285, 296, 290, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 306, 305, 307, 580, 131: 587},
		{9: 589, 12: 583},
		{159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 11: 159, 159, 14: 159, 42: 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 59: 159, 62: 159, 64: 159, 72: 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159},
		{160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 11: 160, 160, 14: 160, 42: 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 59: 160, 62: 160, 64: 160, 72: 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160},
		// 360
		{6: 591, 10: 592, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 58: 593, 66: 594},
		{43: 590},
		{11: 602},
		{11: 595},
		{150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 11: 150, 150, 14: 150, 42: 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 59: 150, 62: 150, 64: 150, 72: 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150},
		// 365
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 598, 334, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 286, 285, 296, 290, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 306, 305, 307, 596, 143: 597},
		{9: 156, 12: 156},
		{9: 600, 12: 599},
		{151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 11: 151, 151, 14: 151, 42: 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 59: 151, 62: 151, 64: 151, 72: 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 334, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 286, 285, 296, 290, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 306, 305, 307, 601},
		// 370
		{152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 11: 152, 152, 14: 152, 42: 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 59: 152, 62: 152, 64: 152, 72: 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152},
		{9: 155, 12: 155},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 604, 334, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 286, 285, 296, 290, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 306, 305, 307, 596, 143: 603},
		{9: 605, 12: 599},
		{153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 11: 153, 153, 14: 153, 42: 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 59: 153, 62: 153, 64: 153, 72: 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153},
		// 375
		{154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 11: 154, 154, 14: 154, 42: 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 59: 154, 62: 154, 64: 154, 72: 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154},
		{10: 607},
		{608},
		{220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13: 220, 15: 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 60: 220, 220, 65: 220, 86: 220, 220, 220, 220, 220, 220, 220, 220, 220},
		{13: 205, 60: 205, 205, 65: 205, 105: 205, 205, 205},
		// 380
		{2: 208, 11: 208},
		{14: 618},
		{12: 616, 14: 204},
		{12: 203, 14: 203},
		{3: 434, 6: 435, 10: 437, 13: 433, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 58: 436, 63: 438, 123: 615},
		// 385
		{201, 12: 201, 14: 201},
		{2: 431, 10: 430, 120: 614, 429, 124: 617},
		{12: 202, 14: 202},
		{2: 207, 11: 207},
		{2: 210},
		// 390
		{2: 431, 10: 430, 120: 614, 429, 124: 613, 141: 612, 621},
		{14: 622},
		{10: 623},
		{2: 209},
		{625},
		// 395
		{13: 211, 60: 211, 211, 65: 211, 105: 211, 211, 211},
		{627},
		{13: 212, 60: 212, 212, 65: 212, 105: 212, 212, 212},
		{156: 629},
		{11: 631, 157: 630},
		// 400
		{13: 217, 60: 217, 217, 65: 217, 105: 217, 217, 217},
		{2: 431, 9: 632, 430, 120: 614, 429, 124: 634, 149: 633},
		{640},
		{2: 431, 9: 636, 430, 120: 614, 429, 124: 637},
		{635},
		// 405
		{2: 214, 9: 214, 214},
		{639},
		{638},
		{2: 213, 9: 213, 213},
		{13: 215, 60: 215, 215, 65: 215, 105: 215, 215, 215},
		// 410
		{13: 216, 60: 216, 216, 65: 216, 105: 216, 216, 216},
		{3: 434, 6: 435, 10: 437, 13: 433, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 58: 436, 63: 438, 123: 642},
		{643, 59: 644},
		{13: 219, 60: 219, 219, 65: 219, 105: 219, 219, 219},
		{1: 291, 282, 292, 294, 293, 265, 289, 288, 10: 334, 13: 268, 15: 252, 253, 255, 256, 258, 259, 260, 257, 254, 262, 263, 264, 261, 274, 270, 271, 272, 281, 280, 269, 275, 295, 273, 276, 278, 279, 277, 58: 287, 63: 266, 66: 284, 283, 286, 285, 296, 290, 84: 297, 298, 95: 299, 300, 301, 302, 303, 304, 306, 305, 307, 443, 139: 645},
		// 415
		{646},
		{13: 218, 60: 218, 218, 65: 218, 105: 218, 218, 218},
		{13: 228, 60: 228, 228, 65: 228, 105: 228, 228, 228},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 178

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 9:
		{
			actions.AST.PrintProgram()
		}
	case 10:
		{
			//
		}
	case 11:
		{
			actions.DeclareGlobal(yyS[yypt-2].argument, yyS[yypt-1].argument, nil, false)
		}
	case 12:
		{
			actions.DeclareGlobal(yyS[yypt-4].argument, yyS[yypt-3].argument, yyS[yypt-1].expressions, true)
		}
	case 13:
		{
			actions.DeclareStruct(yyS[yypt-2].tok, yyS[yypt-0].arguments)
		}
	case 14:
		{
			yyVAL.arguments = nil
		}
	case 15:
		{
			yyVAL.arguments = yyS[yypt-2].arguments
		}
	case 16:
		{
			yyVAL.arguments = []*ast.CXArgument{yyS[yypt-1].argument}
		}
	case 17:
		{
			yyVAL.arguments = append(yyS[yypt-2].arguments, yyS[yypt-1].argument)
		}
	case 18:
		{
			actions.DeclarePackage(yyS[yypt-1].tok)
		}
	case 19:
		{
			// DeclareImport($2)
		}
	case 20:
		{
			yylval.line = 0
			yyVAL.function = actions.FunctionHeader(yyS[yypt-0].tok, nil, false)
		}
	case 21:
		{
			yyVAL.function = actions.FunctionHeader(yyS[yypt-0].tok, yyS[yypt-2].arguments, true)
		}
	case 22:
		{
			yyVAL.arguments = nil
		}
	case 23:
		{
			yyVAL.arguments = yyS[yypt-1].arguments
		}
	case 24:
		{
			actions.FunctionDeclaration(yyS[yypt-2].function, yyS[yypt-1].arguments, nil, yyS[yypt-0].expressions)
		}
	case 25:
		{
			actions.FunctionDeclaration(yyS[yypt-3].function, yyS[yypt-2].arguments, yyS[yypt-1].arguments, yyS[yypt-0].expressions)
		}
	case 27:
		{
			yyVAL.arguments = []*ast.CXArgument{yyS[yypt-0].argument}
		}
	case 28:
		{
			yyVAL.arguments = append(yyS[yypt-2].arguments, yyS[yypt-0].argument)
		}
	case 29:
		{
			yyS[yypt-0].argument.ArgDetails.Name = yyS[yypt-1].argument.ArgDetails.Name
			yyS[yypt-0].argument.ArgDetails.Package = yyS[yypt-1].argument.ArgDetails.Package
			yyS[yypt-0].argument.IsLocalDeclaration = true
			yyVAL.argument = yyS[yypt-0].argument
		}
	case 31:
		{
			if pkg, err := actions.AST.GetCurrentPackage(); err == nil {
				arg := ast.MakeArgument("", actions.CurrentFile, actions.LineNo)
				arg.AddType(types.UNDEFINED)
				arg.ArgDetails.Name = yyS[yypt-0].tok
				arg.ArgDetails.Package = pkg
				yyVAL.argument = arg
			} else {
				panic(err)
			}
		}
	case 32:
		{
			yyVAL.argument = yyS[yypt-1].argument
		}
	case 33:
		{
			arg := actions.DeclarationSpecifiersStruct(yyS[yypt-0].tok, "", false, actions.CurrentFile, actions.LineNo)
			yyVAL.arguments = []*ast.CXArgument{arg}
		}
	case 34:
		{
			arg := actions.DeclarationSpecifiersBasic(types.Code(yyS[yypt-0].i))
			yyVAL.arguments = []*ast.CXArgument{arg}
		}
	case 35:
		{
			arg := actions.DeclarationSpecifiersStruct(yyS[yypt-0].tok, "", false, actions.CurrentFile, actions.LineNo)
			yyVAL.arguments = append(yyS[yypt-2].arguments, arg)
		}
	case 36:
		{
			arg := actions.DeclarationSpecifiersBasic(types.Code(yyS[yypt-0].i))
			yyVAL.arguments = append(yyS[yypt-2].arguments, arg)
		}
	case 37:
		{

			yyVAL.arguments = yyS[yypt-1].arguments

		}
	case 38:
		{
			yyVAL.arguments = nil
		}
	case 39:
		{
			arg := ast.MakeArgument("", actions.CurrentFile, actions.LineNo).AddType(types.FUNC)
			arg.Inputs = yyS[yypt-1].arguments
			arg.Outputs = yyS[yypt-0].arguments
			yyVAL.argument = actions.DeclarationSpecifiers(arg, []types.Pointer{0}, constants.DECL_FUNC)
		}
	case 40:
		{
			yyVAL.argument = actions.DeclarationSpecifiers(yyS[yypt-0].argument, []types.Pointer{0}, constants.DECL_POINTER)
		}
	case 41:
		{
			yyVAL.argument = actions.DeclarationSpecifiers(yyS[yypt-0].argument, []types.Pointer{0}, constants.DECL_SLICE)
		}
	case 42:
		{
			yyVAL.argument = actions.DeclarationSpecifiersBasic(types.Code(yyS[yypt-0].i))
		}
	case 43:
		{
			yyVAL.argument = actions.DeclarationSpecifiersStruct(yyS[yypt-0].tok, "", false, actions.CurrentFile, actions.LineNo)
		}
	case 44:
		{
			basic := actions.DeclarationSpecifiersBasic(types.Code(yyS[yypt-0].i))
			yyVAL.argument = actions.DeclarationSpecifiers(basic, types.Cast_sint_to_sptr(yyS[yypt-1].ints), constants.DECL_ARRAY)
		}
	case 45:
		{
			strct := actions.DeclarationSpecifiersStruct(yyS[yypt-0].tok, "", false, actions.CurrentFile, actions.LineNo)
			yyVAL.argument = actions.DeclarationSpecifiers(strct, types.Cast_sint_to_sptr(yyS[yypt-1].ints), constants.DECL_ARRAY)
		}
	case 46:
		{
			yyVAL.argument = actions.DeclarationSpecifiersStruct(yyS[yypt-0].tok, yyS[yypt-2].tok, true, actions.CurrentFile, actions.LineNo)
		}
	case 47:
		{
			yyVAL.argument = actions.DeclarationSpecifiersStruct(yyS[yypt-0].tok, types.Code(yyS[yypt-2].i).Name(), true, actions.CurrentFile, actions.LineNo)
		}
	case 48:
		{
			yyVAL.i = int(types.AFF)
		}
	case 49:
		{
			yyVAL.i = int(types.BOOL)
		}
	case 50:
		{
			yyVAL.i = int(types.STR)
		}
	case 51:
		{
			yyVAL.i = int(types.F32)
		}
	case 52:
		{
			yyVAL.i = int(types.F64)
		}
	case 53:
		{
			yyVAL.i = int(types.I8)
		}
	case 54:
		{
			yyVAL.i = int(types.I16)
		}
	case 55:
		{
			yyVAL.i = int(types.I32)
		}
	case 56:
		{
			yyVAL.i = int(types.I64)
		}
	case 57:
		{
			yyVAL.i = int(types.UI8)
		}
	case 58:
		{
			yyVAL.i = int(types.UI16)
		}
	case 59:
		{
			yyVAL.i = int(types.UI32)
		}
	case 60:
		{
			yyVAL.i = int(types.UI64)
		}
	case 61:
		{
			yyVAL.expressions = nil
		}
	case 62:
		{
			if yyS[yypt-0].expressions[0].IsStructLiteral() {
				yyVAL.expressions = actions.StructLiteralAssignment([]*ast.CXExpression{actions.StructLiteralFields(yyS[yypt-2].tok)}, yyS[yypt-0].expressions)
			} else {
				yyVAL.expressions = actions.Assignment([]*ast.CXExpression{actions.StructLiteralFields(yyS[yypt-2].tok)}, "=", yyS[yypt-0].expressions)
			}
		}
	case 63:
		{
			if yyS[yypt-0].expressions[0].IsStructLiteral() {
				yyVAL.expressions = append(yyS[yypt-4].expressions, actions.StructLiteralAssignment([]*ast.CXExpression{actions.StructLiteralFields(yyS[yypt-2].tok)}, yyS[yypt-0].expressions)...)
			} else {
				yyVAL.expressions = append(yyS[yypt-4].expressions, actions.Assignment([]*ast.CXExpression{actions.StructLiteralFields(yyS[yypt-2].tok)}, "=", yyS[yypt-0].expressions)...)
			}
		}
	case 64:
		{
			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].ExpressionType = ast.CXEXPR_ARRAY_LITERAL
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 65:
		{
			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].ExpressionType = ast.CXEXPR_ARRAY_LITERAL
			yyVAL.expressions = append(yyS[yypt-2].expressions, yyS[yypt-0].expressions...)
		}
	case 66:
		{
			yyVAL.ints = []int{int(yyS[yypt-1].i32)}
		}
	case 67:
		{
			yyVAL.ints = append(yyS[yypt-3].ints, int(yyS[yypt-1].i32))
		}
	case 68:
		{
			yyVAL.ints = []int{0}
		}
	case 69:
		{
			yyVAL.ints = append(yyS[yypt-2].ints, 0)
		}
	case 70:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 71:
		{
			yyVAL.expressions = nil
		}
	case 72:
		{
			yyVAL.expressions = actions.ArrayLiteralExpression(types.Cast_sint_to_sptr(yyS[yypt-4].ints), types.Code(yyS[yypt-3].i), yyS[yypt-1].expressions)
		}
	case 73:
		{
			yyVAL.expressions = nil
		}
	case 74:
		{
			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].ExpressionType = ast.CXEXPR_ARRAY_LITERAL
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 75:
		{

			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].ExpressionType = ast.CXEXPR_ARRAY_LITERAL
			yyVAL.expressions = append(yyS[yypt-2].expressions, yyS[yypt-0].expressions...)
		}
	case 76:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 77:
		{
			yyVAL.expressions = nil
		}
	case 78:
		{
			yyVAL.expressions = actions.SliceLiteralExpression(types.Code(yyS[yypt-3].i), yyS[yypt-1].expressions)
		}
	case 79:
		{
			yyVAL.expressions = nil
		}
	case 80:
		{
			for _, expr := range yyS[yypt-0].expressions {
				if expr.Outputs[0].ArgDetails.Name == yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].Inputs[0].ArgDetails.Name {
					expr.Outputs[0].Lengths = append(expr.Outputs[0].Lengths, 0)
					expr.Outputs[0].DeclarationSpecifiers = append(expr.Outputs[0].DeclarationSpecifiers, constants.DECL_SLICE)
				}
			}

			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].ExpressionType = ast.CXEXPR_ARRAY_LITERAL
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 81:
		{
			yyVAL.string = yyS[yypt-0].tok
		}
	case 82:
		{
			yyVAL.string = strconv.Itoa(int(yyS[yypt-0].i32))
		}
	case 83:
		{
			yyVAL.string = types.Code(yyS[yypt-2].i).Name() + "." + yyS[yypt-0].tok
		}
	case 84:
		{
			res := append([]string{yyS[yypt-3].string}, yyS[yypt-1].tok)
			res = append(res, yyS[yypt-5].tok)
			yyVAL.stringA = res
		}
	case 85:
		{
			yyVAL.stringA = append([]string{yyS[yypt-3].tok}, yyS[yypt-1].string)
		}
	case 86:
		{
			yyVAL.stringA = append(yyS[yypt-1].stringA, yyS[yypt-3].tok)
		}
	case 87:
		{
			res := append(yyS[yypt-3].stringA, yyS[yypt-1].stringA...)
			yyVAL.stringA = append(res, yyS[yypt-5].tok)
		}
	case 88:
		{
			yyVAL.stringA = yyS[yypt-1].stringA
		}
	case 89:
		{
			yyS[yypt-2].stringA = append(yyS[yypt-2].stringA, yyS[yypt-1].stringA...)
			yyVAL.stringA = yyS[yypt-2].stringA
		}
	case 90:
		{
			yyVAL.expressions = actions.SliceLiteralExpression(types.AFF, nil)
		}
	case 91:
		{
			var exprs []*ast.CXExpression
			for _, str := range yyS[yypt-0].stringA {
				expr := actions.WritePrimary(types.AFF, encoder.Serialize(str), false)
				expr[len(expr)-1].ExpressionType = ast.CXEXPR_ARRAY_LITERAL
				exprs = append(exprs, expr...)
			}

			yyVAL.expressions = actions.SliceLiteralExpression(types.AFF, exprs)
		}
	case 92:
		{
			yyVAL.i32 = yyS[yypt-0].i32
		}
	case 93:
		{
			yyVAL.i32 = -yyS[yypt-0].i32
		}
	case 94:
		{
			yyVAL.expressions = actions.PrimaryIdentifier(yyS[yypt-0].tok)
		}
	case 95:
		{
			yyVAL.expressions = nil
		}
	case 96:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 97:
		{
			yyVAL.expressions = actions.WritePrimary(types.STR, types.Make_obj([]byte(yyS[yypt-0].tok)), false)
		}
	case 98:
		{
			exprs := actions.WritePrimary(types.BOOL, encoder.Serialize(yyS[yypt-0].bool), false)
			yyVAL.expressions = exprs
		}
	case 99:
		{
			yyVAL.expressions = actions.WritePrimary(types.I8, encoder.Serialize(yyS[yypt-0].i8), false)
		}
	case 100:
		{
			yyVAL.expressions = actions.WritePrimary(types.I16, encoder.Serialize(yyS[yypt-0].i16), false)
		}
	case 101:
		{
			yyVAL.expressions = actions.WritePrimary(types.I32, encoder.Serialize(yyS[yypt-0].i32), false)
		}
	case 102:
		{
			yyVAL.expressions = actions.WritePrimary(types.I64, encoder.Serialize(yyS[yypt-0].i64), false)
		}
	case 103:
		{
			yyVAL.expressions = actions.WritePrimary(types.UI8, encoder.Serialize(yyS[yypt-0].ui8), false)
		}
	case 104:
		{
			yyVAL.expressions = actions.WritePrimary(types.UI16, encoder.Serialize(yyS[yypt-0].ui16), false)
		}
	case 105:
		{
			yyVAL.expressions = actions.WritePrimary(types.UI32, encoder.Serialize(yyS[yypt-0].ui32), false)
		}
	case 106:
		{
			yyVAL.expressions = actions.WritePrimary(types.UI64, encoder.Serialize(yyS[yypt-0].ui64), false)
		}
	case 107:
		{
			yyVAL.expressions = actions.WritePrimary(types.F32, encoder.Serialize(yyS[yypt-0].f32), false)
		}
	case 108:
		{
			yyVAL.expressions = actions.WritePrimary(types.F64, encoder.Serialize(yyS[yypt-0].f64), false)
		}
	case 109:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 110:
		{
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 111:
		{
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 112:
		{
			yyVAL.tok = types.Code(yyS[yypt-0].i).Name()
		}
	case 115:
		{
			yyVAL.expressions = actions.PostfixExpressionArray(yyS[yypt-3].expressions, yyS[yypt-1].expressions)
		}
	case 116:
		{
			yyVAL.expressions = actions.PostfixExpressionNative(types.Code(yyS[yypt-2].i), yyS[yypt-0].tok)
		}
	case 117:
		{
			yyVAL.expressions = actions.PostfixExpressionEmptyFunCall(yyS[yypt-2].expressions)
		}
	case 118:
		{
			yyVAL.expressions = actions.PostfixExpressionFunCall(yyS[yypt-3].expressions, yyS[yypt-1].expressions)
		}
	case 119:
		{
			yyVAL.expressions = actions.PostfixExpressionIncDec(yyS[yypt-1].expressions, true)
		}
	case 120:
		{
			yyVAL.expressions = actions.PostfixExpressionIncDec(yyS[yypt-1].expressions, false)
		}
	case 121:
		{
			yyVAL.expressions = actions.PostfixExpressionField(yyS[yypt-2].expressions, yyS[yypt-0].tok)
		}
	case 123:
		{
			yyVAL.expressions = append(yyS[yypt-2].expressions, yyS[yypt-0].expressions...)
		}
	case 125:
		{
			// TODO
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 126:
		{
			// TODO
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 127:
		{
			yyVAL.expressions = actions.UnaryExpression(yyS[yypt-1].tok, yyS[yypt-0].expressions)
		}
	case 134:
		{
			yyVAL.expressions = actions.OperatorExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, constants.OP_MUL)
		}
	case 135:
		{
			yyVAL.expressions = actions.OperatorExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, constants.OP_DIV)
		}
	case 136:
		{
			yyVAL.expressions = actions.OperatorExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, constants.OP_MOD)
		}
	case 138:
		{
			yyVAL.expressions = actions.OperatorExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, constants.OP_ADD)
		}
	case 139:
		{
			yyVAL.expressions = actions.OperatorExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, constants.OP_SUB)
		}
	case 141:
		{
			yyVAL.expressions = actions.OperatorExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, constants.OP_BITSHL)
		}
	case 142:
		{
			yyVAL.expressions = actions.OperatorExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, constants.OP_BITSHR)
		}
	case 143:
		{
			yyVAL.expressions = actions.OperatorExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, constants.OP_BITCLEAR)
		}
	case 145:
		{
			yyVAL.expressions = actions.OperatorExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, constants.OP_EQUAL)
		}
	case 146:
		{
			yyVAL.expressions = actions.OperatorExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, constants.OP_UNEQUAL)
		}
	case 147:
		{
			yyVAL.expressions = actions.OperatorExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, constants.OP_LT)
		}
	case 148:
		{
			yyVAL.expressions = actions.OperatorExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, constants.OP_GT)
		}
	case 149:
		{
			yyVAL.expressions = actions.OperatorExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, constants.OP_LTEQ)
		}
	case 150:
		{
			yyVAL.expressions = actions.OperatorExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, constants.OP_GTEQ)
		}
	case 152:
		{
			yyVAL.expressions = actions.OperatorExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, constants.OP_BITAND)
		}
	case 154:
		{
			yyVAL.expressions = actions.OperatorExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, constants.OP_BITXOR)
		}
	case 156:
		{
			yyVAL.expressions = actions.OperatorExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, constants.OP_BITOR)
		}
	case 158:
		{
			yyVAL.expressions = actions.OperatorExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, constants.OP_BOOL_AND)
		}
	case 160:
		{
			yyVAL.expressions = actions.OperatorExpression(yyS[yypt-2].expressions, yyS[yypt-0].expressions, constants.OP_BOOL_OR)
		}
	case 164:
		{
			yyVAL.expressions = actions.PrimaryStructLiteral(yyS[yypt-3].tok, yyS[yypt-1].expressions)
		}
	case 165:
		{
			yyVAL.expressions = actions.UnaryExpression(yyS[yypt-4].tok, actions.PrimaryStructLiteral(yyS[yypt-3].tok, yyS[yypt-1].expressions))
		}
	case 166:
		{
			yyVAL.expressions = actions.PrimaryStructLiteralExternal(yyS[yypt-5].expressions[0].Outputs[0].ArgDetails.Name, yyS[yypt-3].tok, yyS[yypt-1].expressions)
		}
	case 168:
		{
			if yyS[yypt-0].expressions == nil {
				yyVAL.expressions = nil
			}
			if yyS[yypt-0].expressions != nil {
				if yyS[yypt-0].expressions[0].IsArrayLiteral() {
					if yyS[yypt-1].tok != "=" && yyS[yypt-1].tok != ":=" {
						panic("")
					}
					if yyS[yypt-1].tok == ":=" {
						for _, from := range yyS[yypt-0].expressions {
							from.Outputs[0].IsShortAssignmentDeclaration = true
							from.Outputs[0].PreviouslyDeclared = true
						}
					}
					yyVAL.expressions = actions.ArrayLiteralAssignment(yyS[yypt-2].expressions, yyS[yypt-0].expressions)
				} else if yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].IsStructLiteral() {
					if yyS[yypt-1].tok != "=" && yyS[yypt-1].tok != ":=" {
						panic("")
					}
					if yyS[yypt-1].tok == ":=" {
						for _, from := range yyS[yypt-0].expressions {
							from.Outputs[0].IsShortAssignmentDeclaration = true
							from.Outputs[0].PreviouslyDeclared = true
						}
					}
					yyVAL.expressions = actions.StructLiteralAssignment(yyS[yypt-2].expressions, yyS[yypt-0].expressions)
				} else {
					yyVAL.expressions = actions.Assignment(yyS[yypt-2].expressions, yyS[yypt-1].tok, yyS[yypt-0].expressions)
				}
			}
		}
	case 182:
		{
			yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].Outputs = append(yyS[yypt-2].expressions[len(yyS[yypt-2].expressions)-1].Outputs, yyS[yypt-0].expressions[len(yyS[yypt-0].expressions)-1].Outputs...)
			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 184:
		{
			yyVAL.expressions = actions.DeclareLocal(yyS[yypt-2].argument, yyS[yypt-1].argument, nil, false)
		}
	case 185:
		{
			yyVAL.expressions = actions.DeclareLocal(yyS[yypt-4].argument, yyS[yypt-3].argument, yyS[yypt-1].expressions, true)
		}
	case 193:
		{
			yyVAL.expressions = nil
		}
	case 195:
		{
			// it has to be the first expression so all the nested expressions are executed
			// instead of only executing the last one
			// UPDATE: I need to label all expressions. `goto` will jump to first occurrance anyway, so no problem
			// I need this behavior for affordances
			for _, expr := range yyS[yypt-0].expressions {
				expr.Label = yyS[yypt-2].tok
			}

			yyVAL.expressions = yyS[yypt-0].expressions
		}
	case 196:
		{
			yyVAL.expressions = nil
		}
	case 197:
		{
			yyVAL.expressions = nil
		}
	case 198:
		{
			yyVAL.expressions = nil
		}
	case 199:
		{
			yyVAL.expressions = yyS[yypt-2].expressions
		}
	case 201:
		{
			yyVAL.expressions = append(yyS[yypt-1].expressions, yyS[yypt-0].expressions...)
		}
	case 204:
		{
			yyVAL.expressions = nil
		}
	case 205:
		{
			if len(yyS[yypt-1].expressions) > 0 && yyS[yypt-1].expressions[len(yyS[yypt-1].expressions)-1].Operator == nil && !yyS[yypt-1].expressions[len(yyS[yypt-1].expressions)-1].IsMethodCall() {
				outs := yyS[yypt-1].expressions[len(yyS[yypt-1].expressions)-1].Outputs
				if len(outs) > 0 {
					println(ast.CompilationError(outs[0].ArgDetails.FileName, outs[0].ArgDetails.FileLine), "invalid expression")
				} else {
					println(ast.CompilationError(actions.CurrentFile, actions.LineNo), "invalid expression")
				}
				yyVAL.expressions = nil
			} else {
				yyVAL.expressions = yyS[yypt-1].expressions
			}
			// $$ = $1
		}
	case 206:
		{
			yyVAL.expressions = actions.SelectionStatement(yyS[yypt-6].expressions, yyS[yypt-4].expressions, yyS[yypt-2].SelectStatements, yyS[yypt-1].expressions, actions.SEL_ELSEIFELSE)
		}
	case 207:
		{
			yyVAL.expressions = actions.SelectionExpressions(yyS[yypt-5].expressions, yyS[yypt-3].expressions, yyS[yypt-1].expressions)
		}
	case 208:
		{
			yyVAL.expressions = actions.SelectionExpressions(yyS[yypt-4].expressions, nil, yyS[yypt-1].expressions)
		}
	case 209:
		{
			yyVAL.expressions = actions.SelectionStatement(yyS[yypt-5].expressions, yyS[yypt-3].expressions, yyS[yypt-1].SelectStatements, nil, actions.SEL_ELSEIF)
		}
	case 210:
		{
			//
			yyVAL.expressions = actions.SelectionStatement(yyS[yypt-4].expressions, nil, yyS[yypt-1].SelectStatements, nil, actions.SEL_ELSEIF)
		}
	case 211:
		{
			//
			yyVAL.expressions = actions.SelectionStatement(yyS[yypt-5].expressions, nil, yyS[yypt-2].SelectStatements, yyS[yypt-1].expressions, actions.SEL_ELSEIFELSE)
		}
	case 212:
		{
			yyVAL.expressions = actions.SelectionExpressions(yyS[yypt-1].expressions, yyS[yypt-0].expressions, nil)
		}
	case 213:
		{
			yyVAL.expressions = nil
		}
	case 214:
		{
			yyVAL.SelectStatement = actions.SelectStatement{
				Condition: yyS[yypt-3].expressions,
				Then:      yyS[yypt-1].expressions,
			}
		}
	case 215:
		{
			yyVAL.SelectStatement = actions.SelectStatement{
				Condition: yyS[yypt-2].expressions,
				Then:      nil,
			}
		}
	case 216:
		{
			yyVAL.SelectStatements = []actions.SelectStatement{yyS[yypt-0].SelectStatement}
		}
	case 217:
		{
			yyVAL.SelectStatements = append(yyS[yypt-1].SelectStatements, yyS[yypt-0].SelectStatement)
		}
	case 218:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 219:
		{
			yyVAL.expressions = nil
		}
	case 220:
		{
			yyVAL.expressions = actions.IterationExpressions(nil, yyS[yypt-1].expressions, nil, yyS[yypt-0].expressions)
		}
	case 221:
		{
			yyVAL.expressions = actions.IterationExpressions(yyS[yypt-2].expressions, yyS[yypt-1].expressions, nil, yyS[yypt-0].expressions)
		}
	case 222:
		{
			yyVAL.expressions = actions.IterationExpressions(yyS[yypt-3].expressions, yyS[yypt-2].expressions, yyS[yypt-1].expressions, yyS[yypt-0].expressions)
		}
	case 223:
		{
			retExprs := actions.ReturnExpressions{Expressions: actions.AssociateReturnExpressions(0, yyS[yypt-0].expressions)}
			retExprs.Size++
			yyVAL.ReturnExpressions = retExprs
		}
	case 224:
		{
			yyS[yypt-2].ReturnExpressions.Expressions = append(yyS[yypt-2].ReturnExpressions.Expressions, actions.AssociateReturnExpressions(yyS[yypt-2].ReturnExpressions.Size, yyS[yypt-0].expressions)...)
			yyS[yypt-2].ReturnExpressions.Size++
			yyVAL.ReturnExpressions = yyS[yypt-2].ReturnExpressions
		}
	case 225:
		{
			if pkg, err := actions.AST.GetCurrentPackage(); err == nil {
				expr := ast.MakeExpression(ast.Natives[constants.OP_GOTO], actions.CurrentFile, actions.LineNo)
				expr.Package = pkg
				expr.Label = yyS[yypt-1].tok
				yyVAL.expressions = []*ast.CXExpression{expr}
			} else {
				panic(err)
			}
		}
	case 226:
		{
			yyVAL.expressions = actions.ContinueExpressions()
		}
	case 227:
		{
			yyVAL.expressions = actions.BreakExpressions()
		}
	case 228:
		{
			yyVAL.expressions = actions.AddJmpToReturnExpressions(actions.ReturnExpressions{})
		}
	case 229:
		{
			yyVAL.expressions = actions.AddJmpToReturnExpressions(yyS[yypt-1].ReturnExpressions)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
