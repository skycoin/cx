// Code generated by goyacc -o cxparser/cxparsingcompletor/parsingcompletor.go cxparser/cxparsingcompletor/parsingcompletor.y. DO NOT EDIT.

//line cxparser/cxparsingcompletor/parsingcompletor.y:2
package parsingcompletor

import __yyfmt__ "fmt"

//line cxparser/cxparsingcompletor/parsingcompletor.y:2
import (
	"github.com/skycoin/cx/cx/ast"
	"github.com/skycoin/cx/cx/constants"
	"github.com/skycoin/cx/cx/types"
	"github.com/skycoin/cx/cxparser/actions"
	"github.com/skycoin/skycoin/src/cipher/encoder"
	"strconv"
)

/*
This is a machine generated file
parsingcompletor.go is is generated by GOYACC from parsingcompletor.y

build-parser: ## Generate lexer and parser for CX grammar
  	./bin/goyacc -o cxparser/cxpartialparsing/cxpartialparsing.go cxparser/cxpartialparsing/cxpartialparsing.y
	./bin/goyacc -o cxparser/cxparsingcompletor/parsingcompletor.go cxparser/cxparsingcompletor/parsingcompletor.y

- parsingcompletor.go is output
- cxparser/cxparsingcompletor/parsingcompletor.y is input
*/

// var actions.AST = MakeProgram(CALLSTACK_SIZE, STACK_SIZE, INIT_HEAP_SIZE)

func Parse(lexer *Lexer) int {
	return yyParse(lexer)
}

//line cxparser/cxparsingcompletor/parsingcompletor.y:31
type yySymType struct {
	yys     int
	i       int
	i8      int8
	i16     int16
	i32     int32
	i64     int64
	ui8     uint8
	ui16    uint16
	ui32    uint32
	ui64    uint64
	f32     float32
	f64     float64
	tok     string
	bool    bool
	string  string
	stringA []string
	ints    []int

	line    int
	lineStr string

	argument  *ast.CXArgument
	arguments []*ast.CXArgument

	expression  *ast.CXExpression
	expressions []ast.CXExpression

	SelectStatement  actions.SelectStatement
	SelectStatements []actions.SelectStatement

	ReturnExpressions actions.ReturnExpressions

	arrayArguments [][]ast.CXExpression

	function      *ast.CXFunction
	functionIndex ast.CXFunctionIndex
}

const BOOLEAN_LITERAL = 57346
const BYTE_LITERAL = 57347
const SHORT_LITERAL = 57348
const INT_LITERAL = 57349
const LONG_LITERAL = 57350
const UNSIGNED_BYTE_LITERAL = 57351
const UNSIGNED_SHORT_LITERAL = 57352
const UNSIGNED_INT_LITERAL = 57353
const UNSIGNED_LONG_LITERAL = 57354
const FLOAT_LITERAL = 57355
const DOUBLE_LITERAL = 57356
const FUNC = 57357
const OP = 57358
const LPAREN = 57359
const RPAREN = 57360
const LBRACE = 57361
const RBRACE = 57362
const LBRACK = 57363
const RBRACK = 57364
const IDENTIFIER = 57365
const VAR = 57366
const COMMA = 57367
const PERIOD = 57368
const COMMENT = 57369
const STRING_LITERAL = 57370
const PACKAGE = 57371
const IF = 57372
const ELSE = 57373
const FOR = 57374
const TYPSTRUCT = 57375
const STRUCT = 57376
const SEMICOLON = 57377
const NEWLINE = 57378
const ASSIGN = 57379
const CASSIGN = 57380
const IMPORT = 57381
const RETURN = 57382
const GOTO = 57383
const GT_OP = 57384
const LT_OP = 57385
const GTEQ_OP = 57386
const LTEQ_OP = 57387
const EQUAL = 57388
const COLON = 57389
const NEW = 57390
const EQUALWORD = 57391
const GTHANWORD = 57392
const LTHANWORD = 57393
const GTHANEQ = 57394
const LTHANEQ = 57395
const UNEQUAL = 57396
const AND = 57397
const OR = 57398
const ADD_OP = 57399
const SUB_OP = 57400
const MUL_OP = 57401
const DIV_OP = 57402
const MOD_OP = 57403
const REF_OP = 57404
const NEG_OP = 57405
const AFFVAR = 57406
const PLUSPLUS = 57407
const MINUSMINUS = 57408
const REMAINDER = 57409
const LEFTSHIFT = 57410
const RIGHTSHIFT = 57411
const EXP = 57412
const NOT = 57413
const BITXOR_OP = 57414
const BITOR_OP = 57415
const BITCLEAR_OP = 57416
const PLUSEQ = 57417
const MINUSEQ = 57418
const MULTEQ = 57419
const DIVEQ = 57420
const REMAINDEREQ = 57421
const EXPEQ = 57422
const LEFTSHIFTEQ = 57423
const RIGHTSHIFTEQ = 57424
const BITANDEQ = 57425
const BITXOREQ = 57426
const BITOREQ = 57427
const DEC_OP = 57428
const INC_OP = 57429
const PTR_OP = 57430
const LEFT_OP = 57431
const RIGHT_OP = 57432
const GE_OP = 57433
const LE_OP = 57434
const EQ_OP = 57435
const NE_OP = 57436
const AND_OP = 57437
const OR_OP = 57438
const ADD_ASSIGN = 57439
const AND_ASSIGN = 57440
const LEFT_ASSIGN = 57441
const MOD_ASSIGN = 57442
const MUL_ASSIGN = 57443
const DIV_ASSIGN = 57444
const OR_ASSIGN = 57445
const RIGHT_ASSIGN = 57446
const SUB_ASSIGN = 57447
const XOR_ASSIGN = 57448
const BOOL = 57449
const F32 = 57450
const F64 = 57451
const I8 = 57452
const I16 = 57453
const I32 = 57454
const I64 = 57455
const STR = 57456
const UI8 = 57457
const UI16 = 57458
const UI32 = 57459
const UI64 = 57460
const UNION = 57461
const ENUM = 57462
const CONST = 57463
const CASE = 57464
const DEFAULT = 57465
const SWITCH = 57466
const BREAK = 57467
const CONTINUE = 57468
const TYPE = 57469
const BASICTYPE = 57470
const REM = 57471
const DEF = 57472
const EXPR = 57473
const FIELD = 57474
const CLAUSES = 57475
const OBJECT = 57476
const OBJECTS = 57477
const DSTACK = 57478
const DPROGRAM = 57479
const DSTATE = 57480
const AFF = 57481
const CAFF = 57482
const TAG = 57483
const INFER = 57484
const VALUE = 57485
const ADDR = 57486
const yyDefault = 57487

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"BOOLEAN_LITERAL",
	"BYTE_LITERAL",
	"SHORT_LITERAL",
	"INT_LITERAL",
	"LONG_LITERAL",
	"UNSIGNED_BYTE_LITERAL",
	"UNSIGNED_SHORT_LITERAL",
	"UNSIGNED_INT_LITERAL",
	"UNSIGNED_LONG_LITERAL",
	"FLOAT_LITERAL",
	"DOUBLE_LITERAL",
	"FUNC",
	"OP",
	"LPAREN",
	"RPAREN",
	"LBRACE",
	"RBRACE",
	"LBRACK",
	"RBRACK",
	"IDENTIFIER",
	"VAR",
	"COMMA",
	"PERIOD",
	"COMMENT",
	"STRING_LITERAL",
	"PACKAGE",
	"IF",
	"ELSE",
	"FOR",
	"TYPSTRUCT",
	"STRUCT",
	"SEMICOLON",
	"NEWLINE",
	"ASSIGN",
	"CASSIGN",
	"IMPORT",
	"RETURN",
	"GOTO",
	"GT_OP",
	"LT_OP",
	"GTEQ_OP",
	"LTEQ_OP",
	"EQUAL",
	"COLON",
	"NEW",
	"EQUALWORD",
	"GTHANWORD",
	"LTHANWORD",
	"GTHANEQ",
	"LTHANEQ",
	"UNEQUAL",
	"AND",
	"OR",
	"ADD_OP",
	"SUB_OP",
	"MUL_OP",
	"DIV_OP",
	"MOD_OP",
	"REF_OP",
	"NEG_OP",
	"AFFVAR",
	"PLUSPLUS",
	"MINUSMINUS",
	"REMAINDER",
	"LEFTSHIFT",
	"RIGHTSHIFT",
	"EXP",
	"NOT",
	"BITXOR_OP",
	"BITOR_OP",
	"BITCLEAR_OP",
	"PLUSEQ",
	"MINUSEQ",
	"MULTEQ",
	"DIVEQ",
	"REMAINDEREQ",
	"EXPEQ",
	"LEFTSHIFTEQ",
	"RIGHTSHIFTEQ",
	"BITANDEQ",
	"BITXOREQ",
	"BITOREQ",
	"DEC_OP",
	"INC_OP",
	"PTR_OP",
	"LEFT_OP",
	"RIGHT_OP",
	"GE_OP",
	"LE_OP",
	"EQ_OP",
	"NE_OP",
	"AND_OP",
	"OR_OP",
	"ADD_ASSIGN",
	"AND_ASSIGN",
	"LEFT_ASSIGN",
	"MOD_ASSIGN",
	"MUL_ASSIGN",
	"DIV_ASSIGN",
	"OR_ASSIGN",
	"RIGHT_ASSIGN",
	"SUB_ASSIGN",
	"XOR_ASSIGN",
	"BOOL",
	"F32",
	"F64",
	"I8",
	"I16",
	"I32",
	"I64",
	"STR",
	"UI8",
	"UI16",
	"UI32",
	"UI64",
	"UNION",
	"ENUM",
	"CONST",
	"CASE",
	"DEFAULT",
	"SWITCH",
	"BREAK",
	"CONTINUE",
	"TYPE",
	"BASICTYPE",
	"REM",
	"DEF",
	"EXPR",
	"FIELD",
	"CLAUSES",
	"OBJECT",
	"OBJECTS",
	"DSTACK",
	"DPROGRAM",
	"DSTATE",
	"AFF",
	"CAFF",
	"TAG",
	"INFER",
	"VALUE",
	"ADDR",
	"yyDefault",
	"'?'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line cxparser/cxparsingcompletor/parsingcompletor.y:1356

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 2877

var yyAct = [...]int{
	77, 104, 76, 282, 350, 102, 353, 170, 351, 105,
	372, 144, 83, 151, 137, 212, 56, 141, 135, 250,
	143, 29, 82, 338, 103, 140, 215, 136, 139, 219,
	63, 118, 233, 35, 223, 15, 224, 378, 228, 227,
	230, 229, 318, 107, 10, 50, 35, 231, 232, 9,
	168, 206, 253, 65, 177, 205, 234, 235, 206, 12,
	254, 176, 205, 412, 57, 213, 59, 209, 152, 392,
	106, 405, 35, 79, 74, 18, 333, 166, 169, 147,
	399, 35, 236, 237, 238, 314, 49, 315, 159, 225,
	226, 61, 172, 62, 154, 379, 172, 352, 352, 52,
	171, 404, 248, 172, 179, 177, 377, 361, 203, 182,
	210, 211, 352, 352, 264, 178, 380, 164, 346, 177,
	208, 207, 345, 117, 265, 336, 189, 208, 207, 178,
	326, 311, 308, 263, 173, 248, 244, 186, 173, 185,
	164, 58, 33, 28, 183, 167, 24, 13, 52, 384,
	173, 390, 173, 173, 177, 33, 54, 14, 391, 70,
	383, 174, 397, 239, 396, 174, 242, 395, 389, 395,
	252, 329, 214, 387, 177, 388, 203, 174, 316, 174,
	174, 33, 35, 256, 60, 69, 371, 370, 158, 249,
	33, 369, 369, 357, 330, 261, 266, 68, 316, 323,
	317, 331, 258, 284, 260, 316, 177, 146, 142, 246,
	177, 408, 271, 283, 172, 406, 245, 172, 173, 93,
	251, 172, 348, 320, 272, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 305, 306,
	307, 290, 293, 278, 273, 174, 303, 304, 285, 292,
	255, 21, 300, 301, 302, 262, 173, 20, 310, 173,
	322, 221, 243, 173, 184, 162, 172, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 174, 324, 335, 174, 328, 161, 327,
	174, 33, 340, 340, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	25, 341, 21, 17, 222, 309, 181, 67, 20, 21,
	172, 152, 240, 166, 22, 20, 349, 319, 171, 347,
	21, 53, 222, 27, 247, 172, 20, 358, 276, 26,
	160, 363, 67, 360, 334, 410, 289, 51, 356, 374,
	374, 344, 359, 218, 414, 375, 381, 66, 382, 386,
	343, 332, 173, 385, 23, 287, 52, 286, 267, 313,
	257, 168, 217, 149, 52, 394, 413, 173, 279, 150,
	172, 145, 73, 337, 216, 172, 398, 401, 171, 174,
	403, 180, 382, 400, 64, 407, 23, 355, 393, 163,
	259, 409, 166, 7, 174, 87, 8, 8, 2, 30,
	16, 6, 5, 415, 4, 32, 166, 34, 3, 1,
	280, 281, 173, 362, 11, 268, 88, 173, 85, 84,
	81, 78, 86, 274, 294, 295, 296, 297, 298, 299,
	188, 134, 116, 270, 110, 155, 148, 241, 55, 174,
	19, 190, 275, 31, 174, 365, 0, 0, 0, 0,
	0, 366, 0, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 119, 0, 133, 0, 52, 417,
	138, 325, 89, 80, 0, 0, 0, 121, 0, 94,
	0, 96, 0, 0, 92, 0, 0, 0, 97, 101,
	98, 37, 39, 40, 41, 42, 43, 44, 38, 45,
	46, 47, 48, 0, 0, 0, 113, 114, 112, 0,
	0, 111, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 36, 0, 0, 0, 0, 0, 0,
	367, 0, 0, 0, 0, 109, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 364, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 37, 39, 40, 41,
	42, 43, 44, 38, 45, 46, 47, 48, 0, 0,
	0, 90, 91, 95, 100, 99, 0, 0, 0, 0,
	0, 368, 0, 0, 0, 0, 14, 0, 36, 0,
	0, 120, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 119, 0, 133, 0, 52, 416, 138,
	0, 89, 80, 0, 0, 0, 121, 0, 94, 0,
	96, 0, 0, 92, 0, 0, 0, 97, 101, 98,
	37, 39, 40, 41, 42, 43, 44, 38, 45, 46,
	47, 48, 0, 0, 0, 113, 114, 112, 0, 0,
	111, 115, 0, 0, 0, 191, 192, 0, 0, 0,
	0, 0, 36, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 108, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 37, 39, 40, 41, 42,
	43, 44, 38, 45, 46, 47, 48, 0, 0, 0,
	90, 91, 95, 100, 99, 196, 200, 198, 195, 193,
	194, 202, 199, 197, 201, 14, 0, 36, 0, 0,
	120, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 119, 0, 133, 0, 52, 411, 138, 0,
	89, 80, 0, 0, 0, 121, 0, 94, 0, 96,
	0, 0, 92, 0, 0, 0, 97, 101, 98, 37,
	39, 40, 41, 42, 43, 44, 38, 45, 46, 47,
	48, 0, 0, 0, 113, 114, 112, 0, 0, 111,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 36, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 108, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 37, 39, 40, 41, 42, 43,
	44, 38, 45, 46, 47, 48, 0, 0, 0, 90,
	91, 95, 100, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 14, 0, 36, 0, 0, 120,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 119, 0, 133, 0, 52, 402, 138, 0, 89,
	80, 0, 0, 0, 121, 0, 94, 0, 96, 0,
	0, 92, 0, 0, 0, 97, 101, 98, 37, 39,
	40, 41, 42, 43, 44, 38, 45, 46, 47, 48,
	0, 0, 0, 113, 114, 112, 0, 0, 111, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 108, 0, 0, 0, 0, 156, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 37, 39, 40, 41, 42, 43, 44,
	38, 45, 46, 47, 48, 0, 0, 0, 90, 91,
	95, 100, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 14, 0, 36, 0, 0, 120, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	119, 0, 133, 0, 52, 354, 138, 0, 89, 80,
	0, 0, 0, 121, 0, 94, 0, 96, 0, 0,
	92, 0, 0, 0, 97, 101, 98, 37, 39, 40,
	41, 42, 43, 44, 38, 45, 46, 47, 48, 0,
	0, 0, 113, 114, 112, 0, 0, 111, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 36,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 108, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 37, 39, 40, 41, 42, 43, 44, 38,
	45, 46, 47, 48, 0, 0, 0, 90, 91, 95,
	100, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 14, 0, 36, 0, 0, 120, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 119,
	0, 133, 0, 52, 321, 138, 0, 89, 80, 0,
	0, 0, 121, 0, 94, 0, 96, 0, 0, 92,
	0, 0, 0, 97, 101, 98, 37, 39, 40, 41,
	42, 43, 44, 38, 45, 46, 47, 48, 0, 0,
	0, 113, 114, 112, 0, 0, 111, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 37, 39, 40, 41, 42, 43, 44, 38, 45,
	46, 47, 48, 0, 0, 0, 90, 91, 95, 100,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 14, 0, 36, 0, 0, 120, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 119, 0,
	133, 0, 52, 165, 138, 0, 89, 80, 0, 0,
	0, 121, 0, 94, 0, 96, 0, 0, 92, 0,
	0, 0, 97, 101, 98, 37, 39, 40, 41, 42,
	43, 44, 38, 45, 46, 47, 48, 0, 0, 0,
	113, 114, 112, 0, 0, 111, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 36, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	37, 39, 40, 41, 42, 43, 44, 38, 45, 46,
	47, 48, 0, 0, 0, 90, 91, 95, 100, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	14, 0, 36, 0, 0, 120, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 119, 0, 133,
	0, 52, 75, 138, 0, 89, 80, 0, 0, 0,
	121, 0, 94, 0, 96, 0, 0, 92, 0, 0,
	0, 97, 101, 98, 37, 39, 40, 41, 42, 43,
	44, 38, 45, 46, 47, 48, 0, 0, 0, 113,
	114, 112, 0, 0, 111, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 36, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 37,
	39, 40, 41, 42, 43, 44, 38, 45, 46, 47,
	48, 0, 0, 0, 90, 91, 95, 100, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 14,
	0, 36, 0, 0, 120, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 119, 0, 133, 0,
	52, 0, 138, 0, 89, 80, 0, 0, 0, 121,
	0, 94, 0, 96, 0, 0, 92, 0, 0, 0,
	97, 101, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 113, 114,
	112, 0, 0, 111, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 37, 39,
	40, 41, 42, 43, 44, 38, 45, 46, 47, 48,
	0, 0, 0, 90, 91, 95, 100, 99, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 14, 0,
	36, 0, 0, 120, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 119, 0, 133, 0, 52,
	0, 138, 0, 89, 0, 0, 0, 0, 121, 0,
	94, 0, 96, 0, 0, 92, 0, 0, 0, 97,
	101, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 114, 112,
	0, 0, 111, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 37, 39, 40,
	41, 42, 43, 44, 38, 45, 46, 47, 48, 0,
	0, 0, 90, 91, 95, 100, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 14, 0, 36,
	0, 0, 120, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 119, 0, 133, 0, 0, 376,
	138, 0, 153, 0, 0, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 114, 112, 0,
	0, 111, 115, 0, 0, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 119, 0, 133, 0,
	0, 373, 138, 0, 153, 109, 108, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 37, 39, 40, 41,
	42, 43, 44, 38, 45, 46, 47, 48, 113, 114,
	112, 0, 0, 111, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 36, 0,
	0, 120, 0, 0, 0, 0, 0, 109, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 37, 39,
	40, 41, 42, 43, 44, 38, 45, 46, 47, 48,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 119, 0, 133, 0, 0, 342, 138, 0, 153,
	36, 0, 0, 120, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 114, 112, 0, 0, 111, 115,
	0, 0, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 119, 0, 133, 0, 0, 339, 138,
	0, 153, 109, 108, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 37, 39, 40, 41, 42, 43, 44,
	38, 45, 46, 47, 48, 113, 114, 112, 0, 0,
	111, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 36, 0, 0, 120, 0,
	0, 0, 0, 0, 109, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 37, 39, 40, 41, 42,
	43, 44, 38, 45, 46, 47, 48, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 119, 0,
	133, 0, 52, 0, 138, 0, 153, 36, 0, 0,
	120, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	113, 114, 112, 0, 0, 111, 115, 0, 0, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	119, 0, 133, 269, 0, 0, 138, 0, 153, 109,
	108, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	37, 39, 40, 41, 42, 43, 44, 38, 45, 46,
	47, 48, 113, 114, 112, 0, 0, 111, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 36, 0, 0, 120, 0, 0, 0, 0,
	0, 109, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 37, 39, 40, 41, 42, 43, 44, 38,
	45, 46, 47, 48, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 119, 0, 133, 0, 0,
	0, 138, 0, 153, 36, 0, 0, 120, 121, 0,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 114, 112,
	0, 0, 111, 115, 0, 0, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 119, 0, 133,
	0, 0, 0, 138, 0, 153, 109, 108, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 37, 39, 40,
	41, 42, 43, 44, 38, 45, 46, 47, 48, 113,
	114, 112, 0, 0, 111, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 36,
	0, 0, 120, 0, 0, 0, 0, 0, 109, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 37,
	39, 40, 41, 42, 43, 44, 38, 45, 46, 47,
	48, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 119, 0, 133, 0, 0, 0, 138, 0,
	153, 36, 0, 0, 120, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 113, 114, 112, 0, 0, 111,
	115, 0, 0, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 119, 0, 133, 0, 0, 0,
	138, 0, 175, 109, 108, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 37, 39, 40, 41, 42, 43,
	44, 38, 45, 46, 47, 48, 113, 114, 112, 0,
	0, 111, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 36, 0, 0, 120,
	0, 0, 0, 0, 0, 109, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 37, 39, 40, 41,
	42, 43, 44, 38, 45, 46, 47, 48, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 119,
	0, 133, 0, 0, 0, 138, 0, 204, 36, 0,
	0, 120, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 114, 112, 0, 0, 111, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 37, 39, 40, 41, 42, 43, 44, 38, 45,
	46, 47, 48, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 36, 0, 0, 120,
}

var yyPact = [...]int{
	20, 20, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 290,
	234, 379, 118, 287, -1000, 316, -1000, 108, 394, -1000,
	-1000, 234, 347, 313, 106, 32, -1000, 234, -1000, 56,
	377, 394, 335, 171, 159, 1089, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 364,
	-1000, 355, 1432, -1000, 363, 182, -1000, 394, -1000, 354,
	361, -1000, 2557, 377, 950, -1000, 394, 318, 265, 242,
	-1000, -1000, 392, -1000, -1000, 105, 1293, -1000, -1000, -1000,
	234, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 31,
	2619, 14, -1000, 94, 2619, 374, 2380, 116, 241, 104,
	102, 2442, -1000, -1000, 628, -1000, 2734, 41, 2619, 2619,
	-81, -1000, -1000, -1000, -1000, -1000, -1000, 146, -69, 367,
	353, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2557, -1000, -1000, -44, 811, 310, -38,
	-26, -4, -42, -1, 23, -1000, 234, -1000, -1000, 302,
	239, 101, -1000, 352, -1000, 191, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 312, -1000, 100, -1000, 394, 197, 1571,
	5, -1000, -1000, 34, 2619, -1000, 1710, 2557, -1000, 351,
	2557, 80, 2380, 232, 98, -1000, -1000, -1000, 89, -1000,
	2557, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 349, 2557, 2265, -1000, -1000, 201,
	-1000, -1000, 2619, 2557, 1367, 2619, 360, 190, 185, 2619,
	348, 346, 672, 2619, 2619, 2619, 2619, 2619, 2619, 2619,
	2619, 2619, 2619, 2619, 2619, 2619, 2619, 2619, 2619, -1000,
	97, 295, 96, -1000, -1000, 1228, -1000, -1000, -1000, 50,
	180, -5, -1000, 1710, 200, -1000, -1000, 1154, -1000, 181,
	-1000, 2203, 95, -1000, 2557, -1000, -1000, 197, 149, -1000,
	176, -1000, 342, -69, 29, -1000, -1000, -1000, -44, -1000,
	324, 190, 90, 366, -1000, -38, 2088, 2026, 341, 332,
	-1000, 292, -26, -4, -42, -42, -42, -42, -42, -42,
	-1, -1, -1, 23, 23, -1000, -1000, -1000, -1000, 87,
	83, -1000, -1000, -1000, -1000, 2557, 199, -1000, 2619, -1000,
	-1000, 82, 1015, 1710, -1000, 129, -1000, -1000, 173, -1000,
	-1000, 2557, 197, 2619, -1000, 72, -1000, 533, 167, -1000,
	-1000, 166, -1000, 1911, 1849, -1000, -1000, 71, -10, -1000,
	60, 81, 130, -1000, 67, -1000, -1000, -1000, -1000, 153,
	-1000, -1000, 150, 133, 366, -1000, 43, -1000, 391, 2557,
	-1000, -1000, 144, -1000, -1000, 142, -1000, -1000, 2619, -1000,
	-1000, 45, -1000, 2619, 876, 66, 36, -1000, 192, -1000,
	-1000, 190, 188, -1000, -1000, 2557, -1000, -1000, -1000, -1000,
	326, 737, -1000, 28, -1000, -1000, 358, 336, -1000, -1000,
	598, -1000, -1000, -1000, -1000, 459, -1000, -1000,
}

var yyPgo = [...]int{
	0, 455, 452, 70, 451, 123, 21, 64, 450, 16,
	156, 324, 448, 447, 446, 445, 30, 5, 7, 9,
	444, 31, 28, 27, 25, 17, 208, 20, 11, 1,
	443, 43, 442, 24, 23, 441, 10, 18, 440, 432,
	19, 6, 8, 431, 13, 219, 0, 2, 22, 4,
	430, 12, 429, 428, 426, 73, 424, 423, 3, 421,
	420, 14, 420, 419, 408, 418, 414, 412, 411, 403,
	405,
}

var yyR1 = [...]int{
	0, 63, 63, 64, 64, 64, 64, 64, 64, 70,
	39, 66, 66, 69, 14, 14, 13, 13, 65, 68,
	56, 56, 11, 11, 67, 67, 10, 12, 12, 9,
	7, 8, 8, 15, 15, 15, 15, 16, 16, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 40, 40, 40, 34, 34, 61, 61, 62, 62,
	35, 35, 35, 35, 36, 36, 37, 37, 37, 37,
	37, 57, 57, 57, 58, 58, 58, 58, 59, 59,
	60, 60, 1, 1, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 2, 2, 31, 31, 31, 31, 31, 31,
	31, 31, 30, 30, 29, 29, 29, 29, 3, 3,
	3, 3, 3, 28, 28, 28, 28, 27, 27, 27,
	26, 26, 26, 26, 25, 25, 25, 25, 25, 25,
	25, 24, 24, 22, 22, 23, 23, 21, 21, 20,
	20, 19, 19, 33, 33, 33, 33, 17, 17, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 45, 45, 18, 43, 43, 44, 55, 55, 55,
	55, 55, 55, 55, 55, 50, 50, 50, 48, 48,
	47, 47, 46, 46, 51, 51, 52, 52, 52, 52,
	52, 52, 52, 52, 41, 41, 42, 42, 49, 49,
	53, 53, 53, 38, 38, 54, 54, 54, 54, 54,
}

var yyR2 = [...]int{
	0, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 6, 4, 3, 4, 2, 3, 3, 3,
	2, 5, 2, 3, 3, 4, 1, 1, 3, 2,
	1, 1, 3, 1, 1, 3, 3, 3, 2, 3,
	2, 3, 1, 1, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 3, 5, 1, 3, 3, 4, 2, 3,
	5, 4, 5, 4, 1, 3, 6, 5, 6, 5,
	3, 1, 1, 3, 6, 4, 4, 6, 2, 3,
	0, 1, 1, 2, 1, 3, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 4, 3, 3, 4, 2,
	2, 3, 1, 3, 1, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 1, 3, 3,
	1, 3, 3, 3, 1, 3, 3, 3, 3, 3,
	3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
	3, 1, 5, 1, 4, 5, 6, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 4, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 3, 3, 4,
	1, 2, 1, 1, 1, 2, 8, 7, 6, 7,
	6, 7, 3, 5, 6, 5, 1, 2, 4, 3,
	3, 4, 5, 1, 3, 3, 2, 2, 2, 3,
}

var yyChk = [...]int{
	-1000, -63, -64, -65, -66, -67, -68, -69, -70, 29,
	24, -56, 39, 127, 137, 15, -64, 23, -7, -8,
	23, 17, -11, 17, 28, 23, 23, 17, 35, -6,
	15, 59, 21, -5, 23, -61, 139, 107, 114, 108,
	109, 110, 111, 112, 113, 115, 116, 117, 118, -7,
	-48, -11, 19, 18, -10, -12, -9, -7, 35, 34,
	-10, 35, 37, -16, 17, -6, 22, 7, 26, 26,
	-5, 23, 21, 18, -48, 20, -47, -46, -43, -55,
	24, -50, -48, -51, -52, -53, -39, -70, -54, 23,
	122, 123, 35, -45, 30, 124, 32, 39, 41, 126,
	125, 40, -17, -33, -29, -19, -3, -31, 87, 86,
	-20, 62, 59, 57, 58, 63, -32, -5, -21, 15,
	142, 28, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 17, -35, -37, -23, -61, 21, -22,
	-24, -25, -26, -27, -28, 18, 25, -6, -14, 19,
	18, -44, -17, 23, -16, -15, 18, 23, -5, -6,
	22, 23, 23, 7, 35, 20, -46, -7, 19, 47,
	-18, -19, -29, -31, -3, 23, 47, 25, 35, -19,
	17, -45, -51, 28, 23, 35, 35, 35, -38, -33,
	-4, 37, 38, 101, 102, 100, 97, 105, 99, 104,
	98, 106, 103, -29, 23, 21, 17, 87, 86, 26,
	-29, -29, 96, 146, 26, 95, 17, 19, -45, 73,
	23, -5, 22, 72, 62, 93, 94, 43, 42, 45,
	44, 89, 90, 74, 57, 58, 59, 60, 61, -9,
	20, -13, -9, 23, 35, 25, 18, 22, 35, -6,
	-40, 23, -46, 47, 26, -55, -17, 19, -48, -45,
	-48, -51, 23, 35, 25, 35, -17, 19, -45, 18,
	-30, -17, 23, -21, -45, -2, -5, 23, -23, 18,
	-60, -59, -58, 23, 18, -22, 19, 19, 23, -5,
	-37, 21, -24, -25, -26, -26, -26, -26, -26, -26,
	-27, -27, -27, -28, -28, -29, -29, -29, 35, 20,
	-9, 35, 23, -5, 35, 37, 25, 20, 47, -55,
	23, 20, -47, 18, -48, -45, 35, -33, -40, 22,
	18, 25, 19, 47, 20, -58, 35, 17, -34, 20,
	-17, -34, 20, 19, 19, 35, 35, -44, 23, -18,
	-49, -42, 31, -41, 20, -55, -48, 20, -17, -40,
	-19, 35, -57, -58, 23, -1, -5, 7, 58, 25,
	20, 20, -36, 20, -17, -36, 20, 35, 47, 35,
	35, -49, -41, 30, 19, -42, -49, 20, 25, 18,
	18, 25, 26, 7, -17, 25, 20, 20, -18, 35,
	-19, -47, 20, -49, 35, 35, 23, -58, 23, -17,
	19, 20, 35, 18, 18, -47, 20, 20,
}

var yyDef = [...]int{
	0, -2, 1, 3, 4, 5, 6, 7, 8, 0,
	0, 0, 0, 0, 9, 0, 2, 0, 0, 30,
	31, 0, 0, 0, 0, 0, 20, 0, 18, 0,
	0, 0, 0, 42, 43, 0, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 0,
	24, 0, 0, 22, 0, 26, 27, 0, 19, 0,
	0, 11, 0, 0, 0, 40, 0, 0, 0, 0,
	44, 45, 0, 32, 25, 0, 0, 200, 202, 203,
	0, 187, 188, 189, 190, 191, 192, 193, 194, 94,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 181, 167, 133, 163, 0, 124, 0, 0,
	161, 128, 129, 130, 131, 132, 114, 0, 159, 0,
	0, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 0, 110, 111, 157, 0, 0, 155,
	153, 151, 144, 140, 137, 23, 0, 29, 13, 0,
	0, 0, 186, 94, 39, 0, 38, 33, 34, 41,
	66, 47, 46, 0, 198, 0, 201, 0, 61, 0,
	0, 183, 133, 124, 0, 94, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 226, 227, 228, 0, 223,
	0, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	178, 179, 180, 127, 94, 0, 0, 119, 120, 0,
	125, 126, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 28,
	0, 0, 0, 21, 12, 0, 37, 67, 199, 0,
	0, 0, 195, 0, 0, 197, 182, 0, 212, 0,
	220, 0, 0, 225, 0, 229, 168, 61, 0, 117,
	0, 122, 121, 160, 0, 116, 112, 113, 158, 95,
	0, 91, 0, 0, 109, 156, 0, 0, 0, 0,
	80, 0, 154, 152, 145, 146, 147, 148, 149, 150,
	141, 142, 143, 138, 139, 134, 135, 136, 14, 0,
	0, 16, 35, 36, 184, 0, 0, 164, 0, 196,
	121, 0, 0, 0, 221, 0, 10, 224, 0, 115,
	118, 0, 61, 0, 96, 0, 88, 0, 0, 71,
	64, 0, 73, 0, 0, 15, 17, 0, 0, 62,
	0, 0, 0, 216, 0, 213, 222, 165, 123, 0,
	162, 89, 0, 0, 81, 82, 0, 92, 0, 0,
	70, 72, 0, 77, 74, 0, 79, 185, 0, 208,
	210, 0, 217, 0, 0, 0, 0, 166, 0, 85,
	86, 0, 0, 93, 65, 0, 76, 78, 63, 211,
	0, 0, 219, 0, 209, 207, 0, 0, 83, 75,
	0, 218, 206, 84, 87, 0, 215, 214,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 146,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:225
		{
			actions.AST.PrintProgram()
		}
	case 10:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:233
		{
			//
		}
	case 11:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:240
		{
			actions.DeclareGlobalInPackage(actions.AST, nil, yyDollar[2].argument, yyDollar[3].argument, nil, false)
		}
	case 12:
		yyDollar = yyS[yypt-6 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:244
		{
			actions.DeclareGlobalInPackage(actions.AST, nil, yyDollar[2].argument, yyDollar[3].argument, yyDollar[5].expressions, true)
		}
	case 13:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:251
		{
			actions.DeclareStruct(actions.AST, yyDollar[2].tok, yyDollar[4].arguments)
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:258
		{
			yyVAL.arguments = nil
		}
	case 15:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:260
		{
			yyVAL.arguments = yyDollar[2].arguments
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:264
		{
			yyVAL.arguments = []*ast.CXArgument{yyDollar[1].argument}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:268
		{
			yyVAL.arguments = append(yyDollar[1].arguments, yyDollar[2].argument)
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:275
		{
			actions.DeclarePackage(actions.AST, yyDollar[2].tok)
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:282
		{
			// DeclareImport($2)
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:289
		{
			// yylval.line = 0
			yyVAL.functionIndex = actions.FunctionHeader(actions.AST, yyDollar[2].tok, nil, false)
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:294
		{
			yyVAL.functionIndex = actions.FunctionHeader(actions.AST, yyDollar[5].tok, yyDollar[3].arguments, true)
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:301
		{
			yyVAL.arguments = nil
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:303
		{
			yyVAL.arguments = yyDollar[2].arguments
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:308
		{
			actions.FunctionDeclaration(actions.AST, yyDollar[1].functionIndex, yyDollar[2].arguments, nil, yyDollar[3].expressions)
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:312
		{
			actions.FunctionDeclaration(actions.AST, yyDollar[1].functionIndex, yyDollar[2].arguments, yyDollar[3].arguments, yyDollar[4].expressions)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:323
		{
			yyVAL.arguments = []*ast.CXArgument{yyDollar[1].argument}
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:327
		{
			yyVAL.arguments = append(yyDollar[1].arguments, yyDollar[3].argument)
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:334
		{
			yyDollar[2].argument.Name = yyDollar[1].argument.Name
			yyDollar[2].argument.Package = yyDollar[1].argument.Package

			yyVAL.argument = yyDollar[2].argument
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:347
		{
			if pkg, err := actions.AST.GetCurrentPackage(); err == nil {
				arg := ast.MakeArgument("", actions.CurrentFile, actions.LineNo)
				arg.SetType(types.UNDEFINED)
				arg.Name = yyDollar[1].tok
				arg.Package = ast.CXPackageIndex(pkg.Index)
				yyVAL.argument = arg
			} else {
				panic(err)
			}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:359
		{
			yyVAL.argument = yyDollar[2].argument
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:363
		{
			arg := actions.DeclarationSpecifiersStruct(actions.AST, yyDollar[1].tok, "", false, actions.CurrentFile, actions.LineNo)
			yyVAL.arguments = []*ast.CXArgument{arg}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:368
		{
			arg := actions.DeclarationSpecifiersBasic(types.Code(yyDollar[1].i))
			yyVAL.arguments = []*ast.CXArgument{arg}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:373
		{
			arg := actions.DeclarationSpecifiersStruct(actions.AST, yyDollar[3].tok, "", false, actions.CurrentFile, actions.LineNo)
			yyVAL.arguments = append(yyDollar[1].arguments, arg)
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:378
		{
			arg := actions.DeclarationSpecifiersBasic(types.Code(yyDollar[3].i))
			yyVAL.arguments = append(yyDollar[1].arguments, arg)
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:390
		{

			yyVAL.arguments = yyDollar[2].arguments

		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:396
		{
			yyVAL.arguments = nil
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:403
		{
			arg := ast.MakeArgument("", actions.CurrentFile, actions.LineNo).SetType(types.FUNC)

			arg.Inputs = actions.AST.AddPointerArgsToCXArgsArray(yyDollar[2].arguments)
			arg.Outputs = actions.AST.AddPointerArgsToCXArgsArray(yyDollar[3].arguments)
			yyVAL.argument = actions.DeclarationSpecifiers(arg, []types.Pointer{0}, constants.DECL_FUNC)
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:411
		{
			yyVAL.argument = actions.DeclarationSpecifiers(yyDollar[2].argument, []types.Pointer{0}, constants.DECL_POINTER)
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:419
		{
			yyVAL.argument = actions.DeclarationSpecifiers(yyDollar[3].argument, []types.Pointer{0}, constants.DECL_SLICE)
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:423
		{
			yyVAL.argument = actions.DeclarationSpecifiersBasic(types.Code(yyDollar[1].i))
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:427
		{
			yyVAL.argument = actions.DeclarationSpecifiersStruct(actions.AST, yyDollar[1].tok, "", false, actions.CurrentFile, actions.LineNo)
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:431
		{
			basic := actions.DeclarationSpecifiersBasic(types.Code(yyDollar[2].i))
			yyVAL.argument = actions.DeclarationSpecifiers(basic, types.Cast_sint_to_sptr(yyDollar[1].ints), constants.DECL_ARRAY)
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:436
		{
			strct := actions.DeclarationSpecifiersStruct(actions.AST, yyDollar[2].tok, "", false, actions.CurrentFile, actions.LineNo)
			yyVAL.argument = actions.DeclarationSpecifiers(strct, types.Cast_sint_to_sptr(yyDollar[1].ints), constants.DECL_ARRAY)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:441
		{
			yyVAL.argument = actions.DeclarationSpecifiersStruct(actions.AST, yyDollar[3].tok, yyDollar[1].tok, true, actions.CurrentFile, actions.LineNo)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:445
		{
			yyVAL.argument = actions.DeclarationSpecifiersStruct(actions.AST, yyDollar[3].tok, types.Code(yyDollar[1].i).Name(), true, actions.CurrentFile, actions.LineNo)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:460
		{
			yyVAL.i = int(types.AFF)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:462
		{
			yyVAL.i = int(types.BOOL)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:464
		{
			yyVAL.i = int(types.STR)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:466
		{
			yyVAL.i = int(types.F32)
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:468
		{
			yyVAL.i = int(types.F64)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:470
		{
			yyVAL.i = int(types.I8)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:472
		{
			yyVAL.i = int(types.I16)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:474
		{
			yyVAL.i = int(types.I32)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:476
		{
			yyVAL.i = int(types.I64)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:478
		{
			yyVAL.i = int(types.UI8)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:480
		{
			yyVAL.i = int(types.UI16)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:482
		{
			yyVAL.i = int(types.UI32)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:484
		{
			yyVAL.i = int(types.UI64)
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:490
		{
			yyVAL.expressions = nil
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:492
		{
			for i := 0; i < len(yyDollar[3].expressions); i++ {
				if yyDollar[3].expressions[i].Type != ast.CX_LINE {
					if yyDollar[3].expressions[i].IsStructLiteral() {
						yyVAL.expressions = actions.StructLiteralAssignment(actions.AST, []ast.CXExpression{actions.StructLiteralFields(actions.AST, yyDollar[1].tok)}, yyDollar[3].expressions)
					} else {
						yyVAL.expressions = actions.Assignment(actions.AST, []ast.CXExpression{actions.StructLiteralFields(actions.AST, yyDollar[1].tok)}, "=", yyDollar[3].expressions)
					}
					break
				}
			}
		}
	case 63:
		yyDollar = yyS[yypt-5 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:505
		{
			for i := 0; i < len(yyDollar[5].expressions); i++ {
				if yyDollar[5].expressions[i].Type != ast.CX_LINE {
					if yyDollar[5].expressions[i].IsStructLiteral() {
						yyVAL.expressions = append(yyDollar[1].expressions, actions.StructLiteralAssignment(actions.AST, []ast.CXExpression{actions.StructLiteralFields(actions.AST, yyDollar[3].tok)}, yyDollar[5].expressions)...)
					} else {
						yyVAL.expressions = append(yyDollar[1].expressions, actions.Assignment(actions.AST, []ast.CXExpression{actions.StructLiteralFields(actions.AST, yyDollar[3].tok)}, "=", yyDollar[5].expressions)...)
					}
					break
				}
			}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:521
		{
			yyDollar[1].expressions[len(yyDollar[1].expressions)-1].ExpressionType = ast.CXEXPR_ARRAY_LITERAL
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:526
		{
			yyDollar[3].expressions[len(yyDollar[3].expressions)-1].ExpressionType = ast.CXEXPR_ARRAY_LITERAL
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:534
		{
			yyVAL.ints = []int{int(yyDollar[2].i32)}
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:538
		{
			yyVAL.ints = append(yyDollar[1].ints, int(yyDollar[3].i32))
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:545
		{
			yyVAL.ints = []int{0}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:549
		{
			yyVAL.ints = append(yyDollar[1].ints, 0)
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:557
		{
			yyVAL.expressions = yyDollar[4].expressions
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:561
		{
			yyVAL.expressions = nil
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:565
		{
			yyVAL.expressions = actions.ArrayLiteralExpression(actions.AST, types.Cast_sint_to_sptr(yyDollar[1].ints), types.Code(yyDollar[2].i), yyDollar[4].expressions)
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:569
		{
			yyVAL.expressions = nil
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:582
		{
			yyDollar[1].expressions[len(yyDollar[1].expressions)-1].ExpressionType = ast.CXEXPR_ARRAY_LITERAL
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:587
		{

			yyDollar[3].expressions[len(yyDollar[3].expressions)-1].ExpressionType = ast.CXEXPR_ARRAY_LITERAL
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:596
		{
			yyVAL.expressions = yyDollar[5].expressions
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:600
		{
			yyVAL.expressions = nil
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:604
		{
			yyVAL.expressions = actions.SliceLiteralExpression(actions.AST, types.Code(yyDollar[3].i), yyDollar[5].expressions)
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:608
		{
			yyVAL.expressions = nil
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:612
		{
			lastExpression, err := actions.AST.GetCXAtomicOpFromExpressions(yyDollar[3].expressions, len(yyDollar[3].expressions)-1)
			if err != nil {
				panic(err)
			}

			for _, expr := range yyDollar[3].expressions {
				if expr.Type == ast.CX_LINE {
					continue
				}
				expression, err := actions.AST.GetCXAtomicOp(expr.Index)
				if err != nil {
					panic(err)
				}

				expressionOutputTypeSig := actions.AST.GetCXTypeSignatureFromArray(expression.GetOutputs(actions.AST)[0])
				var expressionOutputArg *ast.CXArgument = &ast.CXArgument{}
				if expressionOutputTypeSig.Type == ast.TYPE_CXARGUMENT_DEPRECATE {
					expressionOutputArg = actions.AST.GetCXArgFromArray(ast.CXArgumentIndex(expressionOutputTypeSig.Meta))
				} else {
					continue
				}

				expressionOutput := expressionOutputArg
				lastExpressionInputTypeSig := actions.AST.GetCXTypeSignatureFromArray(lastExpression.GetInputs(actions.AST)[0])
				if expressionOutput.Name == lastExpressionInputTypeSig.Name {
					expressionOutput.Lengths = append(expressionOutput.Lengths, 0)
					expressionOutput.DeclarationSpecifiers = append(expressionOutput.DeclarationSpecifiers, constants.DECL_SLICE)
				}
			}

			yyDollar[3].expressions[len(yyDollar[3].expressions)-1].ExpressionType = ast.CXEXPR_ARRAY_LITERAL
			yyVAL.expressions = yyDollar[3].expressions
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:650
		{
			yyVAL.string = yyDollar[1].tok
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:654
		{
			yyVAL.string = strconv.Itoa(int(yyDollar[1].i32))
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:658
		{
			yyVAL.string = types.Code(yyDollar[1].i).Name() + "." + yyDollar[3].tok
		}
	case 84:
		yyDollar = yyS[yypt-6 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:665
		{
			res := append([]string{yyDollar[3].string}, yyDollar[5].tok)
			res = append(res, yyDollar[1].tok)
			yyVAL.stringA = res
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:671
		{
			yyVAL.stringA = append([]string{yyDollar[1].tok}, yyDollar[3].string)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:675
		{
			yyVAL.stringA = append(yyDollar[3].stringA, yyDollar[1].tok)
		}
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:679
		{
			res := append(yyDollar[3].stringA, yyDollar[5].stringA...)
			yyVAL.stringA = append(res, yyDollar[1].tok)
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:687
		{
			yyVAL.stringA = yyDollar[1].stringA
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:691
		{
			yyDollar[1].stringA = append(yyDollar[1].stringA, yyDollar[2].stringA...)
			yyVAL.stringA = yyDollar[1].stringA
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:699
		{
			yyVAL.expressions = actions.SliceLiteralExpression(actions.AST, types.AFF, nil)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:703
		{
			var exprs []ast.CXExpression
			for _, str := range yyDollar[1].stringA {
				expr := actions.WritePrimaryExprs(actions.AST, types.AFF, encoder.Serialize(str), false)
				expr[len(expr)-1].ExpressionType = ast.CXEXPR_ARRAY_LITERAL
				exprs = append(exprs, expr...)
			}

			yyVAL.expressions = actions.SliceLiteralExpression(actions.AST, types.AFF, exprs)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:718
		{
			yyVAL.i32 = yyDollar[1].i32
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:722
		{
			yyVAL.i32 = -yyDollar[2].i32
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:728
		{
			yyVAL.expressions = actions.PrimaryIdentifier(actions.AST, yyDollar[1].tok)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:732
		{
			yyVAL.expressions = nil
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:736
		{
			yyVAL.expressions = yyDollar[3].expressions
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:740
		{
			yyVAL.expressions = actions.WritePrimaryExprs(actions.AST, types.STR, types.Make_obj([]byte(yyDollar[1].tok)), false)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:744
		{
			exprs := actions.WritePrimaryExprs(actions.AST, types.BOOL, encoder.Serialize(yyDollar[1].bool), false)
			yyVAL.expressions = exprs
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:749
		{
			yyVAL.expressions = actions.WritePrimaryExprs(actions.AST, types.I8, encoder.Serialize(yyDollar[1].i8), false)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:753
		{
			yyVAL.expressions = actions.WritePrimaryExprs(actions.AST, types.I16, encoder.Serialize(yyDollar[1].i16), false)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:757
		{
			yyVAL.expressions = actions.WritePrimaryExprs(actions.AST, types.I32, encoder.Serialize(yyDollar[1].i32), false)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:761
		{
			yyVAL.expressions = actions.WritePrimaryExprs(actions.AST, types.I64, encoder.Serialize(yyDollar[1].i64), false)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:765
		{
			yyVAL.expressions = actions.WritePrimaryExprs(actions.AST, types.UI8, encoder.Serialize(yyDollar[1].ui8), false)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:769
		{
			yyVAL.expressions = actions.WritePrimaryExprs(actions.AST, types.UI16, encoder.Serialize(yyDollar[1].ui16), false)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:773
		{
			yyVAL.expressions = actions.WritePrimaryExprs(actions.AST, types.UI32, encoder.Serialize(yyDollar[1].ui32), false)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:777
		{
			yyVAL.expressions = actions.WritePrimaryExprs(actions.AST, types.UI64, encoder.Serialize(yyDollar[1].ui64), false)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:781
		{
			yyVAL.expressions = actions.WritePrimaryExprs(actions.AST, types.F32, encoder.Serialize(yyDollar[1].f32), false)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:785
		{
			yyVAL.expressions = actions.WritePrimaryExprs(actions.AST, types.F64, encoder.Serialize(yyDollar[1].f64), false)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:789
		{
			yyVAL.expressions = yyDollar[2].expressions
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:791
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:795
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:801
		{
			yyVAL.tok = types.Code(yyDollar[1].i).Name()
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:810
		{
			yyVAL.expressions = actions.PostfixExpressionArray(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:814
		{
			yyVAL.expressions = actions.PostfixExpressionNative(actions.AST, types.Code(yyDollar[1].i), yyDollar[3].tok)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:818
		{
			yyVAL.expressions = actions.PostfixExpressionEmptyFunCall(actions.AST, yyDollar[1].expressions)
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:822
		{
			yyVAL.expressions = actions.PostfixExpressionFunCall(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions)
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:826
		{
			yyVAL.expressions = actions.PostfixExpressionIncDec(actions.AST, yyDollar[1].expressions, true)
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:830
		{
			yyVAL.expressions = actions.PostfixExpressionIncDec(actions.AST, yyDollar[1].expressions, false)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:834
		{
			yyVAL.expressions = actions.PostfixExpressionField(actions.AST, yyDollar[1].expressions, yyDollar[3].tok)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:842
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:850
		{
			// TODO
			yyVAL.expressions = yyDollar[2].expressions
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:855
		{
			// TODO
			yyVAL.expressions = yyDollar[2].expressions
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:860
		{
			yyVAL.expressions = actions.UnaryExpression(actions.AST, yyDollar[1].tok, yyDollar[2].expressions)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:876
		{
			yyVAL.expressions = actions.OperatorExpression(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions, constants.OP_MUL)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:880
		{
			yyVAL.expressions = actions.OperatorExpression(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions, constants.OP_DIV)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:884
		{
			yyVAL.expressions = actions.OperatorExpression(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions, constants.OP_MOD)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:892
		{
			yyVAL.expressions = actions.OperatorExpression(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions, constants.OP_ADD)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:896
		{
			yyVAL.expressions = actions.OperatorExpression(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions, constants.OP_SUB)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:904
		{
			yyVAL.expressions = actions.OperatorExpression(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions, constants.OP_BITSHL)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:908
		{
			yyVAL.expressions = actions.OperatorExpression(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions, constants.OP_BITSHR)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:912
		{
			yyVAL.expressions = actions.OperatorExpression(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions, constants.OP_BITCLEAR)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:920
		{
			yyVAL.expressions = actions.OperatorExpression(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions, constants.OP_EQUAL)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:924
		{
			yyVAL.expressions = actions.OperatorExpression(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions, constants.OP_UNEQUAL)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:928
		{
			yyVAL.expressions = actions.OperatorExpression(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions, constants.OP_LT)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:932
		{
			yyVAL.expressions = actions.OperatorExpression(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions, constants.OP_GT)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:936
		{
			yyVAL.expressions = actions.OperatorExpression(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions, constants.OP_LTEQ)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:940
		{
			yyVAL.expressions = actions.OperatorExpression(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions, constants.OP_GTEQ)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:947
		{
			yyVAL.expressions = actions.OperatorExpression(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions, constants.OP_BITAND)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:955
		{
			yyVAL.expressions = actions.OperatorExpression(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions, constants.OP_BITXOR)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:963
		{
			yyVAL.expressions = actions.OperatorExpression(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions, constants.OP_BITOR)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:971
		{
			yyVAL.expressions = actions.OperatorExpression(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions, constants.OP_BOOL_AND)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:979
		{
			yyVAL.expressions = actions.OperatorExpression(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions, constants.OP_BOOL_OR)
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:992
		{
			yyVAL.expressions = actions.PrimaryStructLiteral(actions.AST, yyDollar[1].tok, yyDollar[3].expressions)
		}
	case 165:
		yyDollar = yyS[yypt-5 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:996
		{
			yyVAL.expressions = actions.UnaryExpression(actions.AST, yyDollar[1].tok, actions.PrimaryStructLiteral(actions.AST, yyDollar[2].tok, yyDollar[4].expressions))
		}
	case 166:
		yyDollar = yyS[yypt-6 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1000
		{
			cxAtomicOp, err := actions.AST.GetCXAtomicOpFromExpressions(yyDollar[1].expressions, 0)
			if err != nil {
				panic(err)
			}
			cxAtomicOpOutputTypeSig := actions.AST.GetCXTypeSignatureFromArray(cxAtomicOp.GetOutputs(actions.AST)[0])
			yyVAL.expressions = actions.PrimaryStructLiteralExternal(actions.AST, cxAtomicOpOutputTypeSig.Name, yyDollar[3].tok, yyDollar[5].expressions)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1013
		{

			if yyDollar[3].expressions == nil {
				yyVAL.expressions = nil
			}
			if yyDollar[3].expressions != nil {
				for i := 0; i < len(yyDollar[3].expressions); i++ {
					if yyDollar[3].expressions[i].Type != ast.CX_LINE {
						if yyDollar[3].expressions[i].IsArrayLiteral() {
							if yyDollar[2].tok != "=" && yyDollar[2].tok != ":=" {
								panic("")
							}
							if yyDollar[2].tok == ":=" {
								for _, from := range yyDollar[3].expressions {
									if from.Type == ast.CX_LINE {
										continue
									}

									fromExpression, err := actions.AST.GetCXAtomicOp(from.Index)
									if err != nil {
										panic(err)
									}

									fromExpressionOutputTypeSig := actions.AST.GetCXTypeSignatureFromArray(fromExpression.GetOutputs(actions.AST)[0])
									fromExpressionOutputIdx := fromExpressionOutputTypeSig.Meta
									actions.AST.CXArgs[fromExpressionOutputIdx].PreviouslyDeclared = true
								}
							}
							yyVAL.expressions = actions.ArrayLiteralAssignment(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions)
						} else if yyDollar[3].expressions[len(yyDollar[3].expressions)-1].IsStructLiteral() {
							if yyDollar[2].tok != "=" && yyDollar[2].tok != ":=" {
								panic("")
							}
							if yyDollar[2].tok == ":=" {
								for _, from := range yyDollar[3].expressions {
									if from.Type == ast.CX_LINE {
										continue
									}

									fromExpression, err := actions.AST.GetCXAtomicOp(from.Index)
									if err != nil {
										panic(err)
									}

									fromExpressionOutputTypeSig := actions.AST.GetCXTypeSignatureFromArray(fromExpression.GetOutputs(actions.AST)[0])
									fromExpressionOutputIdx := fromExpressionOutputTypeSig.Meta
									actions.AST.CXArgs[fromExpressionOutputIdx].PreviouslyDeclared = true
								}
							}
							yyVAL.expressions = actions.StructLiteralAssignment(actions.AST, yyDollar[1].expressions, yyDollar[3].expressions)
						} else {
							yyVAL.expressions = actions.Assignment(actions.AST, yyDollar[1].expressions, yyDollar[2].tok, yyDollar[3].expressions)
						}

						break
					}
				}
			}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1091
		{
			lastOfThirdAtomicOp, err := actions.AST.GetCXAtomicOpFromExpressions(yyDollar[3].expressions, len(yyDollar[3].expressions)-1)
			if err != nil {
				panic(err)
			}

			lastOfFirstAtomicOp, err := actions.AST.GetCXAtomicOpFromExpressions(yyDollar[1].expressions, len(yyDollar[1].expressions)-1)
			if err != nil {
				panic(err)
			}

			lastOfThirdAtomicOp.Outputs.Fields = append(lastOfFirstAtomicOp.Outputs.Fields, lastOfThirdAtomicOp.Outputs.Fields...)
			yyVAL.expressions = yyDollar[3].expressions
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1113
		{
			yyVAL.expressions = actions.DeclareLocal(actions.AST, yyDollar[2].argument, yyDollar[3].argument, nil, false)
		}
	case 185:
		yyDollar = yyS[yypt-6 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1117
		{
			yyVAL.expressions = actions.DeclareLocal(actions.AST, yyDollar[2].argument, yyDollar[3].argument, yyDollar[5].expressions, true)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1133
		{
			yyVAL.expressions = nil
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1139
		{
			// it has to be the first expression so all the nested expressions are executed
			// instead of only executing the last one
			// UPDATE: I need to label all expressions. `goto` will jump to first occurrance anyway, so no problem
			// I need this behavior for affordances
			for _, expr := range yyDollar[3].expressions {
				if expr.Type == ast.CX_LINE {
					continue
				}
				expressionIdx := expr.Index
				actions.AST.CXAtomicOps[expressionIdx].Label = yyDollar[1].tok
			}

			yyVAL.expressions = yyDollar[3].expressions
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1155
		{
			yyVAL.expressions = nil
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1157
		{
			yyVAL.expressions = nil
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1162
		{
			yyVAL.expressions = nil
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1164
		{
			yyVAL.expressions = yyDollar[2].expressions
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1172
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1183
		{
			yyVAL.expressions = nil
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1185
		{
			var lastFirstAtomicOp *ast.CXAtomicOperator = &ast.CXAtomicOperator{Operator: -1}
			var err error

			if len(yyDollar[1].expressions) > 0 {
				lastFirstAtomicOp, err = actions.AST.GetCXAtomicOpFromExpressions(yyDollar[1].expressions, len(yyDollar[1].expressions)-1)
				if err != nil {
					panic(err)
				}
			}
			lastFirstAtomicOpOperator := actions.AST.GetFunctionFromArray(lastFirstAtomicOp.Operator)

			if len(yyDollar[1].expressions) > 0 && lastFirstAtomicOpOperator == nil && !yyDollar[1].expressions[len(yyDollar[1].expressions)-1].IsMethodCall() {
				outs := lastFirstAtomicOp.GetOutputs(actions.AST)

				if len(outs) > 0 {
					outTypeSig := actions.AST.GetCXTypeSignatureFromArray(outs[0])

					var expressionOutputArg *ast.CXArgument = &ast.CXArgument{ArgDetails: &ast.CXArgumentDebug{}}
					if outTypeSig.Type == ast.TYPE_CXARGUMENT_DEPRECATE {
						expressionOutputArg = actions.AST.GetCXArgFromArray(ast.CXArgumentIndex(outTypeSig.Meta))
					} else {
						// do nothing
					}

					println(ast.CompilationError(expressionOutputArg.ArgDetails.FileName, expressionOutputArg.ArgDetails.FileLine), "invalid expression")
				} else {
					println(ast.CompilationError(actions.CurrentFile, actions.LineNo), "invalid expression")
				}
				yyVAL.expressions = nil
			} else {
				yyVAL.expressions = yyDollar[1].expressions
			}
			// $$ = $1
		}
	case 206:
		yyDollar = yyS[yypt-8 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1224
		{
			yyVAL.expressions = actions.CreateSelectionStatement(actions.AST, yyDollar[2].expressions, yyDollar[4].expressions, yyDollar[6].SelectStatements, yyDollar[7].expressions, actions.SEL_ELSEIFELSE)
		}
	case 207:
		yyDollar = yyS[yypt-7 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1228
		{
			yyVAL.expressions = actions.SelectionExpressions(actions.AST, yyDollar[2].expressions, yyDollar[4].expressions, yyDollar[6].expressions)
		}
	case 208:
		yyDollar = yyS[yypt-6 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1232
		{
			yyVAL.expressions = actions.SelectionExpressions(actions.AST, yyDollar[2].expressions, nil, yyDollar[5].expressions)
		}
	case 209:
		yyDollar = yyS[yypt-7 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1236
		{
			yyVAL.expressions = actions.CreateSelectionStatement(actions.AST, yyDollar[2].expressions, yyDollar[4].expressions, yyDollar[6].SelectStatements, nil, actions.SEL_ELSEIF)
		}
	case 210:
		yyDollar = yyS[yypt-6 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1240
		{
			//
			yyVAL.expressions = actions.CreateSelectionStatement(actions.AST, yyDollar[2].expressions, nil, yyDollar[5].SelectStatements, nil, actions.SEL_ELSEIF)
		}
	case 211:
		yyDollar = yyS[yypt-7 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1245
		{
			//
			yyVAL.expressions = actions.CreateSelectionStatement(actions.AST, yyDollar[2].expressions, nil, yyDollar[5].SelectStatements, yyDollar[6].expressions, actions.SEL_ELSEIFELSE)
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1250
		{
			yyVAL.expressions = actions.SelectionExpressions(actions.AST, yyDollar[2].expressions, yyDollar[3].expressions, nil)
		}
	case 213:
		yyDollar = yyS[yypt-5 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1254
		{
			yyVAL.expressions = nil
		}
	case 214:
		yyDollar = yyS[yypt-6 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1258
		{
			yyVAL.SelectStatement = actions.SelectStatement{
				Condition: yyDollar[3].expressions,
				Then:      yyDollar[5].expressions,
			}
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1265
		{
			yyVAL.SelectStatement = actions.SelectStatement{
				Condition: yyDollar[3].expressions,
				Then:      nil,
			}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1274
		{
			yyVAL.SelectStatements = []actions.SelectStatement{yyDollar[1].SelectStatement}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1278
		{
			yyVAL.SelectStatements = append(yyDollar[1].SelectStatements, yyDollar[2].SelectStatement)
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1285
		{
			yyVAL.expressions = yyDollar[3].expressions
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1289
		{
			yyVAL.expressions = nil
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1296
		{
			yyVAL.expressions = actions.IterationExpressions(actions.AST, nil, yyDollar[2].expressions, nil, yyDollar[3].expressions)
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1300
		{
			yyVAL.expressions = actions.IterationExpressions(actions.AST, yyDollar[2].expressions, yyDollar[3].expressions, nil, yyDollar[4].expressions)
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1304
		{
			yyVAL.expressions = actions.IterationExpressions(actions.AST, yyDollar[2].expressions, yyDollar[3].expressions, yyDollar[4].expressions, yyDollar[5].expressions)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1311
		{
			retExprs := actions.ReturnExpressions{Expressions: actions.AssociateReturnExpressions(actions.AST, 0, yyDollar[1].expressions)}
			retExprs.Size++
			yyVAL.ReturnExpressions = retExprs
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1317
		{
			yyDollar[1].ReturnExpressions.Expressions = append(yyDollar[1].ReturnExpressions.Expressions, actions.AssociateReturnExpressions(actions.AST, yyDollar[1].ReturnExpressions.Size, yyDollar[3].expressions)...)
			yyDollar[1].ReturnExpressions.Size++
			yyVAL.ReturnExpressions = yyDollar[1].ReturnExpressions
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1325
		{
			pkg, err := actions.AST.GetCurrentPackage()
			if err != nil {
				panic(err)
			}

			exprCXLine := ast.MakeCXLineExpression(actions.AST, actions.CurrentFile, actions.LineNo, actions.LineStr)
			expr := ast.MakeAtomicOperatorExpression(actions.AST, ast.Natives[constants.OP_GOTO])
			expressionIdx := expr.Index
			actions.AST.CXAtomicOps[expressionIdx].Package = ast.CXPackageIndex(pkg.Index)
			actions.AST.CXAtomicOps[expressionIdx].Label = yyDollar[2].tok
			yyVAL.expressions = []ast.CXExpression{*exprCXLine, *expr}

		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1340
		{
			yyVAL.expressions = actions.ContinueExpressions(actions.AST)
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1344
		{
			yyVAL.expressions = actions.BreakExpressions(actions.AST)
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1348
		{
			yyVAL.expressions = actions.AddJmpToReturnExpressions(actions.AST, actions.ReturnExpressions{})
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cxparser/cxparsingcompletor/parsingcompletor.y:1352
		{
			yyVAL.expressions = actions.AddJmpToReturnExpressions(actions.AST, yyDollar[2].ReturnExpressions)
		}
	}
	goto yystack /* stack new state and value */
}
