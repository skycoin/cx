package main

import "gl"
import "glfw"

var width i32 = 800
var height i32 = 600

func main () () {
	glfw.Init()

	glfw.CreateWindow("window", width, height, "Triangle")
	glfw.MakeContextCurrent("window")
	
	gl.Init()
	
	var program i32
	program = gl.CreateProgram()
	
	gl.LinkProgram(program)

	var ratio f32

	// Start FPS
	var lastTime f64
	var currentTime f64
	var nbFrames i32
	lastTime = glfw.GetTime()
	nbFrames = 0
	// End FPS

	for bool.not(glfw.ShouldClose("window")) {

		// Start FPS
		currentTime = glfw.GetTime()
		nbFrames = i32.add(nbFrames, 1)
		if f64.gteq(f64.sub(currentTime, lastTime), 1.0D) {
			i32.print(nbFrames)
			nbFrames = 0
			lastTime = f64.add(lastTime, 1.0D)
		}
		// End FPS

		// Drawing a triangle
		// bufferWidth, bufferHeight := glfw.GetFramebufferSize("window")
		// ratio = f32.div(i32.f32(bufferWidth), i32.f32(bufferHeight))

		gl.Clear(gl.COLOR_BUFFER_BIT)

		gl.UseProgram(program)
		
		gl.MatrixMode(gl.PROJECTION)
		gl.LoadIdentity()
		gl.Ortho(f32.f64(f32.mul(ratio, -1.0)), f32.f64(ratio), -1.0D, 1.0D, 1.0D, -1.0D)
		gl.MatrixMode(gl.MODELVIEW)

		gl.Begin(gl.TRIANGLES)
		gl.Color3f(1.0, 0.0, 0.0)
		gl.Vertex3f(-0.6, -0.4, 0.0)
		gl.Color3f(0.0, 1.0, 0.0)
		gl.Vertex3f(0.6, -0.4, 0.0)
		gl.Color3f(0.0, 0.0, 1.0)
		gl.Vertex3f(0.0, 0.6, 0.0)
		gl.End()
		
		glfw.PollEvents()
		glfw.SwapBuffers("window")
	}
}
